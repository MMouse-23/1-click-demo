{
	"status": {},
	"contains_secrets": false,
	"product_version": "2.9.7",
	"spec": {
		"description": "Builds the 1-Click-Demo VM, portable. Uses the Public GIT repo to pull the build specs, icw this blueprint you have the full package to rebuild 1CD.\nwith the exception of 2 secret files, Slackbot and ERA auto versioning\nThere is no AHV dependency other the downloaded image, just a plain Windows 2016 will do.\n1) Import BluePrint and setup Creds, choose your own password if you like.\n2) Set a static IP for the VM in the BP\n3) Set the secret download URLs, ask MGrauwmans\n4) Start the nutanix CMDlets in the console and hit a key...\n5) Start the 1CD services through the managed blueprint App\n6) check C:\\1-CLick-Demo\\System\\Logging (Maintenance)\n6) use the website or IP on port 80 \/ 81 to build your request.\n7) Multi user version is manual work, join domain and enable forms based auth",
		"resources": {
			"client_attrs": {
				"None": {
					"y": -1157.4868917424,
					"x": 820.0532500022
				},
				"306b8456_deployment": {
					"y": -17857.1854110849,
					"x": 348.8085246101
				}
			},
			"service_definition_list": [{
				"singleton": false,
				"action_list": [{
					"description": "System action for creating an application",
					"type": "system",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "64e9d3a3_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "871f4d36_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "64e9d3a3_dag"
						},
						"variable_list": []
					},
					"name": "action_create"
				}, {
					"description": "System action for deleting an application. Deletes created VMs as well",
					"type": "system",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "b17e8f3c_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "6b856c46_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "b17e8f3c_dag"
						},
						"variable_list": []
					},
					"name": "action_delete"
				}, {
					"description": "System action for starting an application",
					"type": "system",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "5903324f_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "de4725bd_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "5903324f_dag"
						},
						"variable_list": []
					},
					"name": "action_start"
				}, {
					"description": "System action for stopping an application",
					"type": "system",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "2ceb603f_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "fc3eb03c_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "2ceb603f_dag"
						},
						"variable_list": []
					},
					"name": "action_stop"
				}, {
					"description": "System action for restarting an application",
					"type": "system",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "b078f107_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "cac96993_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "b078f107_dag"
						},
						"variable_list": []
					},
					"name": "action_restart"
				}],
				"depends_on_list": [],
				"name": "1CDAppNode",
				"port_list": [],
				"tier": "",
				"variable_list": [{
					"val_type": "STRING",
					"is_mandatory": false,
					"description": "",
					"data_type": "BASE",
					"type": "LOCAL",
					"name": "BaseDir",
					"value": "c:\\1-CLick-Demo",
					"label": "",
					"attrs": {
						"type": ""
					},
					"is_hidden": false,
					"options": {
						"type": "PREDEFINED",
						"choices": []
					}
				}, {
					"val_type": "STRING",
					"is_mandatory": false,
					"description": "",
					"data_type": "BASE",
					"type": "LOCAL",
					"name": "OneCDRepo",
					"value": "https:\/\/github.com\/MMouse-23\/1-click-demo\/",
					"label": "",
					"attrs": {
						"type": ""
					},
					"is_hidden": false,
					"options": {
						"type": "PREDEFINED",
						"choices": []
					}
				}, {
					"regex": {
						"should_validate": false,
						"value": "^.*$"
					},
					"val_type": "STRING",
					"is_mandatory": false,
					"description": "",
					"data_type": "BASE",
					"type": "SECRET",
					"name": "Token1URL",
					"value": "",
					"label": "",
					"attrs": {
						"is_secret_modified": false,
						"secret_reference": {},
						"type": "SECRET"
					},
					"is_hidden": false,
					"options": {
						"type": "PREDEFINED",
						"choices": []
					}
				}, {
					"val_type": "STRING",
					"is_mandatory": false,
					"description": "",
					"data_type": "BASE",
					"type": "SECRET",
					"name": "Token2URL",
					"value": "",
					"label": "",
					"attrs": {
						"is_secret_modified": false,
						"secret_reference": {},
						"type": "SECRET"
					},
					"is_hidden": false,
					"options": {
						"type": "PREDEFINED",
						"choices": []
					}
				}],
				"description": ""
			}],
			"substrate_definition_list": [{
				"description": "",
				"action_list": [{
					"description": "",
					"type": "fragment",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_substrate",
								"name": "1CD App Node"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "ef51ddf2_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "766770c1_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "ef51ddf2_dag"
						},
						"variable_list": [{
							"val_type": "STRING",
							"is_mandatory": false,
							"description": "",
							"data_type": "BASE",
							"type": "LOCAL",
							"name": "One_CD_IP",
							"value": "",
							"label": "",
							"attrs": {
								"type": ""
							},
							"is_hidden": false,
							"options": {
								"type": "PREDEFINED",
								"choices": []
							}
						}]
					},
					"name": "pre_action_create"
				}, {
					"description": "",
					"type": "fragment",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_substrate",
								"name": "1CD App Node"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "7c7e6959_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "4b88778d_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "7c7e6959_dag"
						},
						"variable_list": []
					},
					"name": "post_action_delete"
				}],
				"type": "AHV_VM",
				"name": "1CD App Node",
				"readiness_probe": {
					"connection_type": "POWERSHELL",
					"retries": "5",
					"connection_protocol": "",
					"connection_port": 5985,
					"address": "@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
					"delay_secs": "120",
					"disable_readiness_probe": false,
					"login_credential_local_reference": {
						"kind": "app_credential",
						"name": "administrator"
					}
				},
				"editables": {
					"create_spec": {
						"resources": {
							"nic_list": {},
							"serial_port_list": {}
						}
					}
				},
				"os_type": "Windows",
				"create_spec": {
					"name": "1-Click-Demo",
					"resources": {
						"nic_list": [{
							"nic_type": "NORMAL_NIC",
							"ip_endpoint_list": [{
								"ip": "10.42.112.61",
								"type": "ASSIGNED"
							}],
							"network_function_chain_reference": null,
							"network_function_nic_type": "INGRESS",
							"mac_address": "",
							"subnet_reference": {
								"kind": "subnet",
								"type": "",
								"name": "",
								"uuid": "bdd7ea99-ac88-417d-a9bd-775777766b62"
							},
							"type": ""
						}],
						"serial_port_list": [],
						"guest_tools": null,
						"num_vcpus_per_socket": 2,
						"num_sockets": 4,
						"gpu_list": [],
						"memory_size_mib": 16384,
						"parent_reference": null,
						"hardware_clock_timezone": "",
						"guest_customization": {
							"cloud_init": null,
							"type": "",
							"sysprep": {
								"is_domain": false,
								"install_type": "PREPARED",
								"domain_credential_reference": null,
								"domain": "",
								"dns_ip": "",
								"dns_search_path": "",
								"unattend_xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"300\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>1-click-demo<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>",
								"type": ""
							}
						},
						"power_state": "ON",
						"type": "",
						"account_uuid": "b40be38c-20f3-4332-bfca-aeaff67680b0",
						"boot_config": {
							"boot_device": {
								"type": "",
								"disk_address": {
									"type": "",
									"device_index": 0,
									"adapter_type": "SCSI"
								}
							},
							"type": "",
							"boot_type": "",
							"mac_address": ""
						},
						"disk_list": [{
							"data_source_reference": {
								"kind": "app_package",
								"type": "",
								"name": "Windows2016",
								"uuid": "ea1de22f-bb84-43c7-ab8e-c4d8616ca250"
							},
							"type": "",
							"disk_size_mib": 0,
							"volume_group_reference": null,
							"device_properties": {
								"type": "",
								"disk_address": {
									"type": "",
									"device_index": 0,
									"adapter_type": "SCSI"
								},
								"device_type": "DISK"
							}
						}]
					},
					"availability_zone_reference": null,
					"backup_policy": null,
					"type": "",
					"cluster_reference": null,
					"categories": ""
				},
				"variable_list": []
			}],
			"credential_definition_list": [{
				"username": "1-click-demo\\svc_foundation",
				"description": "",
				"type": "PASSWORD",
				"secret": {
					"attrs": {
						"is_secret_modified": false,
						"secret_reference": {}
					}
				},
				"name": "Service_Account"
			}, {
				"username": "1-click-demo\\administrator",
				"description": "",
				"type": "PASSWORD",
				"secret": {
					"attrs": {
						"is_secret_modified": false,
						"secret_reference": {}
					}
				},
				"name": "administrator"
			}],
			"package_definition_list": [{
				"description": "",
				"action_list": [],
				"type": "DEB",
				"service_local_reference_list": [{
					"kind": "app_service",
					"name": "1CDAppNode"
				}],
				"name": "1ClickDemo",
				"version": "",
				"options": {
					"install_runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_package",
								"name": "1ClickDemo"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [{
								"kind": "app_task",
								"name": "Create Service Account and Prep Logon"
							}, {
								"kind": "app_task",
								"name": "Sleep for Service Account Login"
							}, {
								"kind": "app_task",
								"name": "Install Choco"
							}, {
								"kind": "app_task",
								"name": "Install SQLExpress"
							}, {
								"kind": "app_task",
								"name": "Reboot Post SQL Instance"
							}, {
								"kind": "app_task",
								"name": "Sleep Post Instance"
							}, {
								"kind": "app_task",
								"name": "Install SQL SSMS"
							}, {
								"kind": "app_task",
								"name": "Reboot Post Studio"
							}, {
								"kind": "app_task",
								"name": "Sleep Post Mgt"
							}, {
								"kind": "app_task",
								"name": "Install VMware CLI"
							}, {
								"kind": "app_task",
								"name": "Install Git and Posh SSH"
							}, {
								"kind": "app_task",
								"name": "Install Office 365"
							}, {
								"kind": "app_task",
								"name": "Install DropBox"
							}, {
								"kind": "app_task",
								"name": "Install Chrome"
							}, {
								"kind": "app_task",
								"name": "Pull Git Repo"
							}, {
								"kind": "app_task",
								"name": "Create Working Dirs"
							}, {
								"kind": "app_task",
								"name": "Configure and Start Backend"
							}, {
								"kind": "app_task",
								"name": "Configure and Start Maintenance"
							}, {
								"kind": "app_task",
								"name": "Disable UAC and Trusted Hosts"
							}, {
								"kind": "app_task",
								"name": "Install Updates"
							}, {
								"kind": "app_task",
								"name": "Wait for Updates Install"
							}, {
								"kind": "app_task",
								"name": "IIS and TCP"
							}, {
								"kind": "app_task",
								"name": "Setup SQL Login "
							}, {
								"kind": "app_task",
								"name": "Install CMDLets and Reboot"
							}, {
								"kind": "app_task",
								"name": "End"
							}],
							"name": "628b62fa_dag",
							"state": "ACTIVE",
							"attrs": {
								"edges": [{
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install Choco"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install SQLExpress"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install VMware CLI"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install Git and Posh SSH"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install Git and Posh SSH"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install Office 365"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install Office 365"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install DropBox"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install DropBox"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install Chrome"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install Chrome"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Pull Git Repo"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Pull Git Repo"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Create Working Dirs"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Create Working Dirs"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Configure and Start Backend"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Configure and Start Backend"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Configure and Start Maintenance"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Configure and Start Maintenance"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Disable UAC and Trusted Hosts"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Disable UAC and Trusted Hosts"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install Updates"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Setup SQL Login "
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install CMDLets and Reboot"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install Updates"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Wait for Updates Install"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Wait for Updates Install"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "IIS and TCP"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "IIS and TCP"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Setup SQL Login "
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install CMDLets and Reboot"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "End"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Create Service Account and Prep Logon"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Sleep for Service Account Login"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Sleep for Service Account Login"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install Choco"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Reboot Post SQL Instance"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Sleep Post Instance"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install SQLExpress"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Reboot Post SQL Instance"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Sleep Post Instance"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install SQL SSMS"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Install SQL SSMS"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Reboot Post Studio"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Reboot Post Studio"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Sleep Post Mgt"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Sleep Post Mgt"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Install VMware CLI"
									}
								}],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Create Service Account and Prep Logon",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "Function Set-AutoLogon{\n\n    [CmdletBinding()]\n    Param(\n        \n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script\n                \n    )\n\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    \n    }\n    \n    Process\n    {\n\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            if($AutoLogonCount)\n            {\n                \n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            \n            }\n            else\n            {\n\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n\n            }\n            if($Script)\n            {\n                \n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            \n            }\n            else\n            {\n            \n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            \n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    \n    End\n    {\n        \n        #End\n\n    }\n\n}\n\n$account = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n\n\n$secpass = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"@@{Service_Account.username}@@\"\nset-autologon -DefaultUsername \"@@{Service_Account.username}@@\" -DefaultPassword \"@@{Service_Account.secret}@@\" -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force\nShutdown -r -t 5 -f",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "administrator"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Sleep for Service Account Login",
							"state": "ACTIVE",
							"attrs": {
								"type": "",
								"interval_secs": 60
							},
							"timeout_secs": "0",
							"type": "DELAY",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install Choco",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "try {\n\n  [System.Net.ServicePointManager]::SecurityProtocol = 3072;\n  iex ((New-Object System.Net.WebClient).DownloadString('https:\/\/chocolatey.org\/install.ps1')) \n  SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n  \n} catch {\n\n  [System.Net.ServicePointManager]::SecurityProtocol = 3072;\n  iex ((New-Object System.Net.WebClient).DownloadString('https:\/\/chocolatey.org\/install.ps1')) \n  SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n    \n}",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install SQLExpress",
							"state": "ACTIVE",
							"attrs": {
								"script": "\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n## Install Express\n\n$path = \"C:\\Program Files\\Microsoft SQL Server\\MSSQL13.SQLEXPRESS\\MSSQL\\Binn\\SQLAGENT.EXE\"\n$SQLExists = test-path $path -ea:0\nif (!$SQLExists){\n  write \"SQL Not detected, downloading.\"\n  $url = \"@@{SQLEXPRESSURL}@@\"\n  $filename = $url -split \"\/\" | select -last 1\n  $output = \"c:\\windows\\temp\\$($filename)\"\n  $wc = New-Object net.webclient\n  $wc.Downloadfile($url, $output)\n  write \"SQL Download done.\"\n  $jobname = \"Install_Express\";\n  $action = New-ScheduledTaskAction -Execute \"c:\\windows\\temp\\$($filename)\" -Argument \"\/ENU \/q \/IacceptSQLServerLicenseTerms\"\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n  $task | start-scheduledtask\n\n} else {\n  Write \"SQL is already installed on $($env:hostname)\"\n}\ndo {\n  write \"Waiting for SQL Installer\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"Install_Express\"})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\n\n\nchoco install sql-server-management-studio -Y\nchoco install dotnet-4.6.2 -Y\nchoco install KB2919355 -y\nchoco install KB2919442 -y\n",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Reboot Post SQL Instance",
							"state": "ACTIVE",
							"attrs": {
								"script": "shutdown -r -t  10 -f",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Sleep Post Instance",
							"state": "ACTIVE",
							"attrs": {
								"type": "",
								"interval_secs": 60
							},
							"timeout_secs": "0",
							"type": "DELAY",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install SQL SSMS",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "start-transcript -path c:\\windows\\temp\\mgt.log\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n$jobname = \"Install_SQLMGT\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"choco install sql-server-management-studio -Y --force\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\n\n\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq $jobname})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\nchoco install dotnet-4.6.2 -Y\nchoco install KB2919355 -y\nchoco install KB2919442 -y\n",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Reboot Post Studio",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "Shutdown -r -t 5 -f",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Sleep Post Mgt",
							"state": "ACTIVE",
							"attrs": {
								"type": "",
								"interval_secs": 60
							},
							"timeout_secs": "0",
							"type": "DELAY",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install VMware CLI",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "start-transcript -path c:\\windows\\temp\\pcli.log\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n$jobname = \"Install_PowerCLI\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"choco install vmware-powercli-psmodule --version 11.3.0.13990089 -y --force\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\n\n\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq $jobname})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\ntry {\n  Get-content c:\\windows\\temp\\pcli.log\n} catch {\n  write \"no logging found\"\n}",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install Git and Posh SSH",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -confirm:0\nInstall-Module -Name Posh-SSH -RequiredVersion 2.1 -Force -confirm:0\n\nsleep 60\n\nchoco install git -y\n",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install Office 365",
							"state": "ACTIVE",
							"attrs": {
								"script": "choco install office365proplus -y --ignore-checksums",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install DropBox",
							"state": "ACTIVE",
							"attrs": {
								"script": "choco install dropbox -y",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install Chrome",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "choco install googlechrome -y",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Pull Git Repo",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "rm \"@@{BaseDir}@@\" -force -confirm:0 -recurse -ea:0\nmkdir \"@@{BaseDir}@@\"\ngit clone \"@@{OneCDRepo}@@\" \"@@{BaseDir}@@\"",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Create Working Dirs",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "mkdir \"@@{BaseDir}@@\\Queue\"\nmkdir \"@@{BaseDir}@@\\Queue\\Spawns\"\nmkdir \"@@{BaseDir}@@\\Jobs\"\nmkdir \"@@{BaseDir}@@\\Jobs\\Prod\"\nmkdir \"@@{BaseDir}@@\\Lock\"\nmkdir \"@@{BaseDir}@@\\Daemons\"\nmkdir \"@@{BaseDir}@@\\Jobs\\Dev\"\nmkdir \"@@{BaseDir}@@\\Jobs\\Spawns\"\nmkdir \"@@{BaseDir}@@\\System\\Logging\"\nmkdir \"@@{BaseDir}@@\\System\\Temp\"\nmkdir \"@@{BaseDir}@@\\AutoDownloadURLs\"\nmkdir \"@@{BaseDir}@@\\FrontEnd\\Data\"\nwrite \"done\" | out-file \"c:\\windows\\temp\\downloaded.txt\"",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Configure and Start Backend",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "$jobname = \"BackendProcessor\"\n$script =  \"@@{BaseDir}@@\\Backend-Processsor.ps1\"\n$repeat = (New-TimeSpan -Minutes 3)\n$action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument $script\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger = New-JobTrigger -Once -At (Get-Date).Date -RepeatIndefinitely -RepetitionInterval $repeat\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Configure and Start Maintenance",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "\nwrite \"Downloading Secret Tokens\"\nwrite \"Getting Token 1\"\n$url = \"@@{Token1URL}@@\"\n$filename = $url -split \"\/\" | select -last 1\n$output = \"@@{BaseDir}@@\\$($filename)\"\n$wc = New-Object net.webclient\n$wc.Downloadfile($url, $output)\nwrite \"Token 1 Download Done\"\nwrite \"Getting Token 2\"\n$url = \"@@{Token2URL}@@\"\n$filename = $url -split \"\/\" | select -last 1\n$output = \"@@{BaseDir}@@\\$($filename)\"\n$wc = New-Object net.webclient\n$wc.Downloadfile($url, $output)\nwrite \"Token 2 Download Done\"\n\n\n$jobname = \"Maintenance\"\n$script =  \"@@{BaseDir}@@\\Maintenance.ps1\"\n$repeat = (New-TimeSpan -Minutes 60)\n$action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument $script\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger = New-JobTrigger -Once -At (Get-Date).Date -RepeatIndefinitely -RepetitionInterval $repeat\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Disable UAC and Trusted Hosts",
							"state": "ACTIVE",
							"attrs": {
								"script": "## Moved Up",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install Updates",
							"state": "ACTIVE",
							"attrs": {
								"script": "\n\nInstall-Module -Name PSWindowsUpdate -confirm:0 -Force\nGet-WUinstall -MicrosoftUpdate\nAdd-WUServiceManager -ServiceID \"7971f918-a847-4430-9279-4a52d1efe18d\" -AddServiceFlag 7 -confirm:0 \nGet-WUInstall -AcceptAll -IgnoreReboot\n\nshutdown -r -t 10",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Wait for Updates Install",
							"state": "ACTIVE",
							"attrs": {
								"type": "",
								"interval_secs": 180
							},
							"timeout_secs": "0",
							"type": "DELAY",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "IIS and TCP",
							"state": "ACTIVE",
							"attrs": {
								"exit_status": [],
								"script": "\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n$script = \"C:\\windows\\temp\\IIS.ps1\"\nwrite 'start-transcript c:\\windows\\temp\\iis.log' | out-file $script\nwrite 'Get-NetAdapter | Get-NetAdapterBinding | Disable-NetAdapterBinding -ComponentID ms_tcpip6 -PassThru -ea:0' | out-file $script -append\nwrite 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Performance' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASP' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Webserver installed, setting up config\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Import-Module WebAdministration ' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Redirecting Existing site to new dir.\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Set-ItemProperty \"IIS:\\sites\\Default Web Site\\\" -name physicalpath -value \"@@{BaseDir}@@\\FrontEnd\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Changing APP Pool to Local System\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite '$appPool = Get-Item \"IIS:\\AppPools\\DefaultAppPool\" ' | out-file $script -append\nwrite '$appPool.processModel.identityType = \"LocalSystem\"' | out-file $script -append\nwrite '$appPool.enable32BitAppOnWin64 = 1' | out-file $script -append\nwrite '$appPool | Set-Item' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Adding secondary site\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite '$APIsite = $site = new-WebSite -name \"API\" -PhysicalPath \"@@{BaseDir}@@\\API\" -ApplicationPool \"DefaultAppPool\" -force -Port 81 -hostheader \"API\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Changing Default Document for existing site.\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite '$filter = \"system.webserver\/defaultdocument\/files\"' | out-file $script -append\nwrite '$site = \"IIS:\\sites\\Default Web Site\"' | out-file $script -append\nwrite '$file = \"default.html\"' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'if ((Get-WebConfiguration $filter\/* \"$site\" | where {$_.value -eq $file}).length -eq 1){' | out-file $script -append\nwrite '   Remove-WebconfigurationProperty $filter \"$site\" -name collection -AtElement @{value=$file}' | out-file $script -append\nwrite '}' | out-file $script -append\nwrite '$file = \"default.html\"' | out-file $script -append\nwrite 'Add-WebConfiguration $filter \"$site\" -atIndex 0 -Value @{value=$file}' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'write \"Creating Ps1x handlers\"' | out-file $script -append\nwrite 'New-WebHandler -Name \"*.ps1x_*\" -Path \"*.ps1x\" -Type \"nsoftware.PSHandler\" -PSPath \"IIS:\\sites\\Default Web Site\\\" -verb \"*\"' | out-file $script -append\nwrite 'New-WebHandler -Name \"*.ps1x_*\" -Path \"*.ps1x\" -Type \"nsoftware.PSHandler\" -PSPath \"IIS:\\sites\\API\\\" -verb \"*\"' | out-file $script -append\n$jobname = \"Setup IIS\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n} Until ($state.state -eq 3)\ntry {\n  get-content 'c:\\windows\\temp\\iis.log'\n} catch {\n  $task | unregister-scheduledtask -confirm:0\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n  $task | start-scheduledtask\n}\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n} Until ($state.state -eq 3)",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Setup SQL Login ",
							"state": "ACTIVE",
							"attrs": {
								"script": "$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n## Setup SQL Rights\n\n$path = \"C:\\Program Files\\Microsoft SQL Server\\MSSQL13.SQLEXPRESS\\MSSQL\\Binn\\SQLAGENT.EXE\"\n$SQLExists = test-path $path -ea:0\nif ($SQLExists){\n\n  $script = \"c:\\windows\\temp\\SQLRights.ps1\"\n  write 'if ($env:computername -match \"dev\"){' | out-file $script\n  write '' | out-file $script -append\n  write '  $global:SQLInstance           = \"1-click-dev\\SQLEXPRESS\"' | out-file $script -append\n  write '  $global:SQLInstLog            = \"1-click-dev\\SQLEXPRESS\"' | out-file $script -append\n  write '} else {' | out-file $script -append\n  write '  $global:SQLInstance           = \"1-click-demo\\SQLEXPRESS\"' | out-file $script -append\n  write '  $global:SQLInstLog            = \"1-click-demo\\SQLEXPRESS\"' | out-file $script -append\n  write '}' | out-file $script -append\n  write 'start-transcript c:\\windows\\temp\\sqlrights.log' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Database_1CD.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_DataGen.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_DataStats.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_DataUser.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_DataValidation.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_DataVar.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_Logging.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_Queue.sql\"' | out-file $script -append\n  write 'invoke-sqlcmd -ServerInstance $SQLInstance -inputFile \"@@{BaseDir}@@\\SQLScripts\\Table_QueueInfo.sql\"' | out-file $script -append\n  write '$cn2= new-object System.Data.SqlClient.SqlConnection \"server=$SQLInstance;database=master;Integrated Security=sspi\"' | out-file $script -append\n  write '$cn2.Open()' | out-file $script -append\n  write '$sql2 = $cn2.CreateCommand()' | out-file $script -append\n  write '$sql2.CommandText = @\"' | out-file $script -append\n  write '' | out-file $script -append\n  write \"EXEC master..sp_addsrvrolemember @loginame = N'NT AUTHORITY\\SYSTEM', @rolename = N'sysadmin'\" | out-file $script -append\n  write '' | out-file $script -append\n  write '\"@' | out-file $script -append\n  write '      $rdr2 = $sql2.ExecuteReader()' | out-file $script -append\n  write '      $cn2.Close()' | out-file $script -append\n  write '' | out-file $script -append\n  write '$cn2= new-object System.Data.SqlClient.SqlConnection \"server=$SQLInstance;database=1clickdemo;Integrated Security=sspi\"' | out-file $script -append\n  write '$cn2.Open()' | out-file $script -append\n  write '$sql2 = $cn2.CreateCommand()' | out-file $script -append\n  write '$sql2.CommandText = @\"' | out-file $script -append\n  write '' | out-file $script -append\n  write \"EXEC master..sp_addsrvrolemember @loginame = N'NT AUTHORITY\\SYSTEM', @rolename = N'sysadmin'\" | out-file $script -append\n  write '' | out-file $script -append\n  write '\"@' | out-file $script -append\n  write '      $rdr2 = $sql2.ExecuteReader()' | out-file $script -append\n  write '      $cn2.Close()' | out-file $script -append\n\n    $jobname = \"Setup SQL Rights\";\n    $action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n    $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n    $task | start-scheduledtask\n  \n  } else {\n    Write \"SQL is not installed on $($env:hostname)\"\n  }\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "Install CMDLets and Reboot",
							"state": "ACTIVE",
							"attrs": {
								"script": "start-transcript -path c:\\windows\\temp\\cmdlets.log\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n$jobname = \"Install_CMDLets\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"c:\\windows\\system32\\msiexec.exe \/i 'C:\\1-CLick-Demo\\Binaries\\Installers\\NutanixCmdlets.msi' ALLUSERS=1 \/qn\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\n\n\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq $jobname})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\ntry {\n  Get-content c:\\windows\\temp\\cmdlets.log\n} catch {\n  write \"no logging found\"\n}\nsleep 60\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n$jobname = \"Install_CMDLets\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"@@{BaseDir}@@\\Binaries\\Installers\\PreReqCheckAndImport.ps1\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;\n$task | start-scheduledtask\nsleep 60\nstop-transcript\n\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq $jobname})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\ntry {\n  Get-content c:\\windows\\temp\\cmdlets.log\n} catch {\n  write \"no logging found\"\n}",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "End",
							"state": "ACTIVE",
							"attrs": {
								"type": "",
								"interval_secs": 60
							},
							"timeout_secs": "0",
							"type": "DELAY",
							"variable_list": []
						}],
						"description": "",
						"name": "67e96927_runbook",
						"state": "ACTIVE",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "628b62fa_dag"
						},
						"message_list": [],
						"variable_list": [{
							"regex": {
								"should_validate": true,
								"value": ""
							},
							"val_type": "STRING",
							"is_mandatory": false,
							"description": "",
							"data_type": "BASE",
							"type": "LOCAL",
							"name": "SQLEXPRESSURL",
							"value": "https:\/\/download.microsoft.com\/download\/3\/7\/6\/3767D272-76A1-4F31-8849-260BD37924E4\/SQLServer2016-SSEI-Expr.exe",
							"label": "",
							"state": "ACTIVE",
							"attrs": {
								"type": ""
							},
							"editables": {},
							"is_hidden": false,
							"message_list": [],
							"options": {
								"type": "PREDEFINED",
								"choices": []
							},
							"uuid": "8f744ef5-829d-4d37-b4bc-234881962b76"
						}, {
							"regex": {
								"should_validate": true,
								"value": ""
							},
							"val_type": "STRING",
							"is_mandatory": false,
							"description": "",
							"data_type": "BASE",
							"type": "LOCAL",
							"name": "SQLSSMSURL",
							"value": "https:\/\/dl.dropboxusercontent.com\/s\/x1kd9wux70twee7\/SSMS-Setup-ENU.exe",
							"label": "",
							"state": "ACTIVE",
							"attrs": {
								"type": ""
							},
							"editables": {},
							"is_hidden": false,
							"message_list": [],
							"options": {
								"type": "PREDEFINED",
								"choices": []
							},
							"uuid": "08ca2645-bc90-495f-a514-339ccd18ecfd"
						}, {
							"regex": {
								"should_validate": true,
								"value": ""
							},
							"val_type": "STRING",
							"is_mandatory": false,
							"description": "",
							"data_type": "BASE",
							"type": "LOCAL",
							"name": "BaseDir",
							"value": "c:\\1-CLick-Demo",
							"label": "",
							"state": "ACTIVE",
							"attrs": {
								"type": ""
							},
							"editables": {},
							"is_hidden": false,
							"message_list": [],
							"options": {
								"type": "PREDEFINED",
								"choices": []
							},
							"uuid": "1b4368e4-4ff5-4ce8-b699-03afb49aabae"
						}, {
							"regex": {
								"should_validate": true,
								"value": ""
							},
							"val_type": "STRING",
							"is_mandatory": false,
							"description": "",
							"data_type": "BASE",
							"type": "LOCAL",
							"name": "OneCDRepo",
							"value": "https:\/\/github.com\/MMouse-23\/1-click-demo\/",
							"label": "",
							"state": "ACTIVE",
							"attrs": {
								"type": ""
							},
							"editables": {},
							"is_hidden": false,
							"message_list": [],
							"options": {
								"type": "PREDEFINED",
								"choices": []
							},
							"uuid": "8537d135-7266-436e-9199-b50cf00dcb38"
						}]
					},
					"type": "",
					"uninstall_runbook": {
						"task_definition_list": [{
							"target_any_local_reference": {
								"kind": "app_package",
								"name": "1ClickDemo"
							},
							"retries": "0",
							"description": "",
							"message_list": [],
							"child_tasks_local_reference_list": [],
							"name": "1ede1930_dag",
							"state": "ACTIVE",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}],
						"description": "",
						"name": "f96bc0f5_runbook",
						"state": "ACTIVE",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "1ede1930_dag"
						},
						"message_list": [],
						"variable_list": []
					}
				},
				"variable_list": []
			}, {
				"description": "",
				"action_list": [],
				"type": "SUBSTRATE_IMAGE",
				"service_local_reference_list": [],
				"name": "Windows2016",
				"version": "",
				"options": {
					"type": "",
					"name": "Windows2016",
					"resources": {
						"image_type": "DISK_IMAGE",
						"checksum": {
							"checksum_algorithm": "",
							"type": "",
							"checksum_value": ""
						},
						"source_uri": "https:\/\/dl.dropboxusercontent.com\/s\/oxhzh5jfpav89r5\/Windows2016.qcow2",
						"version": {
							"product_version": "2016",
							"type": "",
							"product_name": "Windows2016"
						},
						"architecture": "X86_64",
						"type": ""
					},
					"description": ""
				},
				"variable_list": []
			}],
			"app_profile_list": [{
				"deployment_create_list": [{
					"type": "GREENFIELD",
					"action_list": [],
					"name": "306b8456_deployment",
					"min_replicas": "1",
					"default_replicas": "1",
					"depends_on_list": [],
					"published_service_local_reference_list": [],
					"max_replicas": "1",
					"package_local_reference_list": [{
						"kind": "app_package",
						"name": "1ClickDemo"
					}],
					"substrate_local_reference": {
						"kind": "app_substrate",
						"name": "1CD App Node"
					},
					"variable_list": [],
					"description": ""
				}],
				"description": "",
				"action_list": [{
					"description": "Downloads and replaces GitHub content",
					"type": "user",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [{
								"kind": "app_task",
								"name": "Clean and Reload"
							}],
							"name": "9ea85fe2_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Clean and Reload",
							"attrs": {
								"exit_status": [],
								"script": "try {\n\trm \"c:\\tempInstall\" -force -confirm:0 -recurse -ea:0\n\tmkdir \"c:\\tempInstall\"\n    git clone \"@@{OneCDRepo}@@\" \"c:\\tempInstall\"\n    & \"c:\\tempInstall\\InstallerScripts\\PreInstall.ps1\"\n} catch {\n\tWrite \"Pre Install Does not exist or ran into an error\"\n}\n\ntry {\n\n  rm \"@@{BaseDir}@@\" -force -confirm:0 -recurse\n} catch {\n  sleep 10\n  rm \"@@{BaseDir}@@\" -force -confirm:0 -recurse -ea:0\n}\n\nmkdir \"@@{BaseDir}@@\"\ngit clone \"@@{OneCDRepo}@@\" \"@@{BaseDir}@@\"\n\ntry {\n    & \"@@{BaseDir}@@\\InstallerScripts\\PostInstall.ps1\"\n} catch {\n\tWrite \"Pre Install Does not exist or ran into an error\"\n}\n\n",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}],
						"description": "",
						"name": "948a4ab3_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "9ea85fe2_dag"
						},
						"variable_list": []
					},
					"name": "Pull Git Repo DO NOT USE"
				}, {
					"description": "",
					"type": "user",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [{
								"kind": "app_task",
								"name": "Set Formsbased Login"
							}],
							"name": "22da73f5_dag",
							"attrs": {
								"edges": [],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Set Formsbased Login",
							"attrs": {
								"script": "write \"Not implemented yet\"\nSet-WebConfiguration system.web\/authentication 'IIS:\\sites\\Default Web Site' -value @{mode='Forms'}\nSet-WebConfigurationProperty -pspath 'MACHINE\/WEBROOT\/APPHOST\/Default Web Site'  -filter \"system.web\/authentication\/forms\" -name \"LoginURL\" -value \"Logon.aspx\"\n\n### After this copy the web config file or see whats missing. \nwrite \"Join the machine to the domain, and use the web.conf file from the conf dir to setup forms based auth.\"\nwrite \"Setup forms based auth before you replace the conf, beware of IIS corruption if the config is not changed on both ends\"\nwrite \"Without domain join the machine \/ and its sites web\/API run in single user mode, no authentication at all\"\nwrite \"once joined it will work in multi user mode.\" \nwrite \"best is to create a local account for the api\"\n",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}],
						"description": "",
						"name": "3d8ae4db_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "22da73f5_dag"
						},
						"variable_list": []
					},
					"name": "Configure FormBased Logon DO NOT USE"
				}, {
					"description": "Will stop processor from starting threads or executing any automated tasks.",
					"type": "user",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [{
								"kind": "app_task",
								"name": "Stop Backend Processor"
							}, {
								"kind": "app_task",
								"name": "Disable BackEnd Processor"
							}, {
								"kind": "app_task",
								"name": "Stop Maintenance Task"
							}, {
								"kind": "app_task",
								"name": "Disable Maintenance"
							}, {
								"kind": "app_task",
								"name": "Stop IIS"
							}],
							"name": "b441bd9e_dag",
							"attrs": {
								"edges": [{
									"from_task_reference": {
										"kind": "app_task",
										"name": "Stop Backend Processor"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Disable BackEnd Processor"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Disable BackEnd Processor"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Stop Maintenance Task"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Stop Maintenance Task"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Disable Maintenance"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Disable Maintenance"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Stop IIS"
									}
								}],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Stop Backend Processor",
							"attrs": {
								"exit_status": [],
								"script": "get-scheduledtask \"BackEndProcessor\" | Stop-ScheduledTask",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Disable BackEnd Processor",
							"attrs": {
								"exit_status": [],
								"script": "get-scheduledtask \"BackEndProcessor\" | Disable-ScheduledTask",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Stop Maintenance Task",
							"attrs": {
								"exit_status": [],
								"script": "get-scheduledtask \"Maintenance\" | Stop-ScheduledTask",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Disable Maintenance",
							"attrs": {
								"exit_status": [],
								"script": "get-scheduledtask \"Maintenance\" | Disable-ScheduledTask",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Stop IIS",
							"attrs": {
								"exit_status": [],
								"script": "stop-service W3SVC -force -confirm:0",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}],
						"description": "",
						"name": "84d50896_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "b441bd9e_dag"
						},
						"variable_list": []
					},
					"name": "Stop 1CD Tasks"
				}, {
					"description": "",
					"type": "user",
					"critical": false,
					"runbook": {
						"task_definition_list": [{
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [{
								"kind": "app_task",
								"name": "Enable Backend Processor"
							}, {
								"kind": "app_task",
								"name": "Start Backend Processor"
							}, {
								"kind": "app_task",
								"name": "Enable Maintenance"
							}, {
								"kind": "app_task",
								"name": "Start Maintenance Task"
							}, {
								"kind": "app_task",
								"name": "Start IIS"
							}],
							"name": "3374b96d_dag",
							"attrs": {
								"edges": [{
									"from_task_reference": {
										"kind": "app_task",
										"name": "Enable Backend Processor"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Start Backend Processor"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Start Backend Processor"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Enable Maintenance"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Enable Maintenance"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Start Maintenance Task"
									}
								}, {
									"from_task_reference": {
										"kind": "app_task",
										"name": "Start Maintenance Task"
									},
									"edge_type": "user_defined",
									"type": "",
									"to_task_reference": {
										"kind": "app_task",
										"name": "Start IIS"
									}
								}],
								"type": ""
							},
							"timeout_secs": "0",
							"type": "DAG",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Enable Backend Processor",
							"attrs": {
								"script": "get-scheduledtask \"BackEndProcessor\" | Enable-ScheduledTask",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Start Backend Processor",
							"attrs": {
								"script": "get-scheduledtask \"BackEndProcessor\" | Start-ScheduledTask",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Enable Maintenance",
							"attrs": {
								"exit_status": [],
								"script": "get-scheduledtask \"Maintenance\" | Enable-ScheduledTask",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Start Maintenance Task",
							"attrs": {
								"script": "get-scheduledtask \"Maintenance\" | Start-ScheduledTask",
								"type": "",
								"command_line_args": "",
								"exit_status": [],
								"script_type": "npsscript"
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}, {
							"target_any_local_reference": {
								"kind": "app_service",
								"name": "1CDAppNode"
							},
							"retries": "0",
							"description": "",
							"child_tasks_local_reference_list": [],
							"name": "Start IIS",
							"attrs": {
								"exit_status": [],
								"script": "start-service W3SVC -confirm:0",
								"script_type": "npsscript",
								"type": "",
								"command_line_args": "",
								"login_credential_local_reference": {
									"kind": "app_credential",
									"name": "Service_Account"
								}
							},
							"timeout_secs": "0",
							"type": "EXEC",
							"variable_list": []
						}],
						"description": "",
						"name": "489d04a5_runbook",
						"main_task_local_reference": {
							"kind": "app_task",
							"name": "3374b96d_dag"
						},
						"variable_list": []
					},
					"name": "Start 1CD Tasks"
				}],
				"name": "Default",
				"variable_list": [{
					"val_type": "STRING",
					"is_mandatory": false,
					"description": "",
					"data_type": "BASE",
					"type": "LOCAL",
					"name": "One_CD_IP",
					"value": "",
					"label": "",
					"attrs": {
						"type": ""
					},
					"is_hidden": false,
					"options": {
						"type": "PREDEFINED",
						"choices": []
					}
				}]
			}],
			"published_service_definition_list": [],
			"default_credential_local_reference": {
				"kind": "app_credential",
				"name": "Service_Account"
			},
			"type": "USER"
		},
		"name": "1_Click_Demo"
	},
	"api_version": "3.0",
	"metadata": {
		"last_update_time": "1580924120321791",
		"kind": "blueprint",
		"spec_version": 3,
		"creation_time": "1580903791079711",
		"name": "1_Click_Demo"
	}
}