{
	status {},
	contains_secrets false,
	product_version 2.9.7,
	spec {
		description ,
		resources {
			client_attrs {
				b2b237cc_deployment {
					y -2234.6750095957,
					x -397.0992961705
				},
				None {
					y -2286.1069335938,
					x -48.0192565918
				},
				658658dc_deployment {
					y -2233.3564115716,
					x -73.9495420205
				},
				828ac615_deployment {
					y -2820.7244043595,
					x -372.7730835141
				},
				9827a25e_deployment {
					y -2818.1464577686,
					x 160.27984466
				},
				d54122c2_deployment {
					y -2816.058730609,
					x 657.1849367484
				},
				a7eb873b_deployment {
					y -2244.4571237867,
					x 660.4341665645
				},
				343f5662_deployment {
					y -2236.7370780222,
					x 321.6879103295
				},
				00a6305e_deployment {
					y -2537.0229929669,
					x -618.6628527606
				},
				da2599c7_deployment {
					y -2522.9479567553,
					x 932.3952513518
				}
			},
			service_definition_list [{
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 391c3336_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3200c0d1_runbook,
						main_task_local_reference {
							kind app_task,
							name 391c3336_dag
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name cba0c298_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1d156426_runbook,
						main_task_local_reference {
							kind app_task,
							name cba0c298_dag
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ea0f09c8_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name cebace0e_runbook,
						main_task_local_reference {
							kind app_task,
							name ea0f09c8_dag
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name c043d112_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8cd9dedc_runbook,
						main_task_local_reference {
							kind app_task,
							name c043d112_dag
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 81392976_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 5963e13d_runbook,
						main_task_local_reference {
							kind app_task,
							name 81392976_dag
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name MGT,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name MachineType,
					value MGT,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name ServerOU,
					value TBD,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name ServerOULate,
					value TBD,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name ChocoServer,
					value TBD,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 391c3336_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3200c0d1_runbook_cloned_1,
						main_task_local_reference {
							kind app_task,
							name 391c3336_dag_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name cba0c298_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1d156426_runbook_cloned_1,
						main_task_local_reference {
							kind app_task,
							name cba0c298_dag_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ea0f09c8_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name cebace0e_runbook_cloned_1,
						main_task_local_reference {
							kind app_task,
							name ea0f09c8_dag_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name c043d112_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8cd9dedc_runbook_cloned_1,
						main_task_local_reference {
							kind app_task,
							name c043d112_dag_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 81392976_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 5963e13d_runbook_cloned_1,
						main_task_local_reference {
							kind app_task,
							name 81392976_dag_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name APP,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name MachineType,
					value APP,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 391c3336_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3200c0d1_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 391c3336_dag_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name cba0c298_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1d156426_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name cba0c298_dag_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ea0f09c8_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name cebace0e_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name ea0f09c8_dag_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name c043d112_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8cd9dedc_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name c043d112_dag_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 81392976_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 5963e13d_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 81392976_dag_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name SQL,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name MachineType,
					value SQL,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type EXEC_LOCAL,
					name InstanceName,
					value ,
					label ,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type EXEC,
						attrs {
							script print 'hello',
							type EXEC,
							command_line_args ,
							exit_status [],
							script_type static
						}
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 391c3336_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3200c0d1_runbook_cloned_2,
						main_task_local_reference {
							kind app_task,
							name 391c3336_dag_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name cba0c298_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1d156426_runbook_cloned_2,
						main_task_local_reference {
							kind app_task,
							name cba0c298_dag_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ea0f09c8_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name cebace0e_runbook_cloned_2,
						main_task_local_reference {
							kind app_task,
							name ea0f09c8_dag_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name c043d112_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8cd9dedc_runbook_cloned_2,
						main_task_local_reference {
							kind app_task,
							name c043d112_dag_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 81392976_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 5963e13d_runbook_cloned_2,
						main_task_local_reference {
							kind app_task,
							name 81392976_dag_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name XAS,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name MachineType,
					value XAS,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name XBS0IP,
					value TBD,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 391c3336_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3200c0d1_runbook_cloned_2_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 391c3336_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name cba0c298_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1d156426_runbook_cloned_2_cloned_0,
						main_task_local_reference {
							kind app_task,
							name cba0c298_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ea0f09c8_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name cebace0e_runbook_cloned_2_cloned_0,
						main_task_local_reference {
							kind app_task,
							name ea0f09c8_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name c043d112_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8cd9dedc_runbook_cloned_2_cloned_0,
						main_task_local_reference {
							kind app_task,
							name c043d112_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 81392976_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 5963e13d_runbook_cloned_2_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 81392976_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name XBS,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name MachineType,
					value XBS,
					label ,
					attrs {
						type 
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					regex {
						should_validate false,
						value ^.$
					},
					val_type STRING,
					is_mandatory false,
					description ,
					data_type LIST,
					type LOCAL,
					name BrokerName,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 4a6f4b21_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 59813977_runbook,
						main_task_local_reference {
							kind app_task,
							name 4a6f4b21_dag
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 8946a3b7_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 14a744d0_runbook,
						main_task_local_reference {
							kind app_task,
							name 8946a3b7_dag
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 694018db_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 8ae46186_runbook,
						main_task_local_reference {
							kind app_task,
							name 694018db_dag
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name ba15d77c_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 83e429ef_runbook,
						main_task_local_reference {
							kind app_task,
							name ba15d77c_dag
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 60d1c5c9_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 73591b74_runbook,
						main_task_local_reference {
							kind app_task,
							name 60d1c5c9_dag
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name ConfigXBS,
				port_list [],
				tier ,
				variable_list [],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 7133577d_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 0ff172e9_runbook,
						main_task_local_reference {
							kind app_task,
							name 7133577d_dag
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 5ab20368_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 049e423f_runbook,
						main_task_local_reference {
							kind app_task,
							name 5ab20368_dag
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name e027f177_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 41477520_runbook,
						main_task_local_reference {
							kind app_task,
							name e027f177_dag
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 82d78136_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name bcfdd589_runbook,
						main_task_local_reference {
							kind app_task,
							name 82d78136_dag
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 79c5a20f_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 7ea7c839_runbook,
						main_task_local_reference {
							kind app_task,
							name 79c5a20f_dag
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name ConfigMGT,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.,
					data_type BASE,
					type LOCAL,
					name ERAIP,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 7133577d_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 0ff172e9_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 7133577d_dag_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 5ab20368_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 049e423f_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 5ab20368_dag_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name e027f177_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 41477520_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name e027f177_dag_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 82d78136_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name bcfdd589_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 82d78136_dag_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 79c5a20f_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 7ea7c839_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 79c5a20f_dag_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name ConfigXAS,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.,
					data_type BASE,
					type LOCAL,
					name Dummy,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name SnapshotName,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}, {
				singleton false,
				action_list [{
					description System action for creating an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 7133577d_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 0ff172e9_runbook_cloned_0_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 7133577d_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_create
				}, {
					description System action for deleting an application. Deletes created VMs as well,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 5ab20368_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 049e423f_runbook_cloned_0_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 5ab20368_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_delete
				}, {
					description System action for starting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name e027f177_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 41477520_runbook_cloned_0_cloned_0,
						main_task_local_reference {
							kind app_task,
							name e027f177_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_start
				}, {
					description System action for stopping an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 82d78136_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name bcfdd589_runbook_cloned_0_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 82d78136_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_stop
				}, {
					description System action for restarting an application,
					type system,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 79c5a20f_dag_cloned_1_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 7ea7c839_runbook_cloned_0_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 79c5a20f_dag_cloned_1_cloned_1
						},
						variable_list []
					},
					name action_restart
				}],
				depends_on_list [],
				name ConfigSQL1,
				port_list [],
				tier ,
				variable_list [{
					val_type STRING,
					is_mandatory false,
					description This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.,
					data_type BASE,
					type LOCAL,
					name Dummy,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name SnapshotName,
					value TBD,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}],
				description 
			}],
			substrate_definition_list [{
				description ,
				action_list [{
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Mgt Box
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 5fb6bc48_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 25b9104d_runbook,
						main_task_local_reference {
							kind app_task,
							name 5fb6bc48_dag
						},
						variable_list []
					},
					name pre_action_create
				}, {
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Mgt Box
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 2926b0f3_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 81c72a0b_runbook,
						main_task_local_reference {
							kind app_task,
							name 2926b0f3_dag
						},
						variable_list []
					},
					name post_action_delete
				}],
				type AHV_VM,
				name Mgt Box,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol ,
					connection_port 5985,
					address @@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@,
					delay_secs 140,
					disable_readiness_probe false,
					login_credential_local_reference {
						kind app_credential,
						name administrator
					}
				},
				editables {
					create_spec {
						resources {
							nic_list {},
							num_vcpus_per_socket true,
							num_sockets true,
							memory_size_mib true,
							serial_port_list {}
						}
					}
				},
				os_type Windows,
				create_spec {
					name @@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-MGT@@{calm_array_index}@@,
					resources {
						nic_list [{
							nic_type NORMAL_NIC,
							ip_endpoint_list [],
							network_function_chain_reference null,
							network_function_nic_type INGRESS,
							mac_address ,
							subnet_reference {
								kind subnet,
								type ,
								name ,
								uuid be695f07-5852-40d5-8631-039b0c8c8da2
							},
							type 
						}],
						serial_port_list [],
						guest_tools null,
						num_vcpus_per_socket 1,
						num_sockets 2,
						gpu_list [],
						memory_size_mib 4096,
						parent_reference null,
						hardware_clock_timezone ,
						guest_customization {
							cloud_init null,
							type ,
							sysprep {
								is_domain false,
								install_type PREPARED,
								domain_credential_reference null,
								domain ,
								dns_ip ,
								dns_search_path ,
								unattend_xml xml version=1.0 encoding=utf-8nunattend xmlns=urnschemas-microsoft-comunattendn    settings pass=oobeSystemn        component name=Microsoft-Windows-International-Core processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            InputLocale041300020409InputLocalen            SystemLocaleen-USSystemLocalen            UILanguageFallbacken-USUILanguageFallbackn            UserLocalenl-NLUserLocalen        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            AutoLogonn                EnabledtrueEnabledn                LogonCount9999999LogonCountn                UsernameAdministratorUsernamen                Passwordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                Passwordn            AutoLogonn            OOBEn                HideEULAPagetrueHideEULAPagen                HideWirelessSetupInOOBEtrueHideWirelessSetupInOOBEn                NetworkLocationHomeNetworkLocationn                ProtectYourPC2ProtectYourPCn            OOBEn            UserAccountsn                AdministratorPasswordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                AdministratorPasswordn            UserAccountsn            FirstLogonCommandsn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -qCommandLinen                    DescriptionWin RM quickconfig -qDescriptionn                    Order20Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -transporthttpCommandLinen                    DescriptionWin RM quickconfig -transporthttpDescriptionn                    Order21Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfig @{MaxTimeoutms=1800000}CommandLinen                    DescriptionWin RM MaxTimoutmsDescriptionn                    Order22Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigwinrs @{MaxMemoryPerShellMB=2048}CommandLinen                    DescriptionWin RM MaxMemoryPerShellMBDescriptionn                    Order23Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigservice @{AllowUnencrypted=true}CommandLinen                    DescriptionWin RM AllowUnencryptedDescriptionn                    Order24Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigserviceauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order25Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigclientauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order26Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfiglistenerAddress=+Transport=HTTP @{Port=5985} CommandLinen                    DescriptionWin RM listener AddressPortDescriptionn                    Order27Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=remote administration new enable=yes CommandLinen                    DescriptionWin RM adv firewall enableDescriptionn                    Order29Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net stop winrm CommandLinen                    DescriptionStop Win RM Service Descriptionn                    Order28Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net start winrm CommandLinen                    DescriptionStart Win RM ServiceDescriptionn                    Order32Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinepowershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;CommandLinen                    DescriptionSet PowerShell ExecutionPolicyDescriptionn                    Order1Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order2Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-PSRemoting -Force&quot;CommandLinen                    DescriptionEnable PowerShell RemotingDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order61Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-NetFirewallRule -DisplayGroup Remote Desktop&quot;CommandLinen                    DescriptionRule RDP FilewallDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order62Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name UserAuthentication -Value 1&quot;CommandLinen                    DescriptionEnable RDP2016Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order63Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal Server' -Name fDenyTSConnections -Value 0&quot;CommandLinen                    DescriptionEnable RDP2016p2Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order5Ordern                    RequiresUserInputtrueRequiresUserInputn                    DescriptionRDP adv firewall enableDescriptionn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes CommandLinen                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order31Ordern                    CommandLinecmd.exe c sc config winrm start= autoCommandLinen                    RequiresUserInputtrueRequiresUserInputn                    DescriptionNo-Delay Auto start WinRM on bootDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order30Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinecmd.exe c netsh advfirewall set allprofiles state offCommandLinen                    DescriptionDisable Windows FirewallDescriptionn                SynchronousCommandn            FirstLogonCommandsnShowWindowsLivefalseShowWindowsLiven        componentn    settingsn    settings pass=specializen        component name=Microsoft-Windows-Deployment processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            RunSynchronousn                RunSynchronousCommand wcmaction=addn                    Order1Ordern                    Pathnet user administrator activeYesPathn                    WillRebootNeverWillRebootn                RunSynchronousCommandn            RunSynchronousn        componentn        component name=Microsoft-Windows-Security-SPP-UX processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SkipAutoActivationtrueSkipAutoActivationn        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            ComputerName@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-MGT@@{calm_array_index}@@ComputerNamen        componentn    settingsn    settings pass=windowsPEn        component name=Microsoft-Windows-International-Core-WinPE processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SetupUILanguagen            UILanguageen-US UILanguagen            SetupUILanguagen            InputLocaleen-US InputLocalen            SystemLocaleen-US SystemLocalen            UILanguageen-US UILanguagen            UILanguageFallbacken-US UILanguageFallbackn            UserLocaleen-US UserLocalen        componentn    settingsnunattend,
								type 
							}
						},
						power_state ON,
						type ,
						account_uuid 86397346-1c41-4560-a47f-591ec87c3cf8,
						boot_config {
							boot_device {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								}
							},
							type ,
							boot_type ,
							mac_address 
						},
						disk_list [{
							data_source_reference {
								kind app_package,
								type ,
								name Windows 2019 STD,
								uuid 3330b49e-54cf-467a-b2f4-496fd12e3bce
							},
							type ,
							disk_size_mib 0,
							volume_group_reference null,
							device_properties {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								},
								device_type DISK
							}
						}]
					},
					availability_zone_reference null,
					backup_policy null,
					type ,
					cluster_reference null,
					categories 
				},
				variable_list []
			}, {
				description ,
				action_list [{
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Hix App Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name e8bb7f3b_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 2e7ebfca_runbook,
						main_task_local_reference {
							kind app_task,
							name e8bb7f3b_dag
						},
						variable_list []
					},
					name pre_action_create
				}, {
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Hix App Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name da267928_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 1841b533_runbook,
						main_task_local_reference {
							kind app_task,
							name da267928_dag
						},
						variable_list []
					},
					name post_action_delete
				}],
				type AHV_VM,
				name Hix App Servers,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol ,
					connection_port 5985,
					address @@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@,
					delay_secs 140,
					disable_readiness_probe false,
					login_credential_local_reference {
						kind app_credential,
						name administrator
					}
				},
				editables {
					create_spec {
						resources {
							nic_list {},
							num_vcpus_per_socket true,
							num_sockets true,
							memory_size_mib true,
							serial_port_list {}
						}
					}
				},
				os_type Windows,
				create_spec {
					name @@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-APP@@{calm_array_index}@@,
					resources {
						nic_list [{
							nic_type NORMAL_NIC,
							ip_endpoint_list [],
							network_function_chain_reference null,
							network_function_nic_type INGRESS,
							mac_address ,
							subnet_reference {
								kind subnet,
								type ,
								name ,
								uuid be695f07-5852-40d5-8631-039b0c8c8da2
							},
							type 
						}],
						serial_port_list [],
						guest_tools null,
						num_vcpus_per_socket 2,
						num_sockets 4,
						gpu_list [],
						memory_size_mib 8192,
						parent_reference null,
						hardware_clock_timezone ,
						guest_customization {
							cloud_init null,
							type ,
							sysprep {
								is_domain false,
								install_type PREPARED,
								domain_credential_reference null,
								domain ,
								dns_ip ,
								dns_search_path ,
								unattend_xml xml version=1.0 encoding=utf-8nunattend xmlns=urnschemas-microsoft-comunattendn    settings pass=oobeSystemn        component name=Microsoft-Windows-International-Core processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            InputLocale041300020409InputLocalen            SystemLocaleen-USSystemLocalen            UILanguageFallbacken-USUILanguageFallbackn            UserLocalenl-NLUserLocalen        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            AutoLogonn                EnabledtrueEnabledn                LogonCount9999999LogonCountn                UsernameAdministratorUsernamen                Passwordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                Passwordn            AutoLogonn            OOBEn                HideEULAPagetrueHideEULAPagen                HideWirelessSetupInOOBEtrueHideWirelessSetupInOOBEn                NetworkLocationHomeNetworkLocationn                ProtectYourPC2ProtectYourPCn            OOBEn            UserAccountsn                AdministratorPasswordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                AdministratorPasswordn            UserAccountsn            FirstLogonCommandsn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -qCommandLinen                    DescriptionWin RM quickconfig -qDescriptionn                    Order20Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -transporthttpCommandLinen                    DescriptionWin RM quickconfig -transporthttpDescriptionn                    Order21Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfig @{MaxTimeoutms=1800000}CommandLinen                    DescriptionWin RM MaxTimoutmsDescriptionn                    Order22Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigwinrs @{MaxMemoryPerShellMB=2048}CommandLinen                    DescriptionWin RM MaxMemoryPerShellMBDescriptionn                    Order23Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigservice @{AllowUnencrypted=true}CommandLinen                    DescriptionWin RM AllowUnencryptedDescriptionn                    Order24Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigserviceauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order25Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigclientauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order26Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfiglistenerAddress=+Transport=HTTP @{Port=5985} CommandLinen                    DescriptionWin RM listener AddressPortDescriptionn                    Order27Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=remote administration new enable=yes CommandLinen                    DescriptionWin RM adv firewall enableDescriptionn                    Order29Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net stop winrm CommandLinen                    DescriptionStop Win RM Service Descriptionn                    Order28Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net start winrm CommandLinen                    DescriptionStart Win RM ServiceDescriptionn                    Order32Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinepowershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;CommandLinen                    DescriptionSet PowerShell ExecutionPolicyDescriptionn                    Order1Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order2Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-PSRemoting -Force&quot;CommandLinen                    DescriptionEnable PowerShell RemotingDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order61Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-NetFirewallRule -DisplayGroup Remote Desktop&quot;CommandLinen                    DescriptionRule RDP FilewallDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order62Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name UserAuthentication -Value 1&quot;CommandLinen                    DescriptionEnable RDP2016Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order63Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal Server' -Name fDenyTSConnections -Value 0&quot;CommandLinen                    DescriptionEnable RDP2016p2Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order5Ordern                    RequiresUserInputtrueRequiresUserInputn                    DescriptionRDP adv firewall enableDescriptionn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes CommandLinen                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order31Ordern                    CommandLinecmd.exe c sc config winrm start= autoCommandLinen                    RequiresUserInputtrueRequiresUserInputn                    DescriptionNo-Delay Auto start WinRM on bootDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order30Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinecmd.exe c netsh advfirewall set allprofiles state offCommandLinen                    DescriptionDisable Windows FirewallDescriptionn                SynchronousCommandn            FirstLogonCommandsnShowWindowsLivefalseShowWindowsLiven        componentn    settingsn    settings pass=specializen        component name=Microsoft-Windows-Deployment processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            RunSynchronousn                RunSynchronousCommand wcmaction=addn                    Order1Ordern                    Pathnet user administrator activeYesPathn                    WillRebootNeverWillRebootn                RunSynchronousCommandn            RunSynchronousn        componentn        component name=Microsoft-Windows-Security-SPP-UX processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SkipAutoActivationtrueSkipAutoActivationn        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            ComputerName@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-APP@@{calm_array_index}@@ComputerNamen        componentn    settingsn    settings pass=windowsPEn        component name=Microsoft-Windows-International-Core-WinPE processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SetupUILanguagen            UILanguageen-US UILanguagen            SetupUILanguagen            InputLocaleen-US InputLocalen            SystemLocaleen-US SystemLocalen            UILanguageen-US UILanguagen            UILanguageFallbacken-US UILanguageFallbackn            UserLocaleen-US UserLocalen        componentn    settingsnunattend,
								type 
							}
						},
						power_state ON,
						type ,
						account_uuid 86397346-1c41-4560-a47f-591ec87c3cf8,
						boot_config {
							boot_device {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								}
							},
							type ,
							boot_type ,
							mac_address 
						},
						disk_list [{
							data_source_reference {
								kind app_package,
								type ,
								name Windows 2019 STD,
								uuid 3330b49e-54cf-467a-b2f4-496fd12e3bce
							},
							type ,
							disk_size_mib 0,
							volume_group_reference null,
							device_properties {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								},
								device_type DISK
							}
						}]
					},
					availability_zone_reference null,
					backup_policy null,
					type ,
					cluster_reference null,
					categories 
				},
				variable_list []
			}, {
				description ,
				action_list [{
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name MSSQL 2017 Single Instances
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 9364bd66_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 12c9fffe_runbook,
						main_task_local_reference {
							kind app_task,
							name 9364bd66_dag
						},
						variable_list []
					},
					name pre_action_create
				}, {
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name MSSQL 2017 Single Instances
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 7f662aee_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 7e19ac41_runbook,
						main_task_local_reference {
							kind app_task,
							name 7f662aee_dag
						},
						variable_list []
					},
					name post_action_delete
				}],
				type AHV_VM,
				name MSSQL 2017 Single Instances,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol ,
					connection_port 5985,
					address @@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@,
					delay_secs 140,
					disable_readiness_probe false,
					login_credential_local_reference {
						kind app_credential,
						name administrator
					}
				},
				editables {
					create_spec {
						resources {
							nic_list {},
							num_vcpus_per_socket true,
							num_sockets true,
							memory_size_mib true,
							serial_port_list {}
						}
					}
				},
				os_type Windows,
				create_spec {
					name @@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-SQL@@{calm_array_index}@@,
					resources {
						nic_list [{
							nic_type NORMAL_NIC,
							ip_endpoint_list [],
							network_function_chain_reference null,
							network_function_nic_type INGRESS,
							mac_address ,
							subnet_reference {
								kind subnet,
								type ,
								name ,
								uuid be695f07-5852-40d5-8631-039b0c8c8da2
							},
							type 
						}],
						serial_port_list [],
						guest_tools null,
						num_vcpus_per_socket 2,
						num_sockets 4,
						gpu_list [],
						memory_size_mib 32768,
						parent_reference null,
						hardware_clock_timezone ,
						guest_customization {
							cloud_init null,
							type ,
							sysprep {
								is_domain false,
								install_type PREPARED,
								domain_credential_reference null,
								domain ,
								dns_ip ,
								dns_search_path ,
								unattend_xml xml version=1.0 encoding=utf-8nunattend xmlns=urnschemas-microsoft-comunattendn    settings pass=oobeSystemn        component name=Microsoft-Windows-International-Core processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            InputLocale041300020409InputLocalen            SystemLocaleen-USSystemLocalen            UILanguageFallbacken-USUILanguageFallbackn            UserLocalenl-NLUserLocalen        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            AutoLogonn                EnabledtrueEnabledn                LogonCount9999999LogonCountn                UsernameAdministratorUsernamen                Passwordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                Passwordn            AutoLogonn            OOBEn                HideEULAPagetrueHideEULAPagen                HideWirelessSetupInOOBEtrueHideWirelessSetupInOOBEn                NetworkLocationHomeNetworkLocationn                ProtectYourPC2ProtectYourPCn            OOBEn            UserAccountsn                AdministratorPasswordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                AdministratorPasswordn            UserAccountsn            FirstLogonCommandsn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -qCommandLinen                    DescriptionWin RM quickconfig -qDescriptionn                    Order20Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -transporthttpCommandLinen                    DescriptionWin RM quickconfig -transporthttpDescriptionn                    Order21Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfig @{MaxTimeoutms=1800000}CommandLinen                    DescriptionWin RM MaxTimoutmsDescriptionn                    Order22Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigwinrs @{MaxMemoryPerShellMB=2048}CommandLinen                    DescriptionWin RM MaxMemoryPerShellMBDescriptionn                    Order23Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigservice @{AllowUnencrypted=true}CommandLinen                    DescriptionWin RM AllowUnencryptedDescriptionn                    Order24Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigserviceauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order25Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigclientauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order26Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfiglistenerAddress=+Transport=HTTP @{Port=5985} CommandLinen                    DescriptionWin RM listener AddressPortDescriptionn                    Order27Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=remote administration new enable=yes CommandLinen                    DescriptionWin RM adv firewall enableDescriptionn                    Order29Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net stop winrm CommandLinen                    DescriptionStop Win RM Service Descriptionn                    Order28Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net start winrm CommandLinen                    DescriptionStart Win RM ServiceDescriptionn                    Order32Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinepowershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;CommandLinen                    DescriptionSet PowerShell ExecutionPolicyDescriptionn                    Order1Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order2Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-PSRemoting -Force&quot;CommandLinen                    DescriptionEnable PowerShell RemotingDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order61Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-NetFirewallRule -DisplayGroup Remote Desktop&quot;CommandLinen                    DescriptionRule RDP FilewallDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order62Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name UserAuthentication -Value 1&quot;CommandLinen                    DescriptionEnable RDP2016Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order63Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal Server' -Name fDenyTSConnections -Value 0&quot;CommandLinen                    DescriptionEnable RDP2016p2Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order5Ordern                    RequiresUserInputtrueRequiresUserInputn                    DescriptionRDP adv firewall enableDescriptionn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes CommandLinen                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order31Ordern                    CommandLinecmd.exe c sc config winrm start= autoCommandLinen                    RequiresUserInputtrueRequiresUserInputn                    DescriptionNo-Delay Auto start WinRM on bootDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order30Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinecmd.exe c netsh advfirewall set allprofiles state offCommandLinen                    DescriptionDisable Windows FirewallDescriptionn                SynchronousCommandn            FirstLogonCommandsnShowWindowsLivefalseShowWindowsLiven        componentn    settingsn    settings pass=specializen        component name=Microsoft-Windows-Deployment processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            RunSynchronousn                RunSynchronousCommand wcmaction=addn                    Order1Ordern                    Pathnet user administrator activeYesPathn                    WillRebootNeverWillRebootn                RunSynchronousCommandn            RunSynchronousn        componentn        component name=Microsoft-Windows-Security-SPP-UX processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SkipAutoActivationtrueSkipAutoActivationn        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            ComputerName@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-SQL@@{calm_array_index}@@ComputerNamen        componentn    settingsn    settings pass=windowsPEn        component name=Microsoft-Windows-International-Core-WinPE processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SetupUILanguagen            UILanguageen-US UILanguagen            SetupUILanguagen            InputLocaleen-US InputLocalen            SystemLocaleen-US SystemLocalen            UILanguageen-US UILanguagen            UILanguageFallbacken-US UILanguageFallbackn            UserLocaleen-US UserLocalen        componentn    settingsnunattend,
								type 
							}
						},
						power_state ON,
						type ,
						account_uuid 86397346-1c41-4560-a47f-591ec87c3cf8,
						boot_config {
							boot_device {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								}
							},
							type ,
							boot_type ,
							mac_address 
						},
						disk_list [{
							data_source_reference {
								kind app_package,
								type ,
								name Windows 2019 STD,
								uuid 3330b49e-54cf-467a-b2f4-496fd12e3bce
							},
							type ,
							disk_size_mib 0,
							volume_group_reference null,
							device_properties {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								},
								device_type DISK
							}
						}]
					},
					availability_zone_reference null,
					backup_policy null,
					type ,
					cluster_reference null,
					categories 
				},
				variable_list []
			}, {
				description ,
				action_list [{
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Xen App Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 7bc081ba_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 43c1911f_runbook,
						main_task_local_reference {
							kind app_task,
							name 7bc081ba_dag
						},
						variable_list []
					},
					name pre_action_create
				}, {
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Xen App Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name 5c0028ca_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 969ed324_runbook,
						main_task_local_reference {
							kind app_task,
							name 5c0028ca_dag
						},
						variable_list []
					},
					name post_action_delete
				}],
				type AHV_VM,
				name Xen App Servers,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol ,
					connection_port 5985,
					address @@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@,
					delay_secs 140,
					disable_readiness_probe false,
					login_credential_local_reference {
						kind app_credential,
						name administrator
					}
				},
				editables {
					create_spec {
						resources {
							nic_list {},
							num_vcpus_per_socket true,
							num_sockets true,
							memory_size_mib true,
							serial_port_list {}
						}
					}
				},
				os_type Windows,
				create_spec {
					name @@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-XAS@@{calm_array_index}@@,
					resources {
						nic_list [{
							nic_type NORMAL_NIC,
							ip_endpoint_list [],
							network_function_chain_reference null,
							network_function_nic_type INGRESS,
							mac_address ,
							subnet_reference {
								kind subnet,
								type ,
								name ,
								uuid be695f07-5852-40d5-8631-039b0c8c8da2
							},
							type 
						}],
						serial_port_list [],
						guest_tools null,
						num_vcpus_per_socket 1,
						num_sockets 4,
						gpu_list [],
						memory_size_mib 8192,
						parent_reference null,
						hardware_clock_timezone ,
						guest_customization {
							cloud_init null,
							type ,
							sysprep {
								is_domain false,
								install_type PREPARED,
								domain_credential_reference null,
								domain ,
								dns_ip ,
								dns_search_path ,
								unattend_xml xml version=1.0 encoding=utf-8nunattend xmlns=urnschemas-microsoft-comunattendn    settings pass=oobeSystemn        component name=Microsoft-Windows-International-Core processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            InputLocale041300020409InputLocalen            SystemLocaleen-USSystemLocalen            UILanguageFallbacken-USUILanguageFallbackn            UserLocalenl-NLUserLocalen        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            AutoLogonn                EnabledtrueEnabledn                LogonCount9999999LogonCountn                UsernameAdministratorUsernamen                Passwordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                Passwordn            AutoLogonn            OOBEn                HideEULAPagetrueHideEULAPagen                HideWirelessSetupInOOBEtrueHideWirelessSetupInOOBEn                NetworkLocationHomeNetworkLocationn                ProtectYourPC2ProtectYourPCn            OOBEn            UserAccountsn                AdministratorPasswordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                AdministratorPasswordn            UserAccountsn            FirstLogonCommandsn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -qCommandLinen                    DescriptionWin RM quickconfig -qDescriptionn                    Order20Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -transporthttpCommandLinen                    DescriptionWin RM quickconfig -transporthttpDescriptionn                    Order21Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfig @{MaxTimeoutms=1800000}CommandLinen                    DescriptionWin RM MaxTimoutmsDescriptionn                    Order22Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigwinrs @{MaxMemoryPerShellMB=2048}CommandLinen                    DescriptionWin RM MaxMemoryPerShellMBDescriptionn                    Order23Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigservice @{AllowUnencrypted=true}CommandLinen                    DescriptionWin RM AllowUnencryptedDescriptionn                    Order24Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigserviceauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order25Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigclientauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order26Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfiglistenerAddress=+Transport=HTTP @{Port=5985} CommandLinen                    DescriptionWin RM listener AddressPortDescriptionn                    Order27Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=remote administration new enable=yes CommandLinen                    DescriptionWin RM adv firewall enableDescriptionn                    Order29Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net stop winrm CommandLinen                    DescriptionStop Win RM Service Descriptionn                    Order28Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net start winrm CommandLinen                    DescriptionStart Win RM ServiceDescriptionn                    Order32Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinepowershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;CommandLinen                    DescriptionSet PowerShell ExecutionPolicyDescriptionn                    Order1Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order2Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-PSRemoting -Force&quot;CommandLinen                    DescriptionEnable PowerShell RemotingDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order61Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-NetFirewallRule -DisplayGroup Remote Desktop&quot;CommandLinen                    DescriptionRule RDP FilewallDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order62Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name UserAuthentication -Value 1&quot;CommandLinen                    DescriptionEnable RDP2016Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order63Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal Server' -Name fDenyTSConnections -Value 0&quot;CommandLinen                    DescriptionEnable RDP2016p2Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order5Ordern                    RequiresUserInputtrueRequiresUserInputn                    DescriptionRDP adv firewall enableDescriptionn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes CommandLinen                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order31Ordern                    CommandLinecmd.exe c sc config winrm start= autoCommandLinen                    RequiresUserInputtrueRequiresUserInputn                    DescriptionNo-Delay Auto start WinRM on bootDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order30Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinecmd.exe c netsh advfirewall set allprofiles state offCommandLinen                    DescriptionDisable Windows FirewallDescriptionn                SynchronousCommandn            FirstLogonCommandsnShowWindowsLivefalseShowWindowsLiven        componentn    settingsn    settings pass=specializen        component name=Microsoft-Windows-Deployment processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            RunSynchronousn                RunSynchronousCommand wcmaction=addn                    Order1Ordern                    Pathnet user administrator activeYesPathn                    WillRebootNeverWillRebootn                RunSynchronousCommandn            RunSynchronousn        componentn        component name=Microsoft-Windows-Security-SPP-UX processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SkipAutoActivationtrueSkipAutoActivationn        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            ComputerNameComputerNamen        componentn    settingsn    settings pass=windowsPEn        component name=Microsoft-Windows-International-Core-WinPE processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SetupUILanguagen            UILanguageen-US UILanguagen            SetupUILanguagen            InputLocaleen-US InputLocalen            SystemLocaleen-US SystemLocalen            UILanguageen-US UILanguagen            UILanguageFallbacken-US UILanguageFallbackn            UserLocaleen-US UserLocalen        componentn    settingsnunattend,
								type 
							}
						},
						power_state ON,
						type ,
						account_uuid 86397346-1c41-4560-a47f-591ec87c3cf8,
						boot_config {
							boot_device {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								}
							},
							type ,
							boot_type ,
							mac_address 
						},
						disk_list [{
							data_source_reference {
								kind app_package,
								type ,
								name Windows 2016 STD,
								uuid ce0584b3-7df3-47d9-adef-84c6dfdb29ca
							},
							type ,
							disk_size_mib 0,
							volume_group_reference null,
							device_properties {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								},
								device_type DISK
							}
						}]
					},
					availability_zone_reference null,
					backup_policy null,
					type ,
					cluster_reference null,
					categories 
				},
				variable_list []
			}, {
				description ,
				action_list [{
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Xen App Backend Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name dc6c4494_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 6fedb502_runbook,
						main_task_local_reference {
							kind app_task,
							name dc6c4494_dag
						},
						variable_list []
					},
					name pre_action_create
				}, {
					description ,
					type fragment,
					critical false,
					runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_substrate,
								name Xen App Backend Servers
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name a8f85926_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 3d9de96a_runbook,
						main_task_local_reference {
							kind app_task,
							name a8f85926_dag
						},
						variable_list []
					},
					name post_action_delete
				}],
				type AHV_VM,
				name Xen App Backend Servers,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol ,
					connection_port 5985,
					address @@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@,
					delay_secs 140,
					disable_readiness_probe false,
					login_credential_local_reference {
						kind app_credential,
						name administrator
					}
				},
				editables {
					create_spec {
						resources {
							nic_list {},
							num_vcpus_per_socket true,
							num_sockets true,
							memory_size_mib true,
							serial_port_list {}
						}
					}
				},
				os_type Windows,
				create_spec {
					name @@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-XBS@@{calm_array_index}@@,
					resources {
						nic_list [{
							nic_type NORMAL_NIC,
							ip_endpoint_list [],
							network_function_chain_reference null,
							network_function_nic_type INGRESS,
							mac_address ,
							subnet_reference {
								kind subnet,
								type ,
								name ,
								uuid be695f07-5852-40d5-8631-039b0c8c8da2
							},
							type 
						}],
						serial_port_list [],
						guest_tools null,
						num_vcpus_per_socket 2,
						num_sockets 4,
						gpu_list [],
						memory_size_mib 16384,
						parent_reference null,
						hardware_clock_timezone ,
						guest_customization {
							cloud_init null,
							type ,
							sysprep {
								is_domain false,
								install_type PREPARED,
								domain_credential_reference null,
								domain ,
								dns_ip ,
								dns_search_path ,
								unattend_xml xml version=1.0 encoding=utf-8nunattend xmlns=urnschemas-microsoft-comunattendn    settings pass=oobeSystemn        component name=Microsoft-Windows-International-Core processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            InputLocale041300020409InputLocalen            SystemLocaleen-USSystemLocalen            UILanguageFallbacken-USUILanguageFallbackn            UserLocalenl-NLUserLocalen        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            AutoLogonn                EnabledtrueEnabledn                LogonCount9999999LogonCountn                UsernameAdministratorUsernamen                Passwordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                Passwordn            AutoLogonn            OOBEn                HideEULAPagetrueHideEULAPagen                HideWirelessSetupInOOBEtrueHideWirelessSetupInOOBEn                NetworkLocationHomeNetworkLocationn                ProtectYourPC2ProtectYourPCn            OOBEn            UserAccountsn                AdministratorPasswordn                    PlainTexttruePlainTextn                    Value@@{administrator.secret}@@Valuen                AdministratorPasswordn            UserAccountsn            FirstLogonCommandsn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -qCommandLinen                    DescriptionWin RM quickconfig -qDescriptionn                    Order20Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm quickconfig -transporthttpCommandLinen                    DescriptionWin RM quickconfig -transporthttpDescriptionn                    Order21Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfig @{MaxTimeoutms=1800000}CommandLinen                    DescriptionWin RM MaxTimoutmsDescriptionn                    Order22Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigwinrs @{MaxMemoryPerShellMB=2048}CommandLinen                    DescriptionWin RM MaxMemoryPerShellMBDescriptionn                    Order23Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigservice @{AllowUnencrypted=true}CommandLinen                    DescriptionWin RM AllowUnencryptedDescriptionn                    Order24Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigserviceauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order25Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfigclientauth @{Basic=true}CommandLinen                    DescriptionWin RM auth BasicDescriptionn                    Order26Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c winrm set winrmconfiglistenerAddress=+Transport=HTTP @{Port=5985} CommandLinen                    DescriptionWin RM listener AddressPortDescriptionn                    Order27Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=remote administration new enable=yes CommandLinen                    DescriptionWin RM adv firewall enableDescriptionn                    Order29Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net stop winrm CommandLinen                    DescriptionStop Win RM Service Descriptionn                    Order28Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinecmd.exe c net start winrm CommandLinen                    DescriptionStart Win RM ServiceDescriptionn                    Order32Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    CommandLinepowershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;CommandLinen                    DescriptionSet PowerShell ExecutionPolicyDescriptionn                    Order1Ordern                    RequiresUserInputtrueRequiresUserInputn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order2Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-PSRemoting -Force&quot;CommandLinen                    DescriptionEnable PowerShell RemotingDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order61Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Enable-NetFirewallRule -DisplayGroup Remote Desktop&quot;CommandLinen                    DescriptionRule RDP FilewallDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order62Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name UserAuthentication -Value 1&quot;CommandLinen                    DescriptionEnable RDP2016Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order63Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinepowershell -Command &quot;Set-ItemProperty 'HKLMSYSTEMCurrentControlSetControlTerminal Server' -Name fDenyTSConnections -Value 0&quot;CommandLinen                    DescriptionEnable RDP2016p2Descriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order5Ordern                    RequiresUserInputtrueRequiresUserInputn                    DescriptionRDP adv firewall enableDescriptionn                    CommandLinecmd.exe c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes CommandLinen                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order31Ordern                    CommandLinecmd.exe c sc config winrm start= autoCommandLinen                    RequiresUserInputtrueRequiresUserInputn                    DescriptionNo-Delay Auto start WinRM on bootDescriptionn                SynchronousCommandn                SynchronousCommand wcmaction=addn                    Order30Ordern                    RequiresUserInputtrueRequiresUserInputn                    CommandLinecmd.exe c netsh advfirewall set allprofiles state offCommandLinen                    DescriptionDisable Windows FirewallDescriptionn                SynchronousCommandn            FirstLogonCommandsnShowWindowsLivefalseShowWindowsLiven        componentn    settingsn    settings pass=specializen        component name=Microsoft-Windows-Deployment processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            RunSynchronousn                RunSynchronousCommand wcmaction=addn                    Order1Ordern                    Pathnet user administrator activeYesPathn                    WillRebootNeverWillRebootn                RunSynchronousCommandn            RunSynchronousn        componentn        component name=Microsoft-Windows-Security-SPP-UX processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SkipAutoActivationtrueSkipAutoActivationn        componentn        component name=Microsoft-Windows-Shell-Setup processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            ComputerNameComputerNamen        componentn    settingsn    settings pass=windowsPEn        component name=Microsoft-Windows-International-Core-WinPE processorArchitecture=amd64 publicKeyToken=31bf3856ad364e35 language=neutral versionScope=nonSxS xmlnswcm=httpschemas.microsoft.comWMIConfig2002State xmlnsxsi=httpwww.w3.org2001XMLSchema-instancen            SetupUILanguagen            UILanguageen-US UILanguagen            SetupUILanguagen            InputLocaleen-US InputLocalen            SystemLocaleen-US SystemLocalen            UILanguageen-US UILanguagen            UILanguageFallbacken-US UILanguageFallbackn            UserLocaleen-US UserLocalen        componentn    settingsnunattend,
								type 
							}
						},
						power_state ON,
						type ,
						account_uuid 86397346-1c41-4560-a47f-591ec87c3cf8,
						boot_config {
							boot_device {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								}
							},
							type ,
							boot_type ,
							mac_address 
						},
						disk_list [{
							data_source_reference {
								kind app_package,
								type ,
								name Windows 2016 STD,
								uuid ce0584b3-7df3-47d9-adef-84c6dfdb29ca
							},
							type ,
							disk_size_mib 0,
							volume_group_reference null,
							device_properties {
								type ,
								disk_address {
									type ,
									device_index 0,
									adapter_type SCSI
								},
								device_type DISK
							}
						}]
					},
					availability_zone_reference null,
					backup_policy null,
					type ,
					cluster_reference null,
					categories 
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type EXISTING_VM,
				name Execute on XBS0,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol http,
					connection_port 5985,
					address @@{ip_address}@@,
					delay_secs 60,
					disable_readiness_probe true,
					login_credential_local_reference {
						kind app_credential,
						name Domain_Service_Account
					}
				},
				os_type Windows,
				create_spec {
					type PROVISION_EXISTING_MACHINE,
					address @@{XBS.address[0]}@@
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type EXISTING_VM,
				name Execute on MGT0,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol http,
					connection_port 5985,
					address @@{ip_address}@@,
					delay_secs 60,
					disable_readiness_probe true,
					login_credential_local_reference {
						kind app_credential,
						name Domain_Service_Account
					}
				},
				os_type Windows,
				create_spec {
					type PROVISION_EXISTING_MACHINE,
					address @@{MGT.address}@@
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type EXISTING_VM,
				name Execute on XAS0,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol http,
					connection_port 5985,
					address @@{ip_address}@@,
					delay_secs 60,
					disable_readiness_probe true,
					login_credential_local_reference {
						kind app_credential,
						name Domain_Service_Account
					}
				},
				os_type Windows,
				create_spec {
					type PROVISION_EXISTING_MACHINE,
					address @@{XAS.address}@@
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type EXISTING_VM,
				name Execute on SQL1,
				readiness_probe {
					connection_type POWERSHELL,
					retries 5,
					connection_protocol http,
					connection_port 5985,
					address @@{ip_address}@@,
					delay_secs 60,
					disable_readiness_probe true,
					login_credential_local_reference {
						kind app_credential,
						name Domain_Service_Account
					}
				},
				os_type Windows,
				create_spec {
					type PROVISION_EXISTING_MACHINE,
					address @@{SQL.address[1]}@@
				},
				variable_list []
			}],
			credential_definition_list [{
				username localhostadministrator,
				description ,
				type PASSWORD,
				secret {
					attrs {
						is_secret_modified false,
						secret_reference {}
					}
				},
				name administrator
			}, {
				username localhostsvc_hix,
				description ,
				type PASSWORD,
				secret {
					attrs {
						is_secret_modified false,
						secret_reference {}
					}
				},
				name Service_Account
			}, {
				username admin,
				description ,
				type PASSWORD,
				secret {
					attrs {
						is_secret_modified false,
						secret_reference {}
					}
				},
				name PC_CRED
			}, {
				username administrator,
				description ,
				type PASSWORD,
				secret {
					attrs {
						is_secret_modified false,
						secret_reference {}
					}
				},
				name DomainInstallUser
			}, {
				username RTP-POC046svc_HIX,
				description ,
				type PASSWORD,
				secret {
					attrs {
						is_secret_modified false,
						secret_reference {}
					}
				},
				name Domain_Service_Account
			}],
			package_definition_list [{
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name MGT
				}],
				name Install Management Server,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install Management Server
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Config OS MGT
							}, {
								kind app_task,
								name Wait for Login
							}, {
								kind app_task,
								name Create or Config AD
							}],
							name d2d318a8_dag,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Config OS MGT
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Create or Config AD
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Config OS MGT,
							state ACTIVE,
							attrs {
								exit_status [],
								script ##Vars Firstn$AppshortCode   = @@{AC}@@n$account        = (@@{Service_Account.username}@@ -split )[1]n$secpass        = @@{Service_Account.secret}@@  ConvertTo-SecureString -AsPlainText -forcen$DomainUsername = @@{DomainInstallUser.username}@@;n$DomainPassword = @@{DomainInstallUser.secret}@@;n$serviceaccuser = @@{Service_Account.username}@@n$serviceaccpass = @@{Service_Account.secret}@@n$NewName        = $($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@n$WindowsDomain  = @@{WindowsDomain}@@nn##Functions SecondnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}n## Logic Lastnwrite Setting timezonenset-timezone -id W. Europe Standard Timennwrite Setting up powerschemenpowercfg SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0npowercfg SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0nnwrite Creating Local Service AccountnNew-LocalUser $account -Password $secpass -FullName $accountnAdd-LocalGroupMember -Group Administrators -Member $($envcomputername)$($account)nnwrite Setting Autologon to service accountnset-autologon -DefaultUsername $serviceaccuser -DefaultPassword $serviceaccpass -AutoLogonCount 9999999nNew-ItemProperty -Path HKLMSoftwareMicrosoftWindowsCurrentVersionpoliciessystem -Name EnableLUA -PropertyType DWord -Value 0 -ForcenSet-Item WSManlocalhostClientTrustedHosts -Value '' -forcennwrite Renaming Servernrename-Computer -NewName $NewName -force -confirm0nnwrite Rebooting ServernShutdown -r -t 10 -f,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Create or Config AD,
							state ACTIVE,
							attrs {
								exit_status [],
								script n$AppshortCode     = @@{AC}@@n$AppLongCode      = @@{AppLongCode}@@n$WindowsDomain    = @@{WindowsDomain}@@n$UserPassword     = @@{UserPassword}@@n$AdminPassword    = @@{AdminPassword}@@n$adminAccounts    = @@{AdminAccounts}@@n$serviceuser      = @@{Service_Account.username}@@n$servicePassword  = @@{Service_Account.secret}@@n$domainPassword   = @@{DomainInstallUser.secret}@@n$domainInstallUser= @@{DomainInstallUser.username}@@n$Tier             = @@{Tier}@@n$customerNameLong = @@{CustomerNameLong}@@n$DummyADContent   = @@{DummyADContent}@@n$customercode     = @@{CustomerName}@@nnnn## Functions nFunction Generate-DomainContent{n  param(n    $UserPassword,n    $WindowsDomain,n    $servicePassword,n    $serviceuser,n    $domainPassword,n    $adminAccounts,n    $adminPassword,n    $domainInstallUser,n    $tier,n    $customerNameLong,n    $Customercode,n    $DummyADContent,n    $AppLongCode,n    $AppshortCode,n    $FirstdomaincontrollerIP = (Test-Connection $WindowsDomain -count 1).ipv4address.ipaddresstostringn  )nn  $password = $domainPassword  ConvertTo-SecureString -asplaintext -force;n  $domain = ((Get-WmiObject Win32_ComputerSystem).Domain)n  $credential = New-Object System.Management.Automation.PsCredential($($WindowsDomain)$($domainInstallUser),$password);nn  write Connecting to the first responding DC $FirstdomaincontrollerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($FirstdomaincontrollerIP)).hostname nn  write Reconnecting to latest OS version Name $Dnsnamenn  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $credential {n    $allDCs = (Get-ADForest).Domains  %{ Get-ADDomainController -Filter  -Server $_ }n    ($allDCs  sort [version]OperatingSystemVErsion -Desc  select -first 1).IPv4Addressn  }nn  write Reconnecting to latest OS version DC $LatestDomainControllerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($LatestDomainControllerIP)).hostname nn  write Reconnecting to latest OS version Name $Dnsnamenn  [array]$output = invoke-command -computername $Dnsname -credential $credential {n    start-transcript cwindowstempADConfig.log n    $DomainPath       = ((((Get-ADOrganizationalUnit -Filter )  select -first 1).DistinguishedName).split(',')  where {$_ -match DC}) -join(',') n    $tier             = $args[0]n    $UserPassword     = $args[1]n    $servicePassword  = $args[2]n    $adminAccounts    = $args[3]n    $adminPassword    = $args[4]n    $customerNameLong = $args[5]n    $DummyADContent   = $args[6]n    $serviceuser      = $args[7]n    $Customercode     = $args[8]n    $WindowsDomain    = $args[9]n    $AppshortCode     = $args[10]n    $AppLongCode      = $args[11]n    $DNSdomain        = (Get-ADDomain).dnsrootn    $ServiceAccounts  = svc_$($AppLongCode),svc_sql,svc_xas,svc_xbs,svc_mgt;n    $adminPassword    = $adminPassword  convertto-securestring -AsPlainText -Forcen    $UserPassword     = $UserPassword  convertto-securestring -AsPlainText -Forcen    $servicePassword  = $servicePassword  convertto-securestring -AsPlainText -Forcen    write Using Domain Path $DomainPathn    write (Re-)Creating the Parent OUsn    write Cleaning 1CD firstn    try {n      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-A,OU=Customers,$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-A,OU=Customers,$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}n     try {n      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-B,OU=Customers,$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-B,OU=Customers,$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}n    try {n      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-C,OU=Customers,$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-C,OU=Customers,$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}n    try {n      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-D,OU=Customers,$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=User-Accounts,OU=Customer-D,OU=Customers,$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}   n    try {n      Get-ADOrganizationalUnit -Identity OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}n    try {n      New-ADOrganizationalUnit -Name $($AppLongCode) -Path $($DomainPath);n    } catch {n      write Not Recreating $($AppLongCode) in $DomainPath  n    };n    try {n      New-ADOrganizationalUnit -Name Global -Path OU=$($AppLongCode),$($DomainPath);n    } catch {}n    write (Re-)Creating the Customer OUn    try {n      New-ADOrganizationalUnit -Name $customerNameLong -Path OU=$($AppLongCode),$($DomainPath);n    } catch {n      write Not Recreating $($AppLongCode) in $DomainPath OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) n    };n    write (Re-)Creating the Tier OUn    try {n      New-ADOrganizationalUnit -Name $tier -Path OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      n      New-ADOrganizationalUnit -Name $tier -Path OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the Service Account OUn    try {n      New-ADOrganizationalUnit -Name Service Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=Service Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=Service Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name Service Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the Groups OUn    try {n      New-ADOrganizationalUnit -Name Groups -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name Groups -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the Users OUn    try {n      New-ADOrganizationalUnit -Name User Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name User Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the Admins OUn    try {n      New-ADOrganizationalUnit -Name Admin Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name Admin Accounts -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the Servers OUn    try {n      New-ADOrganizationalUnit -Name Servers -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name Servers -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };n    write (Re-)Creating the MCS OUn    try {n      New-ADOrganizationalUnit -Name MCS -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    } catch {n      Get-ADOrganizationalUnit -Identity OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n      New-ADOrganizationalUnit -Name MCS -Path OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n    };    n    write Creating the Groupsn    try {n        #Global Firstn      new-adgroup -groupscope 1 -name $($AppLongCode)-Service-Accounts-Group -path OU=Global,OU=$($AppLongCode),$($DomainPath)n    } catch {nn    }n    new-adgroup -groupscope 1 -name $($Customercode)-$($Tier)-Admin-Accounts-Group -path OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) n    new-adgroup -groupscope 1 -name $($Customercode)-$($Tier)-Service-Accounts-Group -path OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)n    new-adgroup -groupscope 1 -name $($Customercode)-$($Tier)-User-Accounts-Group -path OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) n    n    if ($DummyADContent -eq 1){n      write Creating Dummy users for $tiern      function Generate-Name {;n        $lastnames  = Smith Johnson Williams Jones Brown Davis Miller Wilson Moore Taylor Anderson Thomas Jackson White Harris Martin Thompson Garcia Martinez Robinson Clark Wright Rodriguez Lopez Lewis Perez Hill Roberts Lee Scott Turner Walker Green Phillips Hall Adams Campbell Allen Baker Parker Young Gonzalez Evans Hernandez Nelson Edwards King Carter Collins;n        $firstnames = James Christopher Ronald Mary Lisa Michelle John Daniel Anthony Patricia Nancy Laura Robert Paul Kevin Linda Karen Sarah Michael Mark Jason Barbara Betty Kimberly William Donald Jeff Elizabeth Helen Deborah David George Jennifer Sandra Richard Kenneth Maria Donna Charles Steven Susan Carol Joseph Edward Margaret Ruth Thomas Brian Dorothy Sharon;n        $first = $firstnames.split( );n        $Last = $lastnames.split( );n        $f = $first[ (Get-Random $first.count ) ];n        $l = $last[ (Get-Random $last.count) ];n        $full = $f+.+$l;n        return $fulln      };n      $count1 = 0 n      $count2 = 0n      $names = $null;n      do {;n        [array]$names += Generate-name;n        $count1++;n      } until ($count1 -eq 1000);n      write We have $($names.count) namesn      foreach ($user in $names){;n        [array]$split = $user.split(.)n        $first = $split[0];n        $last = $split[1];n        try {;n          if ($count2 -le 200){;n            write Creating user $user $count2 out of 200n            new-aduser -name $first $last -Surname $last -givenname $first -AccountPassword $UserPassword -PasswordNeverExpires $true -SamAccountName $($user) -userPrincipalName $($user)@$($DNSdomain) -displayname $first $last -Company $customerNameLong -Office ChipSoft Amsterdam -EmailAddress $($user)@$($DNSdomain) -path OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) -title SR Bot -Department DevOpsn            add-ADGroupMember  $($Customercode)-$($Tier)-User-Accounts-Group $user -ea0  out-null;n            $count2 = $count2 + 1;n          };n        } catch {;n          $count2 = $count2 - 1;n        };n      };n    } else {n      write Not Generating dummy accounts in Productionn    }n    n    Write Creating Service Accountsn    foreach ($serviceaccount in $ServiceAccounts){;n      try {n        new-aduser -name $($serviceaccount) -AccountPassword $servicePassword -PasswordNeverExpires $true -userPrincipalName $($serviceaccount)@$($DNSdomain) -path OU=Global,OU=$($AppLongCode),$($DomainPath) -ea0;n      }catch {}n      try {n        add-ADGroupMember  $($AppLongCode)-Service-Accounts-Group $($serviceaccount) -ea0  out-null;n      }catch{}n    };n    Write Creating Admin Accountsn    $adminAccountsARR = $adminAccounts -split  ,n    foreach ($admin in $adminAccountsARR){;n      [array]$arr = $admin.split(.)n      $firstlast = $arr -join( )n      new-aduser -name $firstlast -AccountPassword $adminPassword -PasswordNeverExpires $true -userPrincipalName $($admin)@$($DNSdomain) -SamAccountName $($admin) -path OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath);n      add-ADGroupMember  $($Customercode)-$($Tier)-Admin-Accounts-Group $($admin) -ea0  out-null;n    };    n    Write Adding Service Account Group to Domain Adminsn    add-ADGroupMember  Domain Admins $($Customercode)-$($Tier)-Service-Accounts-Group -ea0  out-null;n    try{n      add-ADGroupMember  Domain Admins $($AppLongCode)-Service-Accounts-Group -ea0  out-null;n    } catch {}n    Write Adding Admin Account Group to Domain Adminsn    add-ADGroupMember  Domain Admins $($Customercode)-$($Tier)-Admin-Accounts-Group -ea0  out-null;n    Write Enabling All $($AppLongCode) $Tier OU Users for customer $customerNameLongn    Get-ADUser -Filter  -SearchBase OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  Enable-ADAccount -ea0n    Write Cleaning DNS Recordsn    $hide = Get-DnsServerResourceRecord -ZoneName $($WindowsDomain)  where {$_.hostname -match ^$($AppshortCode)-$($Tier)-$($CustomerCode)}   Remove-DnsServerResourceRecord -ZoneName $($WindowsDomain) -confirm0 -force -ea0n    $hide = Get-DnsServerResourceRecord -name SF-$($CustomerCode)-$($Tier).$($WindowsDomain) -ZoneName $($WindowsDomain) -ea0  Remove-DnsServerResourceRecord -ZoneName $($WindowsDomain) -confirm0 -force -ea0n    $error.clear()n    Get-ADUser -Filter  -SearchBase OU=Global,OU=$($AppLongCode),$($DomainPath)  Enable-ADAccount -ea0n    ##Write last VAR OU output heren    write OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)n n  } -args $tier,$UserPassword,$servicePassword,$adminAccounts,$adminPassword,$customerNameLong,$DummyADContent,$serviceuser,$Customercode,$WindowsDomain,$AppshortCode,$AppLongCoden  $output  out-file cwindowstempADConfig.log n  $output = $output -split  n  $ServerOU = $output  select -last 1n  return $ServerOUn}nn## Logicnnif ($WindowsDomain -ne Create New){n  Write Using Existing Windows Domain $WindowsDomainn  $ServerOU = Generate-DomainContent -UserPassword $UserPassword -WindowsDomain $WindowsDomain -domainPassword $domainPassword -servicePassword $servicePassword -adminAccounts $adminAccounts -adminPassword $adminPassword -domainInstallUser $domainInstallUser -tier $tier -customerNameLong $customerNameLong -DummyADContent $DummyADContent -customercode $customercode -AppshortCode $AppshortCode -AppLongCode $AppLongCoden  $ServerOU = $ServerOU  select -last 1n} else {n  Write Creating a new domain is not supported yet.n}nwrite ServerOU=$($ServerOU)n,
								eval_variables [ServerOU],
								eval_scope local,
								script_type npsscript,
								type ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type SET_VARIABLE,
							variable_list []
						}],
						description ,
						name 5f9e4cab_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d2d318a8_dag
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install Management Server
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Unregister SQL Server in ERA
							}, {
								kind app_task,
								name Delete XenDesktop VMs
							}, {
								kind app_task,
								name Purge AD
							}],
							name 728c8c5c_dag,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Unregister SQL Server in ERA,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$WindowsDomainUser          = @@{Domain_Service_Account.username}@@n$WindowsDomainPass          = @@{Domain_Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@n$EraIP                      = @@{ConfigMGT.ERAIP}@@nnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnnFunction REST-ERA-GetClusters {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)8443erav0.8clustersnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-Get-Database-Servers {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)erav0.8dbserversnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Instances {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Timemachinesnn  $URL = https$($EraIP)erav0.8tmsnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Snapshots {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $TMsIDn  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA TimeMachine $TMsID Capabilitynn  $URL = https$($EraIP)erav0.8tms$($TMsID)capabilitytype=real&time-zone=EuropeAmsterdamnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Remove-MSSQL-Server {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [object] $dbservern  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Deleting Database Server $($dbserver.id)nn  $URL = https$($EraIP)erav0.8tms$($dbserver.id)remove=true;nn  try {n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    write-log -message I did not exist bossn    #$task = Invoke-RestMethod -Uri $URL -method POST -body $body -headers $headers;nn    $error.clear()n  }  n  Return $taskn} nn### Logicnnwrite-log -message Getting ERA Clusternn$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnWrite-log -message Making sure the Database server is authorised for the timemachinenn$dbservers = REST-ERA-Get-Database-Servers -EraIP $EraIP -clpassword $PEpass -clusername $PEadminn$dbserver = $dbservers  where {$_.name -eq $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1}nn  if (!$dbserver){nn    write-log -message The database server was not registered before.nn  } else {nn    $connect = REST-ERA-Remove-MSSQL-Server -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -dbserver $dbservernnn  }nn}nnn$error.clear()nn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Delete XenDesktop VMs,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$customerNameLong           = @@{CustomerNameLong}@@nnnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Delete-VM {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $VMUUIDn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Deleting VM $VMUUIDnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($VMUUID)delete_snapshots=truen n  try{n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;n  }nn  Return $taskn} n### Logicnnwrite-log -message Getting All VMsnn[array]$Vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadminnnWrite-log -message Filtering on XIA machines (XenDesktop Generated)nn[array]$vms = $Vms.entities  where {$_.vmname -match $($Appshortcode)-$($tier)-$($CustomerCode)-XAI.}nnWrite-log -message We have $($vms.entities.count) XIA machines (XenDesktop Generated) after filteringnnif (!$vms){nn  write-log -message There are no XenDeskop Vms to be deleted in this build.nn} else {nn  foreach ($vm in $vms){nn    $hide = REST-Delete-VM -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadmin -VMUUID $vm.uuidnn  }nn}nn$error.clear()nnnn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Purge AD,
							state ACTIVE,
							attrs {
								exit_status [],
								script n$AppshortCode     = @@{AC}@@n$AppLongCode      = @@{AppLongCode}@@n$WindowsDomain    = @@{WindowsDomain}@@n$UserPassword     = @@{UserPassword}@@n$AdminPassword    = @@{AdminPassword}@@n$adminAccounts    = @@{AdminAccounts}@@n$serviceuser      = @@{Service_Account.username}@@n$servicePassword  = @@{Service_Account.secret}@@n$domainPassword   = @@{DomainInstallUser.secret}@@n$domainInstallUser= @@{DomainInstallUser.username}@@n$Tier             = @@{Tier}@@n$customerNameLong = @@{CustomerNameLong}@@n$DummyADContent   = @@{DummyADContent}@@n$customercode     = @@{CustomerName}@@nnnn## Functions nFunction Remove-DomainContent{n  param(n    $UserPassword,n    $WindowsDomain,n    $servicePassword,n    $serviceuser,n    $domainPassword,n    $adminAccounts,n    $adminPassword,n    $domainInstallUser,n    $tier,n    $customerNameLong,n    $Customercode,n    $DummyADContent,n    $AppLongCode,n    $AppshortCode,n    $FirstdomaincontrollerIP = (Test-Connection $WindowsDomain -count 1).ipv4address.ipaddresstostringn  )nn  $password = $domainPassword  ConvertTo-SecureString -asplaintext -force;n  $domain = ((Get-WmiObject Win32_ComputerSystem).Domain)n  $credential = New-Object System.Management.Automation.PsCredential($($WindowsDomain)$($domainInstallUser),$password);nn  write Connecting to the first responding DC $FirstdomaincontrollerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($FirstdomaincontrollerIP)).hostname nn  write Reconnecting to latest OS version Name $Dnsnamenn  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $credential {n    $allDCs = (Get-ADForest).Domains  %{ Get-ADDomainController -Filter  -Server $_ }n    ($allDCs  sort [version]OperatingSystemVErsion -Desc  select -first 1).IPv4Addressn  }nn  write Reconnecting to latest OS version DC $LatestDomainControllerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($LatestDomainControllerIP)).hostname nn  write Reconnecting to latest OS version Name $Dnsnamenn  [array]$output = invoke-command -computername $Dnsname -credential $credential {n    start-transcript cwindowstempADConfig.log n    $DomainPath       = ((((Get-ADOrganizationalUnit -Filter )  select -first 1).DistinguishedName).split(',')  where {$_ -match DC}) -join(',') n    $tier             = $args[0]n    $UserPassword     = $args[1]n    $servicePassword  = $args[2]n    $adminAccounts    = $args[3]n    $adminPassword    = $args[4]n    $customerNameLong = $args[5]n    $DummyADContent   = $args[6]n    $serviceuser      = $args[7]n    $Customercode     = $args[8]n    $WindowsDomain    = $args[9]n    $AppshortCode     = $args[10]n    $AppLongCode      = $args[11]n    $DNSdomain        = (Get-ADDomain).dnsrootn    $ServiceAccounts  = svc_$($AppLongCode),svc_sql,svc_xas,svc_xbs,svc_mgt;n    $adminPassword    = $adminPassword  convertto-securestring -AsPlainText -Forcen    $UserPassword     = $UserPassword  convertto-securestring -AsPlainText -Forcen    $servicePassword  = $servicePassword  convertto-securestring -AsPlainText -Forcen    write Using Domain Path $DomainPathn    write Deleting the Parent OUsn    try {n      Get-ADOrganizationalUnit -Identity OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  set-ADOrganizationalUnit u2013ProtectedFromAccidentalDeletion $falsen      Get-ADOrganizationalUnit -Identity OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)  remove-ADOrganizationalUnit -Recursive -confirm0n    } catch{}nn  } -args $tier,$UserPassword,$servicePassword,$adminAccounts,$adminPassword,$customerNameLong,$DummyADContent,$serviceuser,$Customercode,$WindowsDomain,$AppshortCode,$AppLongCoden  $output  out-file cwindowstempADConfig.log n  $output = $output -split  n  $ServerOU = $output  select -last 1n  return $ServerOUn}nn## LogicnnnWrite Using Existing Windows Domain $WindowsDomainnWrite Removing content on uninstallnRemove-DomainContent -UserPassword $UserPassword -WindowsDomain $WindowsDomain -domainPassword $domainPassword -servicePassword $servicePassword -adminAccounts $adminAccounts -adminPassword $adminPassword -domainInstallUser $domainInstallUser -tier $tier -customerNameLong $customerNameLong -DummyADContent $DummyADContent -customercode $customercode -AppshortCode $AppshortCode -AppLongCode $AppLongCoden$error.clear()nn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 4d024299_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 728c8c5c_dag
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type SUBSTRATE_IMAGE,
				service_local_reference_list [],
				name Windows 2019 STD,
				version ,
				options {
					type ,
					name Windows 2019 STD,
					resources {
						image_type DISK_IMAGE,
						checksum {
							checksum_algorithm ,
							type ,
							checksum_value 
						},
						source_uri httpsdl.dropboxusercontent.comsbvwbf4gvmp9b59iWindows%202019V4.qcow2,
						version {
							product_version 10.0,
							type ,
							product_name Windows Servr 2019 Standard
						},
						architecture X86_64,
						type 
					},
					description 
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name APP
				}],
				name Install App Servers,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install App Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Choco
							}, {
								kind app_task,
								name OS Config 
							}, {
								kind app_task,
								name Wait for Login 1
							}, {
								kind app_task,
								name Install APP Choco 
							}, {
								kind app_task,
								name Wait for Login 2
							}, {
								kind app_task,
								name Change CD Drive to Z
							}, {
								kind app_task,
								name Add Disk D
							}, {
								kind app_task,
								name Download Hix
							}, {
								kind app_task,
								name Install Hix Roles
							}],
							name d2d318a8_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Choco
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login 1
									}
								}, {
									from_task_reference {
										kind app_task,
										name OS Config 
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login 1
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login 1
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install APP Choco 
									}
								}, {
									from_task_reference {
										kind app_task,
										name Change CD Drive to Z
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Add Disk D
									}
								}, {
									from_task_reference {
										kind app_task,
										name Add Disk D
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Download Hix
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install APP Choco 
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login 2
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login 2
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Change CD Drive to Z
									}
								}, {
									from_task_reference {
										kind app_task,
										name Download Hix
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Hix Roles
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco,
							state ACTIVE,
							attrs {
								exit_status [],
								script sleep 20n$ChocoPackagesURL      = @@{ChocoPackagesURL}@@n$ChocoClientPackageURL = @@{ChocoClientPackageURL}@@nn$localChocolateyPackageFilePath = cwindowstempnn$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea0nif ($localChocolateyPackageFilePathExists){nn  write Removing Client dirnn  remove-item $localChocolateyPackageFilePath -recurse -force -confirm0 -ea0n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n} else {n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n}nn$PkgDir = CPackagesn$PkgDirexists = get-item $PkgDir -ea0nif ($PkgDirexists){nn  write Removing Package dirnn  remove-item $PkgDir -recurse -force -confirm0 -ea0n} nmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $ChocoClientPackageURLnn$filename = $ChocoClientPackageURL -split   select -last 1n$output = $($localChocolateyPackageFilePath)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoClientPackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($localChocolateyPackageFilePath)$($filename) -DestinationPath $localChocolateyPackageFilePathnn$Toolspath = $($localChocolateyPackageFilePath)Toolsncd $toolspathn$PSFile = $($Toolspath)chocolateyInstall.ps1n& $PSFilennwrite Downloading Packagesnwrite Using URL $ChocoPackagesURLnn$filename = $ChocoPackagesURL -split   select -last 1n$output = $($PkgDir)$($filename)n$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoPackagesURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnchoco source remove --name='chocolatey'nchoco source add --name='local' --source='cpackages'nchoco upgrade chocolatey -ynwrite Rebooting ServernShutdown -r -t 15 -f,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name OS Config ,
							state ACTIVE,
							attrs {
								exit_status [],
								script ##Vars Firstn$AppshortCode   = @@{AC}@@n$account        = (@@{Service_Account.username}@@ -split )[1]n$oupath         = @@{MGT.ServerOU}@@n$secpass        = @@{Service_Account.secret}@@  ConvertTo-SecureString -AsPlainText -forcen$DomainUsername = @@{DomainInstallUser.username}@@;n$DomainPassword = @@{DomainInstallUser.secret}@@;n$serviceaccuser = @@{Service_Account.username}@@n$serviceaccpass = @@{Service_Account.secret}@@n$NewName        = $($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@n$WindowsDomain  = @@{WindowsDomain}@@nnn##Functions SecondnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultDomain,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            Set-ItemProperty $RegPath DefaultDomainName -Value $DefaultDomain -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}n## Logic Lastnwrite Setting timezonenset-timezone -id W. Europe Standard Timennwrite Setting up powerschemenpowercfg SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0npowercfg SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0nnwrite Creating Local Service AccountnNew-LocalUser $account -Password $secpass -FullName $accountnAdd-LocalGroupMember -Group Administrators -Member $($envcomputername)$($account)nnwrite Renaming Servernrename-Computer -NewName $NewName -force -confirm0nnwrite Joining Servern$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;n$credential = New-Object System.Management.Automation.PSCredential($($WindowsDomain)$($DomainUsername),$Securepass);nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupathnnwrite Setting Autologon to service accountnn$username = ($serviceaccuser -split )[1]nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999nNew-ItemProperty -Path HKLMSoftwareMicrosoftWindowsCurrentVersionpoliciessystem -Name EnableLUA -PropertyType DWord -Value 0 -ForcenSet-Item WSManlocalhostClientTrustedHosts -Value '' -force,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login 1,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 180
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install APP Choco ,
							state ACTIVE,
							attrs {
								exit_status [],
								script try {n  choco install googlechrome -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install googlechrome -y --ignore-checksumsn}ntry {n  choco install dotnet4.7.2 -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install dotnet4.7.2 -y --ignore-checksumsn}ntry {n  choco install 7zip.install -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install 7zip.install -y --ignore-checksumsn}ntry {n  choco install pswindowsupdate -y --ignore-checksumsn} catch {n  sleep 20n  choco install pswindowsupdate -y --ignore-checksumsn}ntry {n  choco install bginfo -y --ignore-checksumsn} catch {n  sleep 20n  choco install bginfo -y --ignore-checksumsn} nsleep 20n$bgInfoRegPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunn$bgInfoRegkey = BgInfon$bgInfoRegType = Stringn$bgInfoRegkeyValue = CProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicpromptnnNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValuennCProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt nwrite 'cProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpbginfo.cmd -Encoding ASCIIn nwrite @@{SQL.InstanceName}@@nShutdown -r -t 5,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login 2,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Change CD Drive to Z,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn# No variables required.nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Change CD Drive to Znn$cd = $NULLn$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $envCOMPUTERNAME -ErrorAction StopnSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter DriveLetter = '$($cd.drive)' ) -Arguments @{DriveLetter='Z'}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Add Disk D,
							state ACTIVE,
							attrs {
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@n$databaseserver         = @@{SQL.name[0]}@@nnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction REST-Query-StorageContainers {n  Param (n    [string] $Cluster_IP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($Cluster_IP)9440PrismGatewayservicesrestv2.0storage_containersnn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Add-New-VMDisk {n  Param (n    [string] $Cluster_IP,n    [string] $clpassword,n    [string] $clusername,n    [string] $size,n    [string] $ContainerUUID,n    [string] $SCSIIndex,n    [string] $VMUUIDn  )n  if ($silent -eq 0){nn    write-log -message Debug level is $debug;n    write-log -message Building Credential objectnn  } n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -eq 0){nn    write-log -message Create New Disk JSON for Container $($ContainerUUID), with size $($Size) for VM $($VMUUID) on index $SCSIIndexnn  }n  $URL = https$($Cluster_IP)9440PrismGatewayservicesrestv2.0vms$($VMUUID)disksattachn  $json = @n  {n    vm_disks [{n      is_cdrom false,n      disk_address {n        device_bus scsi,n        device_index $SCSIIndexn      },n      vm_disk_create {n        storage_container_uuid $($ContainerUUID),n        size $($Size)n      }n    }]n  }n@n  try {n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }catch{nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }n  Return $taskn}n## Logic nwrite-log -message Finding VMnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnn[array]$vm = $VMS.entities  where {$_.vmname -eq $vmname}nnif ($VM){n  write-log -message Using VM with UUID $($vm.uuid)  n}nn$500GB = 536870912000nnwrite-log -message Adding Drive Dn$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 2nsleep 10n$driveletter = Dn$driveletter = $driveletter.Substring(0,$driveletter.Length-1)nGet-disk where {$_.operationalstatus -ne Online}  select -first 1  Initialize-Disk -PartitionStyle GPT -PassThru -ea0  New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName Hix Data  Format-Volume -FileSystem NTFS -NewFileSystemLabel Hix Data -Confirm$false -ea0n,
								type ,
								command_line_args ,
								exit_status [],
								script_type npsscript
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Download Hix,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn$HixPackageURL = @@{HixPackageURL}@@nnnn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic n$Maincount = 0ndo {n  $maincount ++n  write-log -message Download Hix Sofwaren  n  $PkgDir = DDownloadHixnn  mkdir $PkgDirn  n  write Downloading Hixn  write Using URL $PackageURLn  n  $filename = $HixPackageURL -split   select -last 1n  $output = $($PkgDir)$($filename)nn  $count = 0n  do {n    $count ++n    try {n      $wc = New-Object net.webclientn      $wc.Downloadfile($HixPackageURL, $output)n      $failed = 0n    } catch {n      sleep 15n      $failed = 1n    }n  } until ($count -ge 4 -or $failed -eq 0)n  n  Expand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirn  $item = get-item DDownloadHix.msin} until ($maincount -ge 5 -or $item)n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name APP
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Hix Roles,
							state ACTIVE,
							attrs {
								exit_status [],
								script Function write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Creating HixBasenmkdir DHixBase -ea0nwrite-log -message Creating HixAppsnmkdir DHixApps -ea0nwrite-log -message Creating HixEnvnmkdir DHixEnv -ea0n$error.clear()nnif ($envcomputername -match APP0){n  write-log $envcomputername Installing HASn  msiexec i DDownloadHixChipSoft.6.2.msi HIXFOLDER=DHiXBase APPSRVFOLDER=DHixApps HIXENVFOLDER=DHixEnv ADDLOCAL=Base,HiX,HiXHelp,HAS,DatabaseUpdater,Routeer,MetingenDriver,ExchangeSynchronisatie,CcowServer qn n} elseif ($envcomputername -match APP1){n  write-log $envcomputername Installing COMEZ n  msiexec i DDownloadHixChipSoft.6.2.msi HIXFOLDER=DHiXBase APPSRVFOLDER=DHixApps HIXENVFOLDER=DHixEnv ADDLOCAL=Base,HiX,HiXHelp,Comez qnn} elseif ($envcomputername -match APP2){n  write-log $envcomputername Installing Environment Servicesn  msiexec i DDownloadHixChipSoft.6.2.msi HIXFOLDER=DHiXBase APPSRVFOLDER=DHixApps HIXENVFOLDER=DHixEnv ADDLOCAL=Base,HiX,HiXHelp,HiXEnvironments qnn  n}nwrite-log -message Waiting for MSI Installernsleep 180n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 5f9e4cab_runbook_cloned_1,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d2d318a8_dag_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install App Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name 728c8c5c_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 4d024299_runbook_cloned_1,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 728c8c5c_dag_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type SUBSTRATE_IMAGE,
				service_local_reference_list [],
				name Windows 2016 STD,
				version ,
				options {
					type ,
					name Windows 2016 STD,
					resources {
						image_type DISK_IMAGE,
						checksum {
							checksum_algorithm ,
							type ,
							checksum_value 
						},
						source_uri httpsdl.dropboxusercontent.comsoxhzh5jfpav89r5Windows2016.qcow2,
						version {
							product_version 2016,
							type ,
							product_name Windows Servr 2016 Standard
						},
						architecture X86_64,
						type 
					},
					description 
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name SQL
				}],
				name Install SQL,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Choco
							}, {
								kind app_task,
								name OS Config
							}, {
								kind app_task,
								name Wait for Login
							}, {
								kind app_task,
								name Adding 4 Disks
							}, {
								kind app_task,
								name Install SQL 2017
							}, {
								kind app_task,
								name Install SQL Choco
							}, {
								kind app_task,
								name Reboot Sleep 2
							}, {
								kind app_task,
								name SQL Server Config
							}, {
								kind app_task,
								name Change CDRom Drive to Z
							}, {
								kind app_task,
								name Grab Instance Name
							}],
							name d2d318a8_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Choco
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install SQL 2017
									}
								}, {
									from_task_reference {
										kind app_task,
										name OS Config
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name SQL Server Config
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Change CDRom Drive to Z
									}
								}, {
									from_task_reference {
										kind app_task,
										name Change CDRom Drive to Z
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Grab Instance Name
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Adding 4 Disks
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install SQL Choco
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Reboot Sleep 2
									}
								}, {
									from_task_reference {
										kind app_task,
										name Reboot Sleep 2
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name SQL Server Config
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install SQL 2017
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install SQL Choco
									}
								}, {
									from_task_reference {
										kind app_task,
										name Adding 4 Disks
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install SQL Choco
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco,
							state ACTIVE,
							attrs {
								exit_status [],
								script sleep 20n$ChocoPackagesURL      = @@{ChocoPackagesURL}@@n$ChocoClientPackageURL = @@{ChocoClientPackageURL}@@nn$localChocolateyPackageFilePath = cwindowstempnn$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea0nif ($localChocolateyPackageFilePathExists){nn  write Removing Client dirnn  remove-item $localChocolateyPackageFilePath -recurse -force -confirm0 -ea0n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n} else {n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n}nn$PkgDir = CPackagesn$PkgDirexists = get-item $PkgDir -ea0nif ($PkgDirexists){nn  write Removing Package dirnn  remove-item $PkgDir -recurse -force -confirm0 -ea0n} nmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $ChocoClientPackageURLnn$filename = $ChocoClientPackageURL -split   select -last 1n$output = $($localChocolateyPackageFilePath)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoClientPackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($localChocolateyPackageFilePath)$($filename) -DestinationPath $localChocolateyPackageFilePathnn$Toolspath = $($localChocolateyPackageFilePath)Toolsncd $toolspathn$PSFile = $($Toolspath)chocolateyInstall.ps1n& $PSFilennwrite Downloading Packagesnwrite Using URL $ChocoPackagesURLnn$filename = $ChocoPackagesURL -split   select -last 1n$output = $($PkgDir)$($filename)n$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoPackagesURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnchoco source remove --name='chocolatey'nchoco source add --name='local' --source='cpackages'nchoco upgrade chocolatey -ynwrite Rebooting ServernShutdown -r -t 15 -f,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name OS Config,
							state ACTIVE,
							attrs {
								exit_status [],
								script ##Vars Firstn$AppshortCode   = @@{AC}@@n$account        = (@@{Service_Account.username}@@ -split )[1]n$oupath         = @@{MGT.ServerOU}@@n$secpass        = @@{Service_Account.secret}@@  ConvertTo-SecureString -AsPlainText -forcen$DomainUsername = @@{DomainInstallUser.username}@@;n$DomainPassword = @@{DomainInstallUser.secret}@@;n$serviceaccuser = @@{Service_Account.username}@@n$serviceaccpass = @@{Service_Account.secret}@@n$NewName        = $($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@n$WindowsDomain  = @@{WindowsDomain}@@nnn##Functions SecondnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultDomain,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            Set-ItemProperty $RegPath DefaultDomainName -Value $DefaultDomain -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}n## Logic Lastnnwrite Setting timezonenset-timezone -id W. Europe Standard Timennwrite Setting up powerschemenpowercfg SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0npowercfg SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0nnnwrite Creating Local Service AccountnNew-LocalUser $account -Password $secpass -FullName $accountnAdd-LocalGroupMember -Group Administrators -Member $($envcomputername)$($account)nnwrite Renaming Servernrename-Computer -NewName $NewName -force -confirm0nnwrite Joining Servern$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;n$credential = New-Object System.Management.Automation.PSCredential($($WindowsDomain)$($DomainUsername),$Securepass);nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupathnnwrite Setting Autologon to service accountnn$username = ($serviceaccuser -split )[1]nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999nNew-ItemProperty -Path HKLMSoftwareMicrosoftWindowsCurrentVersionpoliciessystem -Name EnableLUA -PropertyType DWord -Value 0 -ForcenSet-Item WSManlocalhostClientTrustedHosts -Value '' -force,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 180
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Adding 4 Disks,
							state ACTIVE,
							attrs {
								exit_status [],
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction REST-Query-StorageContainers {n  Param (n    [string] $Cluster_IP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($Cluster_IP)9440PrismGatewayservicesrestv2.0storage_containersnn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Add-New-VMDisk {n  Param (n    [string] $Cluster_IP,n    [string] $clpassword,n    [string] $clusername,n    [string] $size,n    [string] $ContainerUUID,n    [string] $SCSIIndex,n    [string] $VMUUIDn  )n  if ($silent -eq 0){nn    write-log -message Debug level is $debug;n    write-log -message Building Credential objectnn  } n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -eq 0){nn    write-log -message Create New Disk JSON for Container $($ContainerUUID), with size $($Size) for VM $($VMUUID) on index $SCSIIndexnn  }n  $URL = https$($Cluster_IP)9440PrismGatewayservicesrestv2.0vms$($VMUUID)disksattachn  $json = @n  {n    vm_disks [{n      is_cdrom false,n      disk_address {n        device_bus scsi,n        device_index $SCSIIndexn      },n      vm_disk_create {n        storage_container_uuid $($ContainerUUID),n        size $($Size)n      }n    }]n  }n@n  try {n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }catch{nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }n  Return $taskn}n## Logic nwrite-log -message Finding VMnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnn[array]$vm = $VMS.entities  where {$_.vmname -eq $vmname}nnif ($VM){n  write-log -message Using VM with UUID $($vm.uuid)  n}nn$500GB = 536870912000nnsleep 10nwrite-log -message Adding Drive Mnn$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 2n$driveletter = Mn$driveletter = $driveletter.Substring(0,$driveletter.Length-1)n$count = 0ndo {n  $count ++n  sleep 20n  $Disk = Get-disk where {$_.operationalstatus -ne Online} n} until ($Count -ge 5 -or $disk)nif ($disk){n  $delay = $count  20nn  write-log -message Found Prism Disk after $delay secondsnn  $disk  select -first 1  Initialize-Disk -PartitionStyle GPT -PassThru -ea0  New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName SQL Data  Format-Volume -FileSystem NTFS -NewFileSystemLabel SQL Data -Confirm$false -ea0n} else {nn  write-log -message There is no disk after 1 minutenn}nwrite-log -message Adding Drive Nnn$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 3n$driveletter = Nn$driveletter = $driveletter.Substring(0,$driveletter.Length-1)n$count = 0ndo {n  $count ++n  sleep 20n  $Disk = Get-disk where {$_.operationalstatus -ne Online} n} until ($Count -ge 5 -or $disk)nif ($disk){n  $delay = $count  20nn  write-log -message Found Prism Disk after $delay secondsnn  $disk  select -first 1  Initialize-Disk -PartitionStyle GPT -PassThru -ea0  New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName SQL Log  Format-Volume -FileSystem NTFS -NewFileSystemLabel SQL Log -Confirm$false -ea0n} else {nn  write-log -message There is no disk after 1 minutenn}nnwrite-log -message Adding Drive Tnn$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 4n$driveletter = Tn$driveletter = $driveletter.Substring(0,$driveletter.Length-1)n$count = 0ndo {n  $count ++n  sleep 20n  $Disk = Get-disk where {$_.operationalstatus -ne Online} n} until ($Count -ge 5 -or $disk)nif ($disk){n  $delay = $count  20nn  write-log -message Found Prism Disk after $delay secondsnn  $disk  select -first 1  Initialize-Disk -PartitionStyle GPT -PassThru -ea0  New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName SQL Temp  Format-Volume -FileSystem NTFS -NewFileSystemLabel SQL Temp -Confirm$false -ea0n} else {nn  write-log -message There is no disk after 1 minutenn}nnwrite-log -message Adding Drive Rn$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 5n$driveletter = Rn$driveletter = $driveletter.Substring(0,$driveletter.Length-1)n$count = 0ndo {n  $count ++n  sleep 20n  $Disk = Get-disk where {$_.operationalstatus -ne Online} n} until ($Count -ge 5 -or $disk)nif ($disk){n  $delay = $count  20nn  write-log -message Found Prism Disk after $delay secondsnn  $disk  select -first 1  Initialize-Disk -PartitionStyle GPT -PassThru -ea0  New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName SQL Backup  Format-Volume -FileSystem NTFS -NewFileSystemLabel SQL Backup -Confirm$false -ea0n} else {nn  write-log -message There is no disk after 1 minutenn}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install SQL 2017,
							state ACTIVE,
							attrs {
								exit_status [],
								script $WindowsDomain          = @@{WindowsDomain}@@n$ServiceAccount         = @@{Service_Account.username}@@        n$servicePassword        = @@{Service_Account.secret}@@nnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnnnFunction PSR-Install-SQL {n  param (n    [string]$serviceaccount,n    [string]$servicepassword,n    [string]$WindowsDomainn  )nn  write-log -message Creating script;n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript cwindowstempSQLNTNX.log'n  [ARRAY]$OUTPUT += [STRING]'choco install sql-server-2017 --ignore-checksums -y --params=' + ' + 'SQLSYSADMINACCOUNTS@@{WindowsDomain}@@Domain Admins' + '+ ''n  n  write-log -message Creating Task;nn  $OUTPUT  OUT-FILE CwindowstempSQL.ps1n  $argumentList = -file CWindowsTempSQL.ps1n  $jobname = PowerShell SQL Install;n  $username = ($serviceaccount -split )[1]n  $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  $SecurePassword = $servicepassword  ConvertTo-SecureString -AsPlainText -Forcen  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePasswordn  $CredPassword = $Credentials.GetNetworkCredential().Password n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $($WindowsDomain)$($username) -Password $CredPasswordn  # n  Get-ScheduledTask $jobname  start-scheduledtaskn  n  do {n    sleep 40n    $count++n    $state = (Get-ScheduledTask $jobname).staten    write-log Task is $staten  } until ($Count -ge 20 -or $state -eq ready)n  $status = Successnn  write-log -message All Done here, SQL Done;n  get-content cwindowstempSQLNTNX.lognn  $resultobject =@{n    Result = $statusn  };n  return $resultobjectn};nn###Logicnnwrite-log -message Installing SQL 2017 Through scheduled task.nnPSR-Install-SQL -serviceaccount $serviceaccount -servicepassword $servicepassword -WindowsDomain $WindowsDomainn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install SQL Choco,
							state ACTIVE,
							attrs {
								exit_status [],
								script start-transcript -path cwindowstempmgt.logn$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).daten$principal = New-ScheduledTaskPrincipal -UserId $envUSERDOMAIN$envUSERNAME -LogonType S4U -RunLevel Highestnn$jobname = Install_SQLMGT;n$action = New-ScheduledTaskAction -Execute powershell.exe -Argument choco install sql-server-management-studio -Y --force --ignore-checksumsn$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Forcen$task  start-scheduledtasknnndo {n  write Waiting for $jobnamen  sleep 60n  $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n} Until ($state.state -eq 3)n$task  unregister-scheduledtask -confirm0nchoco install dotnet-4.6.2 -Y --ignore-checksumsnchoco install KB2919355 -y --ignore-checksumsnchoco install KB2919442 -y --ignore-checksumsntry {n  choco install pswindowsupdate -y --ignore-checksumsn} catch {n  sleep 20n  choco install pswindowsupdate -y --ignore-checksumsn}ntry {n  choco install bginfo -y --ignore-checksumsn} catch {n  sleep 20n  choco install bginfo -y --ignore-checksumsn}ntry {n  choco install googlechrome -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install googlechrome -y --ignore-checksumsn}ntry {n  choco install 7zip.install -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install 7zip.install -y --ignore-checksumsn}nsleep 20n$bgInfoRegPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunn$bgInfoRegkey = BgInfon$bgInfoRegType = Stringn$bgInfoRegkeyValue = CProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicpromptnnNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValuenwrite 'cProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpbginfo.cmd -Encoding ASCIInCProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt nwrite Rebooting after installs.nshutdown -r -t 10n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Reboot Sleep 2,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 140
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name SQL Server Config,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnnn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic nnwrite-log -message Installing SQL AssemblynnInstall-PackageProvider NuGet -ForcenImport-PackageProvider NuGet -ForcenInstall-Module -Name SqlServer -AllowClobber -confirm0 -force -ea0n[System.Reflection.Assembly]LoadWithPartialName(Microsoft.SqlServer.SMO)  Out-Nulln[System.Reflection.Assembly]LoadWithPartialName(Microsoft.SqlServer.Management.SMO.Wmi.ManagedComputer) nnwrite-log -message Loading SQL AssemblynnImport-Module SqlServern$modulePath = Split-Path -Path (Get-Module SqlServer).Path -ParentnImport-Module $modulePathMicrosoft.SqlServer.SqlWmiManagement.dllnnwrite-log -message Open TCP SQL Connectionsnn$smo = 'Microsoft.SqlServer.Management.Smo.'  n$wmi = new-object ($smo + 'Wmi.ManagedComputer').  n n$uri = ManagedComputer[@Name='$envcomputername'] ServerInstance[@Name='MSSQLSERVER']ServerProtocol[@Name='Tcp']  n$Tcp = $wmi.GetSmoObject($uri)  n$Tcp.IsEnabled = $true  n$Tcp.Alter()  nn$uri = ManagedComputer[@Name='$envcomputername'] ServerInstance[@Name='MSSQLSERVER']ServerProtocol[@Name='Np']  n$Np = $wmi.GetSmoObject($uri)  n$Np.IsEnabled = $true  n$Np.Alter()  nnwrite-log -message Change Temp DBnn$Dir = TSQL-Tempnwrite-log -message Creating $($Dir)nmkdir $Dirnn$NewTempDBLoc = TSQL-Temptempdb.mdfn$NewTemplogLoc = TSQL-Temptemplog.ldfn# End Data entry sectionn#n$TempDB = N' + $NewTempDBLoc + ' # This format is needed for Invoke-SQLCMDn$TempLog = N' + $NewTempLogLoc + 'n$Loc = Get-Locationn$Date = Get-Date -format yyyyMMdd_hhmmssttn$logfile = $Loc.path + Move-Temp_ + $Date + .txtnn# Import-Module SQLPS # See notes..nnwrite-log -message Modifying Temp DB and Log location..nnInvoke-SQLCMD -Query USE [master]nInvoke-SQLCMD -Query ALTER DATABASE TempDB MODIFY FILE (NAME = tempdev, FILENAME = $TempDB ) nInvoke-SQLCMD -Query ALTER DATABASE TempDB MODIFY FILE (NAME = templog, FILENAME = $TempLog) nSet-Location -Path ($logfile.Split()[0] + )nnwrite-log -message Changing Default Database Locationsnn$DataRegKeyPath = HKLMSoftwareMicrosoftMicrosoft SQL ServerMSSQL14.MSSQLSERVERMSSQLServern$DataRegKeyName = DefaultDatan$DataDirectory = MSQL-DatannNew-ItemProperty -Path $DataRegKeyPath -Name $DataRegKeyName -PropertyType String -Value $DataDirectorynn$Dir = MSQL-Datanwrite-log -message Creating $($Dir)nmkdir $Dirn n$LogRegKeyPath = HKLMSoftwareMicrosoftMicrosoft SQL ServerMSSQL14.MSSQLSERVERMSSQLServern$LogRegKeyName = DefaultLogn$LogDirectory = NSQL-LognnNew-ItemProperty -Path $LogRegKeyPath -Name $LogRegKeyName -PropertyType String -Value $LogDirectorynn$Dir = NSQL-Lognwrite-log -message Creating $($Dir)nmkdir $Dirnn$BackupRegKeyPath = HKLMSoftwareMicrosoftMicrosoft SQL ServerMSSQL14.MSSQLSERVERMSSQLServern$BackupRegKeyName = BackupDirectoryn$BackupDirectory = RSQL-BackupnIf ((Get-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -ErrorAction SilentlyContinue) -eq $null) {n  New-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -PropertyType String -Value $BackupDirectoryn} Else {n  Set-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -Value $BackupDirectoryn}nn$Dir = RSQL-Backupnwrite-log -message Creating $($Dir)nmkdir $Dirnnwrite-log -message Adding Domain Admins to Instance.nn$cn2= new-object System.Data.SqlClient.SqlConnection server=$($envcomputername);database=master;Integrated Security=sspin$cn2.Open()n$sql2 = $cn2.CreateCommand()n$sql2.CommandText = @nn  EXEC master..sp_addsrvrolemember @loginame = N'$($envuserdomain)Domain Admins', @rolename = N'sysadmin'nn@nn $rdr2 = $sql2.ExecuteReader()n $cn2.Close()nnnnnwrite-log -message Restaring SQL Service.. nnRestart-Service -Force MSSQLSERVER,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Change CDRom Drive to Z,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn# No variables required.nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Change CD Drive to Znn$cd = $NULLn$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $envCOMPUTERNAME -ErrorAction StopnSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter DriveLetter = '$($cd.drive)' ) -Arguments @{DriveLetter='Z'}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Grab Instance Name,
							state ACTIVE,
							attrs {
								exit_status [],
								script $SQLInstances = (Get-ItemProperty 'HKLMSOFTWAREMicrosoftMicrosoft SQL Server').InstalledInstancesnforeach ($sql in $SQLInstances){n  write InstanceName=$($envComputerName)$($sql)n}nnget-service SQLBrowser  start-service -ea0n$error.clear(),
								eval_variables [InstanceName],
								eval_scope local,
								script_type npsscript,
								type ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type SET_VARIABLE,
							variable_list []
						}],
						description ,
						name 5f9e4cab_runbook_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d2d318a8_dag_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install SQL
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name 728c8c5c_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 4d024299_runbook_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 728c8c5c_dag_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name XAS
				}],
				name Install XenApp Servers,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install XenApp Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Choco
							}, {
								kind app_task,
								name OS Config
							}, {
								kind app_task,
								name Wait for Login
							}, {
								kind app_task,
								name Install Choco XAS Apps
							}, {
								kind app_task,
								name Install Citrix Prerequisites
							}, {
								kind app_task,
								name Wait for reboot
							}, {
								kind app_task,
								name Change CD Drive to Z
							}, {
								kind app_task,
								name VCRedist
							}, {
								kind app_task,
								name Wait for VCRedist Reboot
							}, {
								kind app_task,
								name Download and Install Hix
							}],
							name d2d318a8_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Choco
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Choco XAS Apps
									}
								}, {
									from_task_reference {
										kind app_task,
										name OS Config
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install Citrix Prerequisites
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for reboot
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install Choco XAS Apps
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Citrix Prerequisites
									}
								}, {
									from_task_reference {
										kind app_task,
										name VCRedist
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for VCRedist Reboot
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for reboot
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Change CD Drive to Z
									}
								}, {
									from_task_reference {
										kind app_task,
										name Change CD Drive to Z
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name VCRedist
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for VCRedist Reboot
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Download and Install Hix
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco,
							state ACTIVE,
							attrs {
								exit_status [],
								script sleep 20n$ChocoPackagesURL      = @@{ChocoPackagesURL}@@n$ChocoClientPackageURL = @@{ChocoClientPackageURL}@@nn$localChocolateyPackageFilePath = cwindowstempnn$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea0nif ($localChocolateyPackageFilePathExists){nn  write Removing Client dirnn  remove-item $localChocolateyPackageFilePath -recurse -force -confirm0 -ea0n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n} else {n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n}nn$PkgDir = CPackagesn$PkgDirexists = get-item $PkgDir -ea0nif ($PkgDirexists){nn  write Removing Package dirnn  remove-item $PkgDir -recurse -force -confirm0 -ea0n} nmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $ChocoClientPackageURLnn$filename = $ChocoClientPackageURL -split   select -last 1n$output = $($localChocolateyPackageFilePath)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoClientPackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($localChocolateyPackageFilePath)$($filename) -DestinationPath $localChocolateyPackageFilePathnn$Toolspath = $($localChocolateyPackageFilePath)Toolsncd $toolspathn$PSFile = $($Toolspath)chocolateyInstall.ps1n& $PSFilennwrite Downloading Packagesnwrite Using URL $ChocoPackagesURLnn$filename = $ChocoPackagesURL -split   select -last 1n$output = $($PkgDir)$($filename)n$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoPackagesURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnchoco source remove --name='chocolatey'nchoco source add --name='local' --source='cpackages'nchoco upgrade chocolatey -ynwrite Rebooting ServernShutdown -r -t 15 -f,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name OS Config,
							state ACTIVE,
							attrs {
								exit_status [],
								script sleep 10n##Vars Firstn$AppshortCode   = @@{AC}@@n$account        = (@@{Service_Account.username}@@ -split )[1]n$oupath         = @@{MGT.ServerOU}@@n$secpass        = @@{Service_Account.secret}@@  ConvertTo-SecureString -AsPlainText -forcen$DomainUsername = @@{DomainInstallUser.username}@@;n$DomainPassword = @@{DomainInstallUser.secret}@@;n$serviceaccuser = @@{Service_Account.username}@@n$serviceaccpass = @@{Service_Account.secret}@@n$NewName        = $($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@n$WindowsDomain  = @@{WindowsDomain}@@nnn##Functions SecondnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultDomain,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            Set-ItemProperty $RegPath DefaultDomainName -Value $DefaultDomain -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}n## Logic Lastnwrite Setting timezonenset-timezone -id W. Europe Standard Timennwrite Setting up Power Schemenpowercfg SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0npowercfg SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0nnwrite Creating Local Service AccountnNew-LocalUser $account -Password $secpass -FullName $accountnAdd-LocalGroupMember -Group Administrators -Member $($envcomputername)$($account)nnwrite Renaming Servernrename-Computer -NewName $NewName -force -confirm0nnwrite Joining Servern$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;n$credential = New-Object System.Management.Automation.PSCredential($($WindowsDomain)$($DomainUsername),$Securepass);nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupathnnwrite Setting Autologon to service accountnn$username = ($serviceaccuser -split )[1]nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999nNew-ItemProperty -Path HKLMSoftwareMicrosoftWindowsCurrentVersionpoliciessystem -Name EnableLUA -PropertyType DWord -Value 0 -ForcenSet-Item WSManlocalhostClientTrustedHosts -Value '' -force,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco XAS Apps,
							state ACTIVE,
							attrs {
								exit_status [],
								script try {n  choco install googlechrome -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install googlechrome -y --ignore-checksumsn}ntry {n  choco install 7zip.install -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install 7zip.install -y --ignore-checksumsn}ntry {n  choco install Office365Business -y -ignorechecksumsn} catch {n  sleep (get-random 0,45)n  choco install Office365Business -y -ignorechecksumsn}ntry {n  choco install adobereader -y  --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install adobereader -y --ignore-checksumsn}ntry {n  choco install pswindowsupdate -y --ignore-checksumsn} catch {n  sleep 20n  choco install pswindowsupdate -y --ignore-checksumsn}ntry {n  choco install firefox -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install firefox -y --ignore-checksumsn}ntry {n  choco install dropbox -y --ignore-checksums n} catch {n  sleep (get-random 0,45)n  choco install dropbox -y --ignore-checksums n}ntry {n  choco install whatsapp -y --ignore-checksums n} catch {n  sleep (get-random 0,45)n  choco install whatsapp -y --ignore-checksums n}ntry {n  choco install dotnet4.7.2 -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install dotnet4.7.2 -y --ignore-checksumsn}ntry {n  choco install zoom -y --ignore-checksums n} catch {n  sleep (get-random 0,45)n  choco install zoom -y --ignore-checksums n}ntry {n  choco install slack -y --ignore-checksums n} catch {n  sleep (get-random 0,45)n  choco install slack -y --ignore-checksums n}ntry {n  choco install citrix-workspace -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install citrix-workspace -y --ignore-checksums n}ntry {n  choco install bginfo -y --ignore-checksumsn} catch {n  sleep 20n  choco install bginfo -y --ignore-checksumsn} nsleep 20n$bgInfoRegPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunn$bgInfoRegkey = BgInfon$bgInfoRegType = Stringn$bgInfoRegkeyValue = CProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicpromptnnNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValuennCProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt nwrite 'cProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpbginfo.cmd -Encoding ASCIIn ,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Citrix Prerequisites,
							state ACTIVE,
							attrs {
								exit_status [],
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@n$ServiceAccount         = @@{Service_Account.username}@@        n$servicePassword        = @@{Service_Account.secret}@@nnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Unmount-CDRom {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuid,n    [object] $cdromn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuidnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty truen  }]n}n@ n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM Unmounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn}nnFunction REST-Get-Image-Sizes {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($PEClusterIP)9440apinutanixv0.8imagesincludeVmDiskSizes=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Mount-CDRom-Image {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $VMuuid,n    [object] $cdrom,n    [object] $Imagen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Mounting CD for VM with ID $VMuuidn  write-log -message Using ISO $($Image.Name)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($VMuuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty false,n    vm_disk_clone {n      disk_address {n        vmdisk_uuid $($Image.vmDiskId)n      },n      minimum_size $($Image.vmDiskSize)n    }n  }]n}n@n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM mounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn} nn### Logicnnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnn[array]$vm = $VMS.entities  where {$_.vmname -eq $vmname}nnif ($vm.count -gt 1){n    write-log VMs are not clean, same machine exists twice -sev ERRORn    breakn}nnwrite-log -message Getting VM Disk Detail for $($vm.uuid) using $VMIPnn$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidnnwrite-log -message Finding CDROMn  n$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message CDROM is not Empty, eject captain.nn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidn$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message Unmounting Whatever is in there nownn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}nn$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1n$imageobj = $images.entities  where {$_.name -eq $CitrixImageName}nnwrite-log -message Mounting Image $($imageobj.vmdiskid)nnREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobjnnWrite-log -message Setting Vars.nn$base = CProgramDataMicrosoftWindowsStart MenuProgramsn$target2 = cUsersPublicDesktopnnWrite-log -message Copy Root Shortcuts to $target2nncopy $($base).lnk $target2nn$items = get-childitem $base.lnknforeach ($item in $items){n  write $item.FullNamen  copy $item.FullName $target2n   #Pin-Shortcut -target $item.FullNamen}nnWrite-log -message Copy 7Zip Shortcuts to $target2nncopy $($base)7-Zip7-Zip File Manager.lnk $target2nnWrite-log -message Copy DropBox Shortcuts to $target2nncopy $($base)DropboxDropbox.lnk $target2nnWrite-log -message Copy Slack Shortcuts to $target2nncopy $($base)Slack TechnologiesSlack.lnk $target2nnWrite-log -message Copy Zoom Shortcuts to $target2nncopy $($base)ZoomZoom.lnk $target2nnwrite-log -message Installing Citrix Prerequisitesnnwrite-log -message Install C++ libarariesn#n#DSupportVcRedist_2013_RTMvcredist_x86.exe -quietn#DSupportVcRedist_2015vc_redist.x86.exe -quietnnwrite-log -message Adding RDS Windows FeaturesnnImport-Module ServerManagernAdd-WindowsFeature -Name Remote-Assistance,Remote-Desktop-Services,RDS-RD-Server -Restart,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for reboot,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Change CD Drive to Z,
							state ACTIVE,
							attrs {
								script ### Variablesnn# No variables required.nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Change CD Drive to Znn$cd = $NULLn$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $envCOMPUTERNAME -ErrorAction StopnSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter DriveLetter = '$($cd.drive)' ) -Arguments @{DriveLetter='Z'}n,
								type ,
								command_line_args ,
								exit_status [],
								script_type npsscript
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name VCRedist,
							state ACTIVE,
							attrs {
								exit_status [],
								script DSupportVcRedist_2013_RTMvcredist_x86.exe -quietnDSupportVcRedist_2015vc_redist.x86.exe -quietnshutdown -r -t 10,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for VCRedist Reboot,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 180
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Download and Install Hix,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn$HixPackageURL    = @@{HixPackageURL}@@n$AppshortCode     = @@{AC}@@n$AppLongCode      = @@{AppLongCode}@@n$Tier             = @@{Tier}@@n$customercode     = @@{CustomerName}@@n$HixDBServer      = $($AppshortCode)-$($tier)-$($CustomerCode)-SQL1           n$HixTargetDBName  = $($AppLongCode)_$($Tier)nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic n$Maincount = 0ndo {n  $maincount ++n  write-log -message Download Hix Sofwaren  n  $PkgDir = cHixnn  mkdir $PkgDirn  n  write Downloading Hixn  write Using URL $PackageURLn  n  $filename = $HixPackageURL -split   select -last 1n  $output = $($PkgDir)$($filename)nn  $count = 0n  do {n    $count ++n    try {n      $wc = New-Object net.webclientn      $wc.Downloadfile($HixPackageURL, $output)n      $failed = 0n    } catch {n      sleep 15n      $failed = 1n    }n  } until ($count -ge 4 -or $failed -eq 0)n  n  Expand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirn  $item = get-item $($PkgDir).msin} until ($maincount -ge 5 -or $item)nnnwrite-log -message Creating Hixnmkdir CHiX -ea0nwrite-log -message Creating HixBasenmkdir CHiXBase -ea0nwrite-log -message Creating HixAppsnmkdir CHiXApps -ea0nwrite-log -message Creating HixEnvnmkdir CHiXEnv -ea0n$error.clear()nnnmsiexec i cHixChipSoft.6.2.msi HIXFOLDER=CHiXBase APPSRVFOLDER=CHixApps HIXENVFOLDER=CHixEnv ADDLOCAL=Base,HiX,HiXHelp qnnnwrite-log -message Waiting for MSI Installernsleep 180nn$WshShell = New-Object -comObject WScript.Shelln$Shortcut = $WshShell.CreateShortcut(cUsersPublicDesktopChipSoft.HiX.lnk)n$Shortcut.TargetPath = CHiXBaseChipSoft.HiX.exen$Shortcut.Save()nn$Inifile = CHiXBasedd.ininwrite '[Nutanix 1-click-Demo]'  out-file $Inifilenwrite 'OMSCHRIJVING=Nutanix 1-click-Demo'  out-file $Inifile -appendnwrite 'TYPE=ADO'  out-file $Inifile -appendnwrite UDL=server=$($HixDBServer);database=$($HixTargetDBName);Integrated Security=SSPI  out-file $Inifile -appendnnnn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 5f9e4cab_runbook_cloned_2,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d2d318a8_dag_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install XenApp Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name 728c8c5c_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 4d024299_runbook_cloned_2,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 728c8c5c_dag_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name XBS
				}],
				name Install Xen Backend Servers,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install Xen Backend Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name OS Config
							}, {
								kind app_task,
								name Install Choco and RSAT
							}, {
								kind app_task,
								name Wait for Login
							}, {
								kind app_task,
								name Install Apps for XBS
							}, {
								kind app_task,
								name Reboot Sleep
							}, {
								kind app_task,
								name Install Citrix Roles
							}, {
								kind app_task,
								name Wait For Citrix Install
							}, {
								kind app_task,
								name Change CD Drive to Z
							}, {
								kind app_task,
								name Setup XenDesktop Core
							}],
							name d2d318a8_dag_cloned_1_cloned_1,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Choco and RSAT
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install Citrix Roles
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait For Citrix Install
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Login
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Apps for XBS
									}
								}, {
									from_task_reference {
										kind app_task,
										name OS Config
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Login
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait For Citrix Install
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Setup XenDesktop Core
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait For Citrix Install
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Setup XenDesktop Core
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait For Citrix Install
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Change CD Drive to Z
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install Apps for XBS
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Reboot Sleep
									}
								}, {
									from_task_reference {
										kind app_task,
										name Reboot Sleep
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Citrix Roles
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name OS Config,
							state ACTIVE,
							attrs {
								exit_status [],
								script ##Vars Firstn$AppshortCode   = @@{AC}@@n$account        = (@@{Service_Account.username}@@ -split )[1]n$oupath         = @@{MGT.ServerOU}@@n$secpass        = @@{Service_Account.secret}@@  ConvertTo-SecureString -AsPlainText -forcen$DomainUsername = @@{DomainInstallUser.username}@@;n$DomainPassword = @@{DomainInstallUser.secret}@@;n$serviceaccuser = @@{Service_Account.username}@@n$serviceaccpass = @@{Service_Account.secret}@@n$NewName        = $($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@n$WindowsDomain  = @@{WindowsDomain}@@nnn##Functions SecondnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultDomain,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            Set-ItemProperty $RegPath DefaultDomainName -Value $DefaultDomain -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}n## Logic Lastnwrite Setting timezonenset-timezone -id W. Europe Standard Timennwrite Setting up Power Schemenpowercfg SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0npowercfg SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0nnwrite Creating Local Service AccountnNew-LocalUser $account -Password $secpass -FullName $accountnAdd-LocalGroupMember -Group Administrators -Member $($envcomputername)$($account)nnwrite Renaming Servernrename-Computer -NewName $NewName -force -confirm0nnwrite Joining Servern$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;n$credential = New-Object System.Management.Automation.PSCredential($($WindowsDomain)$($DomainUsername),$Securepass);nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupathnnwrite Setting Autologon to service accountnn$username = ($serviceaccuser -split )[1]nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999nNew-ItemProperty -Path HKLMSoftwareMicrosoftWindowsCurrentVersionpoliciessystem -Name EnableLUA -PropertyType DWord -Value 0 -ForcenSet-Item WSManlocalhostClientTrustedHosts -Value '' -force,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco and RSAT,
							state ACTIVE,
							attrs {
								exit_status [],
								script sleep 20n$ChocoPackagesURL      = @@{ChocoPackagesURL}@@n$ChocoClientPackageURL = @@{ChocoClientPackageURL}@@nn$localChocolateyPackageFilePath = cwindowstempnn$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea0nif ($localChocolateyPackageFilePathExists){nn  write Removing Client dirnn  remove-item $localChocolateyPackageFilePath -recurse -force -confirm0 -ea0n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n} else {n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n}nn$PkgDir = CPackagesn$PkgDirexists = get-item $PkgDir -ea0nif ($PkgDirexists){nn  write Removing Package dirnn  remove-item $PkgDir -recurse -force -confirm0 -ea0n} nmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $ChocoClientPackageURLnn$filename = $ChocoClientPackageURL -split   select -last 1n$output = $($localChocolateyPackageFilePath)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoClientPackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($localChocolateyPackageFilePath)$($filename) -DestinationPath $localChocolateyPackageFilePathnn$Toolspath = $($localChocolateyPackageFilePath)Toolsncd $toolspathn$PSFile = $($Toolspath)chocolateyInstall.ps1n& $PSFilennwrite Downloading Packagesnwrite Using URL $ChocoPackagesURLnn$filename = $ChocoPackagesURL -split   select -last 1n$output = $($PkgDir)$($filename)n$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoPackagesURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnchoco source remove --name='chocolatey'nchoco source add --name='local' --source='cpackages'nchoco upgrade chocolatey -ynwrite Rebooting ServernInstall-WindowsFeature -IncludeAllSubFeature RSAT -confirm0nn nShutdown -r -t 15 -f,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name administrator
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Login,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Apps for XBS,
							state ACTIVE,
							attrs {
								exit_status [],
								script try {n  choco install googlechrome -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install googlechrome -y --ignore-checksumsn}ntry {n  choco install pswindowsupdate -y --ignore-checksumsn} catch {n  sleep 20n  choco install pswindowsupdate -y --ignore-checksumsn}ntry {n  choco install 7zip.install -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install 7zip.install -y --ignore-checksumsn}nif ($envcomputername.EndsWith(2) -or $envcomputername.EndsWith(3) ){n  try{n    choco install dotnet4.7.2 -y --ignore-checksumsn  } catch {n    sleep 20n    choco install dotnet4.7.2 -y --ignore-checksumsn  }n  try{n    choco install vcredist-all -y --ignore-checksumsn  } catch {n    sleep 20n    choco install vcredist-all -y --ignore-checksumsn  }n}ntry {n  choco install bginfo -y --ignore-checksumsn} catch {n  sleep 20n  choco install bginfo -y --ignore-checksumsn} nsleep 20n$bgInfoRegPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunn$bgInfoRegkey = BgInfon$bgInfoRegType = Stringn$bgInfoRegkeyValue = CProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicpromptnnNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValuennwrite 'cProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpbginfo.cmd -Encoding ASCIInCProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt nn n$error.clear()nshutdown -r -t 10,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Reboot Sleep,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 120
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Citrix Roles,
							state ACTIVE,
							attrs {
								exit_status [],
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@n$ServiceAccount         = @@{Service_Account.username}@@        n$servicePassword        = @@{Service_Account.secret}@@nnnnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Unmount-CDRom {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuid,n    [object] $cdromn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuidnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty truen  }]n}n@ n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM Unmounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn}nnFunction REST-Get-Image-Sizes {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($PEClusterIP)9440apinutanixv0.8imagesincludeVmDiskSizes=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Mount-CDRom-Image {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $VMuuid,n    [object] $cdrom,n    [object] $Imagen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Mounting CD for VM with ID $VMuuidn  write-log -message Using ISO $($Image.Name)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($VMuuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty false,n    vm_disk_clone {n      disk_address {n        vmdisk_uuid $($Image.vmDiskId)n      },n      minimum_size $($Image.vmDiskSize)n    }n  }]n}n@n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM mounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn} nnFunction PSR-Install-Citrix {n  param (n    [string]$serviceaccount,n    [string]$servicepassword,n    [string]$WindowsDomainn  )nn  write-log -message Creating script;n  n  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceid'n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript cwindowstempCitrixNTNX.log'n  if ($VMName.EndsWith(0)){n    [ARRAY]$OUTPUT += [STRING]'& $($driveletter)x64XenDesktop SetupXenDesktopServerSetup.exe components CONTROLLER,DESKTOPSTUDIO NOSQL quiet disableexperiencemetrics CONFIGURE_FIREWALL 'n  } elseif ($VMName.EndsWith(1)){n    [ARRAY]$OUTPUT += [STRING]'& $($driveletter)x64XenDesktop SetupXenDesktopServerSetup.exe components LICENSESERVER quiet disableexperiencemetrics CONFIGURE_FIREWALL'n  }  elseif ($VMName.EndsWith(2)){n    [ARRAY]$OUTPUT += [STRING]'& $($driveletter)x64StorefrontCitrixStoreFront-x64.exe -silent'  n  } else {n    [ARRAY]$OUTPUT += [STRING]'& $($driveletter)x64XenDesktop SetupXenDesktopServerSetup.exe components DESKTOPDIRECTOR CONFIGURE_FIREWALL'n  }n  write-log -message Creating Task;n  $username = ($serviceaccount -split )[1]n  $OUTPUT  OUT-FILE CwindowstempCitrix.ps1n  $argumentList = -file CWindowsTempCitrix.ps1n  $jobname = PowerShell Citrix Install;n  $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  $SecurePassword = $servicepassword  ConvertTo-SecureString -AsPlainText -Forcen  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePasswordn  $CredPassword = $Credentials.GetNetworkCredential().Password n  write Creating Task with User $($WindowsDomain)$($username)n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $($WindowsDomain)$($username) -Password $CredPasswordn  sleep 10n  Get-ScheduledTask $jobname -ea0  start-scheduledtaskn  n};nnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnn[array]$vm = $VMS.entities  where {$_.vmname -eq $vmname}nnif ($vm.count -gt 1){n    write-log VMs are not clean, same machine exists twice -sev ERRORn    breakn}nnnwrite-log -message Getting VM Disk Detail for $($vm.uuid) using $VMIPnn$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidnnwrite-log -message Finding CDROMn  n$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message CDROM is not Empty, eject captain.nn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidn$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message Unmounting Whatever is in there nownn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}nn$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1n$imageobj = $images.entities  where {$_.name -eq $CitrixImageName}nnwrite-log -message Mounting Image $($imageobj.vmdiskid)nnREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobjnnwrite-log -message Installing Citrix Application Suitennnif ($VMName.EndsWith(2)){nn  write-log -message Installing Storefront PreRequisitesnn  #$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  #$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).daten  #$principal = New-ScheduledTaskPrincipal -UserId $envUSERDOMAIN$envUSERNAME -LogonType S4U -RunLevel Highestn  #$script = CwindowstempIIS.ps1n  #write 'start-transcript cwindowstempiis.log'  out-file $scriptn  #write 'Get-NetAdapter  Get-NetAdapterBinding  Disable-NetAdapterBinding -ComponentID ms_tcpip6 -PassThru -ea0'  out-file $script -appendn  #write 'Install-WindowsFeature -name Web-Server -IncludeManagementTools'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -online -FeatureName WCF-TCP-PortSharing45'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Performance'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45'  out-file $script -appendn  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASP'  out-file $script -appendn  #write ''  out-file $script -appendn  #write 'Write Webserver installed'  out-file $script -appendn  #$jobname = Setup IIS;n  #$action = New-ScheduledTaskAction -Execute powershell.exe -Argument $scriptn  #$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Forcen  #$task  start-scheduledtaskn  #do {n  #  write Waiting for $jobnamen  #  sleep 60n  #  $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n  #} Until ($state.state -eq 3)n  #try {n  #  get-content 'cwindowstempiis.log'n  #} catch {n  #  $task  unregister-scheduledtask -confirm0n  #  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Forcen  #  $task  start-scheduledtaskn  #}n  #do {n  #  write Waiting for $jobnamen  #  sleep 60n  #  $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n  #} Until ($state.state -eq 3)n  n  #$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceidn  n  #write-log -message Installing CMDLetsn  #get-item $($driveletter)x64Citrix Desktop Delivery Controllerpowershell.msi  % {msiexec i $_.fullname qn;sleep 15}n  sleep 60 n} elseif ($VMName.EndsWith(0)){n  #$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceidn  n  #write-log -message Installing CMDLetsn  #get-item $($driveletter)x64Citrix Desktop Delivery Controllerpowershell.msi  % {msiexec i $_.fullname qn;sleep 15}n}nnnPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomainnn#write-log -message Ejecting Drivenn#$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidn#$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}n#if ($cdrom.is_empty -eq $false){n#  n#  write-log -message Unmounting Frame Agentn#  n#  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn#}nwrite BrokerName=$envcomputername,
								eval_variables [BrokerName],
								eval_scope local,
								script_type npsscript,
								type ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type SET_VARIABLE,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait For Citrix Install,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 600
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Change CD Drive to Z,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn# No variables required.nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Change CD Drive to Znn$cd = $NULLn$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $envCOMPUTERNAME -ErrorAction StopnSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter DriveLetter = '$($cd.drive)' ) -Arguments @{DriveLetter='Z'}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name XBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Setup XenDesktop Core,
							state ACTIVE,
							attrs {
								exit_status [],
								script nnnnnnn$AppshortCode               = @@{AC}@@n$AppLongCode                = @@{AppLongCode}@@n$VMName                     = @@{platform.status.name}@@n$WindowsDomain              = @@{WindowsDomain}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@n$group                      = $($CustomerCode)-$($tier)-Admin-Accounts-Groupn$Service_account_User       = @@{Domain_Service_Account.username}@@n$Service_account_Pass       = @@{Domain_Service_Account.secret}@@n$XenDatabaseServer          = @@{SQL.name[0]}@@n$XenLicenseServer           = $($AppshortCode)-$($tier)-$($CustomerCode)-XBS1n$VDA                        = $($AppshortCode)-$($tier)-$($CustomerCode)-XAS0n$PackageURL                 = @@{CitrixNutanixPackagesURL}@@n$Sitename                   = XD_$($AppLongCode)LABn$SFBaseURL                  = httpsSF-$($CustomerCode)-$($tier).$($WindowsDomain)                 n$XDDeliveryController1      = $($AppshortCode)-$($tier)-$($CustomerCode)-XBS0.$($WindowsDomain)n$1CD                        = @@{OneCDPresent}@@nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### Functionsnnfunction New-DomainCertificate {n  Param(  [Parameter(Position=0,Mandatory=$true)][string] $CA_HOSTFQDN,n    [Parameter(Position=1,Mandatory=$true)][string] $CA_NAME,n    [Parameter(Position=2,Mandatory=$true)][string] $CERT_NAME,n    [Parameter(Position=3,Mandatory=$true)][string] $Common_NAMEn  )nn  Write-log -message Preparing Web Server Certificate request...nn  $myServer = $envCOMPUTERNAME + . + $envUSERDNSDOMAINn  $TemplateName = WebServern  n  Remove-Item webcert.inf -ErrorAction silentlycontinue  Out-Nulln  Remove-Item webcert.req -ErrorAction silentlycontinue  Out-Nulln  n  Add-Content webcert.inf [NewRequest]`rn  Subject = `CN=$Common_NAME``rn  Exportable = TRUE`rn  RequestType = CMC`rn  FriendlyName = `$CERT_NAME``r  n  [RequestAttributes]`rn  CertificateTemplate = `$TemplateName``rn  n  . certreq -new webcert.inf webcert.req  Out-Nullnn  Write-log -message Sending Certificate Request...nn  . certreq -submit -config $CA_HOSTFQDN$CA_NAME webcert.req webcert.cer  Out-Nullnn  Write-log -message Installing Certificate for IIS SSL...nn  . certreq -accept webcert.cer  Out-Nullnn  Write-log -message Successfully installed the certificate.nn  #Cleanup Certificate Request Filesn  Remove-Item webcert.inf -ErrorAction silentlycontinue  Out-Nulln  Remove-Item webcert.req -ErrorAction silentlycontinue  Out-Nulln  Remove-Item webcert.cer -ErrorAction silentlycontinue  Out-Nulln  Remove-Item webcert.rsp -ErrorAction silentlycontinue  Out-Nullnn}nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic nnif ($envComputername -eq $($AppshortCode)-$($tier)-$($CustomerCode)-XBS0 ){nn  $secpass = $Service_account_Pass  ConvertTo-SecureString -asplaintext -force;n  $username = ($Service_account_User -split )[1]n  write-log -message Using Domain Creds $($WindowsDomain)$($username)n  $DomainCreds = New-Object System.Management.Automation.PsCredential($($WindowsDomain)$($username),$secpass);nn  Add-PSSnapin Citrix -ea0nn  write-log -message Setting up Xen Desktop on $XenDatabaseServer nn  write-log -message New SiteConfig databasen  n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName $($Sitename)_SiteConfig -DataStore Site -DatabaseCredentials $DomainCredsn  n  write-log -message New Logging databasen  n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName $($Sitename)_Logging -DataStore Logging -DatabaseCredentials $DomainCredsn  n  write-log -message New Monitoring databasen  n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName $($Sitename)_Monitoring -DataStore Monitor -DatabaseCredentials $DomainCredsnn  write-log -message  Creating new XenDesktop Sitenn  New-XDSite -SiteName $Sitename -SiteDatabaseServer $XenDatabaseServer -SiteDatabaseName $($Sitename)_SiteConfig -LoggingDatabaseServer $XenDatabaseServer -LoggingDatabaseName $($Sitename)_Logging -MonitorDatabaseServer $XenDatabaseServer -MonitorDatabaseName $($Sitename)_Monitoringnn  write-log -message  Adding Admins group $group in $($WindowsDomain)nn  New-AdminAdministrator $($WindowsDomain)$($group)nn  Add-AdminRight -Administrator $($WindowsDomain)$($group) -Role Full Administrator -Scope Allnn  write-log -message  Setup Licensing servernn  Set-XDLicensing -LicenseServerAddress $XenLicenseServer -LicenseServerPort 27000 -ProductCode XDT -ProductEdition PLT -Forcenn  write-log -message  Config Licensing server nn  $CertHash = (Get-LicCertificate -AdminAddress https$($XenLicenseServer).$($WindowsDomain)8083).CertHashnn  Set-ConfigSiteMetadata -Name CertificateHash -Value $CertHashnn  write-log -message  Disable Analyticsnn  Set-AnalyticsSite -Enabled $falsenn  write-log -message  Enable XML Portnn  Set-BrokerSite -TrustRequestsSentToTheXmlServicePort $truenn  #write-log -message Setup Broker Catalognn  #New-BrokerCatalog  -Name HIX 2016 -Description OS W2K16 -AllocationType Random -IsRemotePC $False -MachinesArePhysical $False -MinimumFunctionalLevel L7_9  -PersistUserChanges OnLocal -ProvisioningType MCS  -SessionSupport MultiSession nn  write-log -message Install Nutanix Connectornn  $PkgDir = CNutanixnn  mkdir $PkgDirn  n  write Downloading Packagesn  write Using URL $PackageURLn  n  $filename = $PackageURL -split   select -last 1n  $output = $($PkgDir)$($filename)n  n  $count = 0n  do {n    $count ++n    try {n      $wc = New-Object net.webclientn      $wc.Downloadfile($PackageURL, $output)n      $failed = 0n    } catch {n      sleep 15n      $failed = 1n    }n  } until ($count -ge 4 -or $failed -eq 0)nn  Expand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnn  $items = get-item cnutanix.msinn #msiexec.exe NutanixAHV_Citrix_Director_Plugin_Installer.msi qnn #sleep 90n msiexec.exe i cnutanixNutanixAHV_Citrix_Plugin.msi ALLUSERS=1 ISCITRIXMCSINSTALL=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 PLUGININSTALLPATH=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 INSTALLFOLDER=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0NutanixAcropolis PVSINSTALLFOLDER=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0NutanixAHV REGISTERPLUGINSTOREPATH=CProgra~!Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 ADDLOCAL=F7_9_INSTALLFOLDER qnnn sleep 90n} elseif ($envComputername -eq $($AppshortCode)-$($tier)-$($CustomerCode)-XBS2 ){n  write-log -message Setting up IIS_IUSRS rights for storefront ASP errorn  $path = CWindowsTempn  $acl = Get-Acl $pathnn  $rules = $acl.access  Where-Object { n    n    $_.IdentityReference -eq BUILTINIIS_IUSRS n  }n  ForEach($rule in $rules) {n    $acl.RemoveAccessRule($rule)  Out-Nulln  }n  Set-ACL -Path $path -AclObject $aclnn  $permission = Everyone,FullControl,Allown  $rule = New-Object System.Security.AccessControl.FileSystemAccessRule $permissionn  $acl.SetAccessRule($rule)  n  $acl  Set-Acl $pathnn  $StoreFriendlyName = $Sitenamen  $XDFarmName = $Sitenamen  n  write-log -message Installing CMDLetsn  n  #get-item Zx64Citrix Desktop Delivery Controllerpowershell.msi  % {msiexec i $_.fullname qn;sleep 15}n  n# Pre-defined variablesn  . CProgram FilesCitrixReceiver StoreFrontScriptsImportModules.ps1 n  n  write-log -message Setting Varsn  $SiteID = 1n  $AuthenticationVirtualPath = CitrixAuthenticationn  $StoreFriendlyNameWithoutSpaces = $StoreFriendlyName -replace 's',''n  $StoreFriendlyNameWithoutSpacesWeb = $StoreFriendlyNameWithoutSpaces + Webn  $StoreVirtualPath = Citrix + $StoreFriendlyName -replace 's',''n  $StoreVirtualPathWeb = $StoreVirtualPath + Webn  $StoreURL = $SFBaseURL + Citrix + $StoreFriendlyNameWithoutSpacesn  $FarmType = XenDesktopn  $Port = 80n  $TransportType = HTTPn  $ServicePort = 80n  $SslRelayPort = 443n  $RedirectFile = SFRedirect.htmln  $RedirectPath = Cinetpubwwwrootn  $RedirectPage = $RedirectPath + $Redirectfilen  n  write-log -message Create initial store (will be deleted after creation of the definitive store)nn  set-dsinitialconfiguration -hostbaseurl $SFBaseURL `n    -farmname $XDFarmName `n    -port 80 `n    -transporttype HTTP `n    -sslrelayport 443 `n    -Servers @($XDDeliveryController1) `n    -loadbalance $false `n    -farmtype XenDesktop `n    -storevirtualpath CitrixTEMP `n    -webreceivervirtualpath CitrixTEMPWebnn  write-log -message Create StoreFront store with one defined XenDesktop Delivery Controllern  n  $AuthSummary = Get-DSAuthenticationServicesSummary -SiteID $SiteIDn  n  Install-DSStoreServiceAndConfigure -SiteID $SiteID `n    -FriendlyName $StoreFriendlyName `n    -VirtualPath $StoreVirtualPath `n    -AuthSummary $AuthSummary `n    -FarmName $XDFarmName `n    -FarmType $FarmType `n    -Servers @($XDDeliveryController1) `n    -TransportType $TransportType `n    -ServicePort $ServicePort `n    -SslRelayPort $SslRelayPortn  n  Install-DSWebReceiver -FriendlyName $StoreFriendlyName `n    -SiteID 1 `n    -StoreURL $StoreURL `n    -useHttps $false `n    -VirtualPath $StoreVirtualPathWebn  n  nn  if ($SFBaseURL -like https) {nnn    $SFBaseURLShort = ($SFBaseURL -replace https,)n    n    write-log -message Using URL Stripped  $SFBaseURLShortn n    if ($1CD -eq 1){n      n      write-log -message We love 1CD, Lets Create a Domain signed certificaten      write-log -message This has to run in consolen      $output = $nulln      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).daten      $principal = New-ScheduledTaskPrincipal -UserId $envUSERDOMAIN$envUSERNAME -LogonType S4U -RunLevel Highestn      $script = CwindowstempDomainCert.ps1n      $jobname = Setup DomainCert;n      $item = get-item $script -ea0n      $error.clear()n      if ($item){n        remove-item $scriptn      }n      $item = get-item cwindowstempDomainCert.log -ea0n      $error.clear()n      if ($item){n        remove-item cwindowstempDomainCert.logn      }n      $task = Get-ScheduledTask -TaskName $jobnamen      if ( $task  ){n        $task  unregister-scheduledtask -confirm0n      }n      [array]$output += 'start-transcript cwindowstempDomainCert.log'n      [array]$output += '$AppshortCode = ' + $AppshortCode + ''n      [array]$output += '$tier = ' + $tier + ''n      [array]$output += '$WindowsDomain = ' + $WindowsDomain + ''n      [array]$output += '$CustomerCode = ' + $CustomerCode + ''n      [array]$output += '$SFBaseURLShort = ' + $SFBaseURLShort + ''n      [array]$output += 'function New-DomainCertificate {'n      [array]$output += '  Param(  [Parameter(Position=0,Mandatory=$true)][string] $CA_HOSTFQDN,'n      [array]$output += '    [Parameter(Position=1,Mandatory=$true)][string] $CA_NAME,'n      [array]$output += '    [Parameter(Position=2,Mandatory=$true)][string] $CERT_NAME,'n      [array]$output += '    [Parameter(Position=3,Mandatory=$true)][string] $Common_NAME'n      [array]$output += '  )'n      [array]$output += '  Write-log -message Preparing Web Server Certificate request...'n      [array]$output += '  $myServer = $envCOMPUTERNAME + . + $envUSERDNSDOMAIN'n      [array]$output += '  $TemplateName = WebServer'n      [array]$output += '  Remove-Item webcert.inf -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '  Remove-Item webcert.req -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '  Add-Content webcert.inf [NewRequest]`r'n      [array]$output += '  Subject = `CN=$Common_NAME``r'n      [array]$output += '  Exportable = TRUE`r'n      [array]$output += '  RequestType = CMC`r'n      [array]$output += '  FriendlyName = `$CERT_NAME``r  'n      [array]$output += '  [RequestAttributes]`r'n      [array]$output += '  CertificateTemplate = `$TemplateName``r'n      [array]$output += '  . certreq -new webcert.inf webcert.req  Out-Null'n      [array]$output += '  Write-log -message Sending Certificate Request...'n      [array]$output += '  . certreq -submit -config $CA_HOSTFQDN$CA_NAME webcert.req webcert.cer  Out-Null'n      [array]$output += '  Write-log -message Installing Certificate for IIS SSL...'n      [array]$output += '  . certreq -accept webcert.cer  Out-Null'n      [array]$output += '  Write-log -message Successfully installed the certificate.'n      [array]$output += '  #Cleanup Certificate Request Files'n      [array]$output += '  Remove-Item webcert.inf -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '  Remove-Item webcert.req -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '  Remove-Item webcert.cer -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '  Remove-Item webcert.rsp -ErrorAction silentlycontinue  Out-Null'n      [array]$output += '}'n      [array]$output += 'Function write-log {'n      [array]$output += '  param ('n      [array]$output += '  $message,'n      [array]$output += '  $sev = INFO,'n      [array]$output += '  $slacklevel = 0'n      [array]$output += '  )'n      [array]$output += '  if ($sev -eq INFO){'n      [array]$output += '    write-host $(get-date -format hhmmss)  INFO   $message'n      [array]$output += '  } elseif ($sev -eq WARN){'n      [array]$output += '    write-host $(get-date -format hhmmss)  WARN   $message'n      [array]$output += '  } elseif ($sev -eq ERROR){'n      [array]$output += '    write-host $(get-date -format hhmmss)  ERROR  $message'n      [array]$output += '  } elseif ($sev -eq CHAPTER){'n      [array]$output += '    write-host `n`n### $message`n`n'n      [array]$output += '  }'n      [array]$output += '}'n      [array]$output += 'write-log -message Installing Domain Cert'n      [array]$output += 'New-DomainCertificate -CA_HOSTFQDN DC1-$($Envuserdomain).$($WindowsDomain) -CA_NAME $($Envuserdomain) -CERT_NAME $SFBaseURLShort -Common_NAME $SFBaseURLShort'n      [array]$output += ''n      [array]$output += 'sleep 10'n      [array]$output += 'write-log -message Installing CName Record'n      [array]$output += ''n      [array]$output += 'Add-DnsServerResourceRecordCName -Name $SFBaseURLShort -HostNameAlias $($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain) -ZoneName $($WindowsDomain) -computer DC1-$($Envuserdomain).$($WindowsDomain)'n      [array]$output += ''n      [array]$output += 'sleep 10'      n      [array]$output += 'write-log -message Query CName Record for $tier'n      [array]$output += ''      n      [array]$output += 'Get-DnsServerResourceRecord -ZoneName $($envuserdomain).nutanix.local -ComputerName DC1-$($Envuserdomain).$($Envuserdomain).nutanix.local where {$_.hostname -match $Tier}'n      [array]$output += 'sleep 30'nn      $script = CwindowstempDomainCert.ps1n      $OUTPUT  OUT-FILE $scriptn      n      $action = New-ScheduledTaskAction -Execute powershell.exe -Argument $scriptn      try {n        $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;n      } catch {n        $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;n      }n      $task  start-scheduledtaskn      do {n        write Waiting for $jobnamen        sleep 20n        $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n      } Until ($state.state -eq 3)n      try {n        get-content 'cwindowstempDomainCert.log'n      } catch {n        write No log file.... -sev WARNn      }n      do {n        write Waiting for $jobnamen        sleep 20n        $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n      } Until ($state.state -eq 3)n    n    } else {nn      write-log -message Create self signed certificaten  n      $cert = New-SelfSignedCertificate -certstorelocation certlocalmachinemy -dnsname $SFBaseURLShortnn      write-log -message Trusting self...nn      $rootStore = New-Object System.Security.Cryptography.X509Certificates.X509Store -ArgumentList Root, LocalMachinen      $rootStore.Open(MaxAllowed)n      $rootStore.Add($cert)n      $rootStore.Close()nn      write-log -message This is lame and there is almost no point as the Receiver will never work on non trusted certs...nn      n    }n    write-log -message Adding DNS CName for $SFBaseURLShortn    write-log -message  Using Alias $($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain)n    write-log -message  On DC DC1-$($Envuserdomain).$($WindowsDomain)n    n    #Add-DnsServerResourceRecordCName -Name $SFBaseURLShort -HostNameAlias $($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain) -ZoneName $($WindowsDomain) -computer DC1-$($Envuserdomain).$($WindowsDomain)nn    write-log -message Get certificate thumbprintnn    $Thumbprint = (Get-ChildItem -Path CertLocalMachineMy  Where-Object {$_.Subject -match $SFBaseURLShort}).Thumbprintnn    write-log -message Create new IIS bindingnn    New-WebBinding -Name Default Web Site -IP  -Port 443 -Protocol httpsnn    write-log -message Add certiticate to IIS bindingnn    $Binding = Get-WebBinding -IPAddress  -Port 443 -Protocol httpsn    $Binding.AddSslCertificate($Thumbprint, my)nn    write-log -message Creating CName for XBS2nnn  }n  n  nnn  write-log -message Create redirect to StoreFront sitenn  Add-Content $RedirectPage script type=textjavascriptn  Add-Content $RedirectPage !--n  Add-Content $RedirectPage window.location=Citrix$StoreFriendlyNameWithoutSpacesWeb;n  Add-Content $RedirectPage  --n  Add-Content $RedirectPage scriptn  Add-WebConfiguration system.webserverdefaultdocumentfiles -atIndex 0 -Value $RedirectFilenn  write-log -message Remove initial store ----------n  #Remove-DSStore2 -SiteID 1 -VirtualPath CitrixTEMPn  $error.clear()n  n} elseif ($envComputername -eq $($AppshortCode)-$($tier)-$($CustomerCode)-XBS3 ){nn  write-log -message Setting up IIS_IUSRS rights for Director ASP errorn  $path = CWindowsTempn  $acl = Get-Acl $pathnn  $rules = $acl.access  Where-Object { n    n    $_.IdentityReference -eq BUILTINIIS_IUSRS n  }n  ForEach($rule in $rules) {n    $acl.RemoveAccessRule($rule)  Out-Nulln  }n  Set-ACL -Path $path -AclObject $acln  n  write-log -message Install Director Pluginnn  $PkgDir = CNutanixnn  mkdir $PkgDirn  n  write Downloading Packagesn  write Using URL $PackageURLn  n  $filename = $PackageURL -split   select -last 1n  $output = $($PkgDir)$($filename)n  n  $count = 0n  do {n    $count ++n    try {n      $wc = New-Object net.webclientn      $wc.Downloadfile($PackageURL, $output)n      $failed = 0n    } catch {n      sleep 15n      $failed = 1n    }n  } until ($count -ge 4 -or $failed -eq 0)nn  Expand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnn  $items = get-item cnutanix.msinn  msiexec.exe cnutanixNutanixAHV_Citrix_Director_Plugin_Installer.msi qnn  sleep 90n  #msiexec.exe i cnutanixNutanixAHV_Citrix_Plugin.msi ALLUSERS=1 ISCITRIXMCSINSTALL=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 PLUGININSTALLPATH=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 INSTALLFOLDER=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0NutanixAcropolis PVSINSTALLFOLDER=CProgra~1Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0NutanixAHV REGISTERPLUGINSTOREPATH=CProgra~!Common~1CitrixHCLPluginsCitrixMachineCreationv1.0.0.0 ADDLOCAL=F7_9_INSTALLFOLDER qnnn sleep 90n  n} else {nn  write-log -message  Xen Desktop roles do not require any configuration on this nodenn} ,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 5f9e4cab_runbook_cloned_2_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d2d318a8_dag_cloned_1_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Install Xen Backend Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name 728c8c5c_dag_cloned_1_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 4d024299_runbook_cloned_2_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 728c8c5c_dag_cloned_1_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type SUBSTRATE_IMAGE,
				service_local_reference_list [],
				name Citrix 1912,
				version ,
				options {
					type ,
					name Citrix 1912,
					resources {
						image_type ISO_IMAGE,
						checksum {
							checksum_algorithm SHA_1,
							type ,
							checksum_value 921E7BA91C5C2873D618C41B918F97ED92CA4CF6
						},
						source_uri httpsdl.dropboxusercontent.comsa0b0x99xd0k2poqCitrix_Virtual_Apps_and_Desktops_7_1912.iso,
						version {
							product_version 1912,
							type ,
							product_name Citrix
						},
						architecture X86_64,
						type 
					},
					description 
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name ConfigXBS
				}],
				name Config XenDesktop Backend Servers,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Config XenDesktop Backend Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Configure XD Final
							}],
							name 4e2145cc_dag,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigXBS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Configure XD Final,
							state ACTIVE,
							attrs {
								exit_status [],
								script n# kees@nutanix.com  mgrauwmans@nutanix.comn# @kbaggerman on Twittern# httpblog.myvirtualvision.comn# Created on March, 2019nn# Setting parameters for the connectionnn$PEAdmin                                               = @@{PC_CRED.username}@@n$PEPass                                                = @@{PC_CRED.secret}@@n$AppshortCode                                          = @@{AC}@@n$AppLongCode                                           = @@{AppLongCode}@@n$PEClusterIP                                           = @@{PEIP}@@ n$machineCount                                          = @@{XenAppServerCount}@@ n$ConnectionName                                        = Nutanix AHV # Name of the Connectorn$VlanName                                              = @@{VLanName}@@ # AutoSelect, sort alfabet (1st) Or specify the VLAN Namen$storagecontainerName                                  = @@{StorageContainerName}@@ # Name of the container to use for MCSn$Tier                                                  = @@{Tier}@@n$customercode                                          = @@{CustomerName}@@n$customerNameLong                                      = @@{CustomerNameLong}@@n$WindowsDomain                                         = @@{WindowsDomain}@@n$DomainPath                                            = DC= + (($envUSERDNSDOMAIN).split(.) -join ,DC=)n$adContainerDN                                         = OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)n$vCPU                                                  = 2n$RAM                                                   = 16384n$coresPerCPU                                           = 4n$hypConnName                                           = Nutanix AHVn$adAccountNameSpecification                            = $($AppshortCode)-$($tier)-$($CustomerCode)-XAI#n$baseImage                                             = @@{ConfigXAS.SnapshotName}@@ # Snapshot Namen$OSChoise                                              = @@{WindowsEdition}@@n$idPoolName                                            = $($OSChoise) $($AppshortCode)n$provSchemeName                                        = $($OSChoise) $($AppshortCode)n$CVADController                                        = $($AppshortCode)-$($tier)-$($CustomerCode)-XBS0 # Delivery Controller Hostn$allocType                                             = Randomn$sessionSupport                                        = MultiSessionn$persistChanges                                        = Discardn$DeliveryGroupName                                     = $($AppLongCode)-DGnn$mgmtPasswordSec = ConvertTo-SecureString $PEPass -AsPlainText -Force # Converting the Nutanix Prism password to a secure string to connect to the clusternn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn## FunctionsnnFunction write-log {n  #n   .Synopsisn   Write logs for debugging purposesn   n   .Descriptionn   This function writes logs based on the message including a time stamp for debugging purposes.n  #n  param (n  $message,n  $sev = INFOn  )n  if ($sev -eq INFO){n  write-host $(get-date -format hhmmss)  INFO  $messagen  } elseif ($sev -eq WARN){n  write-host $(get-date -format hhmmss)  WARN  $messagen  } elseif ($sev -eq ERROR){n  write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n  write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-Subnets {n  Param (n    [string] $PEClusterIP,n    [string] $PEPass,n    [string] $PEUser,n    [string] $networknamen  )nn  write-log -message Debug level is $debug;n  write-log -message Building Credential objectn  $credPair = $($PEUser)$($PEPass)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Building Subnet Query JSONnn  $URL = https$($PEClusterIP)9440apinutanixv3subnetslistn  $Payload= @{n    kind=subnetn    offset=0n    length=999n  } nn  $JSON = $Payload  convertto-jsonnn  try {n    $task = Invoke-RestMethod -Uri $URL -method post -body $JSON -ContentType 'applicationjson' -headers $headers;  n  } catch {n    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method post -body $JSON -ContentType 'applicationjson' -headers $headers;n    n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-StorageContainers {n  Param (n    [string]  $PEClusterIP,n    [string]  $PEPass,n    [string]  $PEUsern  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($PEUser)$($PEPass)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Getting all Storage Containersnn  $containerURL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0storage_containersnn  try {nn    $StorageContainer = Invoke-RestMethod -Uri $containerURL -method get -headers $headersnn    write-log -message VMCreated, getting uuidnnn  } catch {nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    sleep 60n   n    $StorageContainer = Invoke-RestMethod -Uri $containerURL -method get -headers $headersnnn  }n  return $StorageContainern} nn### Logic nnif ($envComputername -eq HX-$($tier)-$($CustomerCode)-XBS0 ){n  start-transcript -path CwindowstempXDFinal.logn  $subnets = REST-Get-Subnets -PEClusterIP $PEClusterIP -PEPass $PEPass -PEUser $PEAdminn  if ($VlanName -eq AutoSelect){nn    $network = $subnets.entities.spec.name  sort  select -first 1nn  } else {nn    $network = $subnets.entities.spec.name  where {$_ -eq $VlanName}nn  }nnn  $hostingUnitName = $network                                            # Reusing the VLAN Name as ResourceName to avoid multiple connections with the same resource definitionn   # Setting the OU for the desktopsn  n  # Grabbing the containerID from the parameter Container using REST (NO MORE CMDLETS PEOPLE)n  $containers = REST-Get-StorageContainers -PEClusterIP $PEClusterIP -PEPass $PEPass -PEUser $PEadminn  $containerinfo = $containers.entities  where {$_.name -eq $storagecontainerName }n  $ContainerId = ($Containerinfo.id.split())[2]n n  n  $connectionCustomProperties = CustomPropertiesCustomPropertiesn  $hostingCustomProperties = CustomPropertiesCustomPropertiesn  n  $provcustomProperties = @nnCustomProperties xmlns=httpschemas.citrix.com2014xdmachinecreationnn  StringProperty Name=ContainerPath Value=$containerID.containernn  StringProperty Name=vCPU Value=$vCPUnn  StringProperty Name=RAM Value=$RAMnn  StringProperty Name=CPUCores Value=$coresPerCPU            nnCustomPropertiesnn@nn  # Setting variables for the hosting connection(s)n  n  $hypRootPath = xdhypConnections+$hypConnName+n  $baseImagePath = xdhypHostingUnits + $hostingUnitName ++ $baseImage+.templaten  $networkPath1 = $hypRootPath+$network+.networkn  $networkMap = @{ 0 = XDHypHostingUnits + $hostingUnitName ++ $network+.network }n  $storagePath = $hypRootPath+$storage+.storagen  n  n  # Adding PS cmdlets for Citrixn  $loadedsnapins=(Get-PSSnapin -Registered  Select-Object name).namen  if(!($loadedsnapins.Contains(Citrix))){n   Add-PSSnapin -Name Citrix n   write-log -message Citrix cmdlets are loaded, commencing the scriptn  }n  n  if ($null -eq (Get-PSSnapin -Name Citrix -ErrorAction SilentlyContinue)){n  n    write-log -message Citrix cmdlets are not loaded, aborting the scriptn  n    breakn  }n  n  n  #region Setting up the hosting connectionn  n  $ExistinghostingConnection = Test-Path -EA Stop -Path @(XDHypConnections$ConnectionName) -AdminAddress $CVADControllern  write-log -message Checking if the hosting connection already existsn  n  #region Setting up the hosting connection for AHVn  n  n  if ($ExistinghostingConnection -eq $False){n    $Connectionuid = New-Item -ConnectionType Custom -CustomProperties  -HypervisorAddress @($PEClusterIP) -Path @(XDHypConnections$ConnectionName) -PluginId AcropolisFactory -Scope @() -SecurePassword $mgmtPasswordSec -UserName $PEAdmin -persist  Select-Object HypervisorConnectionUidn    New-BrokerHypervisorConnection -AdminAddress $CVADController -HypHypervisorConnectionUid $connectionuid.HypervisorConnectionUid  Out-Nulln      n    write-log -message Creating the hosting connection $ConnectionNamen    n    Set-HypAdminConnection -AdminAddress $CVADControllern  n    $ExistinghostingResource = Test-Path -EA Stop -Path @(XDHypHostingUnits$network) -AdminAddress $CVADControllern  n    if ($ExistinghostingResource -eq $False){n  n      New-Item -HypervisorConnectionName $ConnectionName -NetworkPath @(XDHypConnections$ConnectionName$($network).network) -Path @(XDHypHostingUnits$network) -PersonalvDiskStoragePath @() -RootPath XDHypConnections$ConnectionName -StoragePath @()  Out-Nulln        n      write-log -message Creating the resources $network for $ConnectionNamen  n    } Else {n  n      Write-log -message This VLAN is already assigned as a resource to the hosting connection, terminating the scriptn      breakn    }n  n  } Else {n  n    write-log -message This hosting connection already exists -sev WARNn  n  }n  n  #endregion Setting up the hosting connection for ESXin  n  $hypHc = get-Item -Path xdhypConnections$ConnectionName n  n  #endregion Setting up the hosting connectionn  n  #endregion Setting up the hosting connectionn  n  # Create the AdIdentity Pool n  if (!(Get-AcctIdentityPool).IdentityPoolName -eq $idPoolName){n    Try{n    n      $adAccountPool = New-AcctIdentityPool -IdentityPoolName $idPoolName -NamingScheme $adAccountNameSpecification -NamingSchemeType Numeric -Domain $WindowsDomain -OU $adContainerDNn    n      write-log -message Creating the AD account pooln    n    } Catch {n    n      write-log -message Unable to create the AD account pool -sev WARNn    n      breakn    }n  } else {nn      write-log -message ID Pool Already exists -sev WARNnn  }  n  n  # Create the Provisioning Schemen  if (!(Get-ProvScheme).ProvisioningSchemeName -eq $idPoolName){n    Try{n    n      $provScheme = New-ProvScheme -ProvisioningSchemeName $provSchemeName -HostingUnitName $hostingUnitName -MasterImageVM $baseImagePath -IdentityPoolName $idPoolName -CleanOnBoot -NetworkMapping $networkMap -CustomProperties $provcustomPropertiesn    n      write-log -message Creating the prov schemen    n    } Catch {n      n      write-log -message Unable to create the prov scheme -sev WARNn    n      breakn    }n  } else {nn      write-log -message Prov Scheme Already exists -sev WARNnn  }  n  n  n  ## Create AD accounts does not work due to double hopp, Task is required.n  n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).daten  $principal = New-ScheduledTaskPrincipal -UserId $envUSERDOMAIN$envUSERNAME -LogonType S4U -RunLevel Highestn  $script = CwindowstempAdAccount.ps1n  [array]$output += 'start-transcript cwindowstempAdAccount.log'n  [array]$output += 'Write Creating ' + $machineCount  + ' AD Accounts using single hop console trick' + ''n  [array]$output += '$adAccounts = New-AcctADAccount -IdentityPoolName '+ '' + $idPoolName + '' + ' -Count ' + '' + $machineCount + '' n  [array]$output += 'sleep 30' n  [array]$output += '$adaccounts = get-AcctADAccount ' n  [array]$output += 'write We have $($adaccounts.count) created'n  [array]$output += 'sleep 30'n  $script = CwindowstempAdAccount.ps1n  $OUTPUT  OUT-FILE $scriptn  $jobname = Setup ADaccount;n  $action = New-ScheduledTaskAction -Execute powershell.exe -Argument $scriptn  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;n  $task  start-scheduledtaskn  do {n    write Waiting for $jobnamen    sleep 20n    $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n  } Until ($state.state -eq 3)n  try {n    get-content 'cwindowstempAdAccount.log'n  } catch {n    $task  unregister-scheduledtask -confirm0n    $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;n    $task  start-scheduledtaskn  }n  do {n    write Waiting for $jobnamen    sleep 20n    $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n  } Until ($state.state -eq 3)n  #$task  unregister-scheduledtask -confirm0nnn  # Create the AD accounts and VMsnnn  [array]$adaccounts = get-AcctADAccount  n  write-log We have $($adaccounts.count)n  n  if ($adaccounts.count -ne $machinecount){n    write did we run at aln    $task  start-scheduledtaskn    sleep 20n    do {n      write Waiting for $jobnamen      sleep 20n      $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n    } Until ($state.state -eq 3)n  }n  # Integrate With Brokern  n  Try{n     write-log -message Creating Vmsn  n     $adAccounts = get-AcctADAccountn     $vms = New-ProvVm -ProvisioningSchemeName $provSchemeName -ADAccountName $adAccounts.ADAccountNamen     n  } Catch {n  n    write-log -message Unable to create the VMsn    n    Breakn  }nn  $provScheme = Get-ProvScheme -ProvisioningSchemeName $provSchemeNamen  $bhc = get-BrokerHypervisorConnection -HypHypervisorConnectionUid $hypHc.HypervisorConnectionUidn  n  # Wait for the brokeru2019s hypervisor connection to be ready before trying to use it.n  n  while (-not $bhc.IsReady) {n  n      Start-Sleep u2013s 5n  n      $bhc = Get-BrokerHypervisorConnection -HypHypervisorConnectionUid $hypHc.HypervisorConnectionUidn       write-log -message Waiting for the hypervisor connection to be readyn  n  }n  nn  Try {n    $bdc = New-BrokerCatalog -Name $provSchemeName -AllocationType $allocType -ProvisioningType MCS -ProvisioningSchemeId $provScheme.ProvisioningSchemeUid -PersistUserChanges $persistChanges -SessionSupport $sessionSupportn  n    write-log -message Creating the broker catalogn  n  } Catch {n  n    write-log -message Unable to create the broker catalog -sev WARNn  n    breakn  }n  n  # Clone the VMs and make sure they're available under the machine catalogn  n  $machineCreatedCount = 0n  n  foreach ($provVm in $vms.CreatedVirtualMachines){n  n    $bpm = New-BrokerMachine -CatalogUid $bdc.Uid -HypervisorConnectionUid $bhc.Uid -HostedMachineId $provVm.VMId -MachineName $provVm.AdAccountSidn    $machineCreatedCount++n  n  }n  n  write-log -message Creating $($machineCount) VMsn  n  if($machineCreatedCount -gt 0){n  n    write-log -message Setup and Machine Catalog creation completed successfullyn  n  }n  n  if ($OSChoise -match 20162019){n    $kind = Sharedn  } else {n    $kind = Privaten  }nn  write-log -message Creating the delivery group $DeliveryGroupName mode $Kindnn  New-BrokerDesktopGroup -AdminAddress $CVADController -ColorDepth TwentyFourBit -DeliveryType DesktopsAndApps -DesktopKind Shared -InMaintenanceMode $False -IsRemotePC $False -MinimumFunctionalLevel L7_9 -Name $DeliveryGroupName -OffPeakBufferSizePercent 10 -OffPeakDisconnectAction Nothing -OffPeakDisconnectTimeout 0 -OffPeakExtendedDisconnectAction Nothing -OffPeakExtendedDisconnectTimeout 0 -OffPeakLogOffAction Nothing -OffPeakLogOffTimeout 0 -PeakBufferSizePercent 10 -PeakDisconnectAction Nothing -PeakDisconnectTimeout 0 -PeakExtendedDisconnectAction Nothing -PeakExtendedDisconnectTimeout 0 -PeakLogOffAction Nothing -PeakLogOffTimeout 0 -PublishedName $DeliveryGroupName -Scope @() -SecureIcaRequired $False -SessionSupport $sessionSupport -ShutdownDesktopsAfterUse $True -TimeZone W. Europe Standard Time  Out-Nulln  n  write-log -message Grabbing all available VMsn  $AvailableVMs = Get-BrokerMachine -AdminAddress $CVADController  Where-Object {$_.DesktopGroupName -eq $null}nn  Foreach ($vm in $AvailableVMs) {n    Add-BrokerMachine -AdminAddress $CVADController -DesktopGroup $DeliveryGroupName -InputObject $vm.UIDn  }n  n  write-log -message Adding $($AvailableVMs.count) VMs to the Delivery Group $DeliveryGroupNamen  n  $DesktopBrokerGroup = Get-BrokerDesktopGroup  Where-Object {$_.Name -eq $DeliveryGroupName}nn  write-log -message Creating Access Rule for connections NOT traversing Access Gateway n  n  New-BrokerAccessPolicyRule -AdminAddress $CVADController -AllowedConnections NotViaAG -AllowedProtocols @(HDX,RDP) -AllowedUsers AnyAuthenticated -AllowRestart $True -DesktopGroupUid $DesktopBrokerGroup.Uid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedUserFilterEnabled $True -IncludedUsers @() -Name $DeliveryGroupName+_Direct  Out-Nulln    n  write-log -message Creating Access Rule for connections traversing Access Gatewayn  n  New-BrokerAccessPolicyRule -AdminAddress $CVADController -AllowedConnections ViaAG -AllowedProtocols @(HDX,RDP) -AllowedUsers AnyAuthenticated -AllowRestart $True -DesktopGroupUid $DesktopBrokerGroup.Uid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedSmartAccessTags @() -IncludedUserFilterEnabled $True -IncludedUsers @() -Name $DeliveryGroupName+_AG  Out-Nulln  n  write-log -message Testing Broker Access Policies for Direct connectionsnn  Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+_Direct)  Out-Nullnn  write-log -message Testing if the access rule for connections NOT traversing Access Gateway was creatednn  Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+_AG)  Out-Nulln  n  write-log -message Testing if there's a power schedule available during weekdaysnn  Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+_Weekdays)  Out-Nulln  n  if ($kind -eq Private){n    write-log -message Creating a new power schedule during weekdays for the delivery groupnn    New-BrokerPowerTimeScheme -AdminAddress $CVADController -DaysOfWeek Weekdays -DesktopGroupUid $DesktopBrokerGroup.Uid -DisplayName Weekdays -Name $DeliveryGroupName+_Weekdays -PeakHours @($True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)  Out-Nulln  }nn  write-log -message Testing if there's a power schedule available during weekendsnn  Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+_Weekend)  Out-Nulln  n  if ($kind -eq Private){nn    write-log -message Creating a new power schedule during weekends for the delivery groupnn    New-BrokerPowerTimeScheme -AdminAddress $CVADController -DaysOfWeek Weekend -DesktopGroupUid $DesktopBrokerGroup.Uid -DisplayName Weekend -Name $DeliveryGroupName+_Weekend -PeakHours @($True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)   Out-Nulln  }n  n  write-log -message Adding Desktop To DGn  $DesktopGroupName = nn  $vda = (Get-BrokerMachine -SessionSupport MultiSession -DesktopGroupName $DesktopGroupName)  select -first 1nn  New-BrokerEntitlementPolicyRule $($OSChoise) $($AppLongCode) -DesktopGroupUid $VDA.DesktopGroupUid -PublishedName $($OSChoise) $($AppLongCode) -IncludedUserFilterEnabled $falsennnn} else {nn  write-log -message This step is not meant to be executed on $($envcomputername)nn}nn$error.clear(),
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 0be9c34d_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 4e2145cc_dag
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Config XenDesktop Backend Servers
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name a101dae2_dag,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 91a77973_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name a101dae2_dag
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name ConfigMGT
				}],
				name Configure MGT Part 2,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure MGT Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Choco Client
							}, {
								kind app_task,
								name Join Reboot
							}, {
								kind app_task,
								name Join Reboot Wait
							}, {
								kind app_task,
								name Install Apps MGT
							}, {
								kind app_task,
								name Configure Nutanix Files
							}, {
								kind app_task,
								name IIS Install
							}, {
								kind app_task,
								name Create Dummy Content
							}, {
								kind app_task,
								name Change CDROM drive to Z
							}, {
								kind app_task,
								name SetVar ERA IP
							}, {
								kind app_task,
								name Install Workspace App
							}],
							name 9ed4ee76_dag,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Apps MGT
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name IIS Install
									}
								}, {
									from_task_reference {
										kind app_task,
										name IIS Install
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Change CDROM drive to Z
									}
								}, {
									from_task_reference {
										kind app_task,
										name Configure Nutanix Files
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Create Dummy Content
									}
								}, {
									from_task_reference {
										kind app_task,
										name Install Choco Client
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Join Reboot
									}
								}, {
									from_task_reference {
										kind app_task,
										name Join Reboot
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Join Reboot Wait
									}
								}, {
									from_task_reference {
										kind app_task,
										name Join Reboot Wait
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Apps MGT
									}
								}, {
									from_task_reference {
										kind app_task,
										name Join Reboot Wait
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Configure Nutanix Files
									}
								}, {
									from_task_reference {
										kind app_task,
										name Change CDROM drive to Z
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name SetVar ERA IP
									}
								}, {
									from_task_reference {
										kind app_task,
										name SetVar ERA IP
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Install Workspace App
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Choco Client,
							state ACTIVE,
							attrs {
								exit_status [],
								script $ChocoPackagesURL      = @@{ChocoPackagesURL}@@n$ChocoClientPackageURL = @@{ChocoClientPackageURL}@@nn$localChocolateyPackageFilePath = cwindowstempnn$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea0nif ($localChocolateyPackageFilePathExists){nn  write Removing Client dirnn  remove-item $localChocolateyPackageFilePath -recurse -force -confirm0 -ea0n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n} else {n  mkdir $localChocolateyPackageFilePath -force -confirm0 -ea0n}nn$PkgDir = CPackagesn$PkgDirexists = get-item $PkgDir -ea0nif ($PkgDirexists){nn  write Removing Package dirnn  remove-item $PkgDir -recurse -force -confirm0 -ea0n} nmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $ChocoClientPackageURLnn$filename = $ChocoClientPackageURL -split   select -last 1n$output = $($localChocolateyPackageFilePath)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoClientPackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($localChocolateyPackageFilePath)$($filename) -DestinationPath $localChocolateyPackageFilePathnn$Toolspath = $($localChocolateyPackageFilePath)Toolsncd $toolspathn$PSFile = $($Toolspath)chocolateyInstall.ps1n& $PSFilennwrite Downloading Packagesnwrite Using URL $ChocoPackagesURLnn$filename = $ChocoPackagesURL -split   select -last 1n$output = $($PkgDir)$($filename)n$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($ChocoPackagesURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnchoco source remove --name='chocolatey'nchoco source add --name='local' --source='cpackages'nchoco upgrade chocolatey -y,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Join Reboot,
							state ACTIVE,
							attrs {
								exit_status [],
								script n$AppshortCode     = @@{AC}@@n$AppLongCode      = @@{AppLongCode}@@n$ServiceAccount   = @@{Service_Account.username}@@        n$servicePassword  = @@{Service_Account.secret}@@n$DomainUsername   = @@{DomainInstallUser.username}@@;n$DomainPassword   = @@{DomainInstallUser.secret}@@;n$WindowsDomain    = @@{WindowsDomain}@@n$tier             = @@{Tier}@@n$customerNameLong = @@{CustomerNameLong}@@nnFunction Set-AutoLogon{n    [CmdletBinding()]n    Param(n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultUsername,n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [String[]]$DefaultPassword,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$AutoLogonCount,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$DefaultDomain,n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]n        [AllowEmptyString()]n        [String[]]$Script            n    )n    Beginn    {n        #Registry path declarationn        $RegPath = HKLMSOFTWAREMicrosoftWindows NTCurrentVersionWinlogonn        $RegROPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunOncen    }n    Processn    {n        tryn        {n            #setting registry valuesn            Set-ItemProperty $RegPath AutoAdminLogon -Value 1 -type String  n            Set-ItemProperty $RegPath DefaultUsername -Value $DefaultUsername -type String  n            Set-ItemProperty $RegPath DefaultPassword -Value $DefaultPassword -type Stringn            Set-ItemProperty $RegPath DefaultDomainName -Value $DefaultDomain -type Stringn            if($AutoLogonCount)n            {n                Set-ItemProperty $RegPath AutoLogonCount -Value $AutoLogonCount -type DWordn            }n            elsen            {n                Set-ItemProperty $RegPath AutoLogonCount -Value 1 -type DWordn            }n            if($Script)n            {n                Set-ItemProperty $RegROPath (Default) -Value $Script -type Stringn            }n            elsen            {n                Set-ItemProperty $RegROPath (Default) -Value  -type Stringn            }        n        }nn        catchn        {nn            Write-Output An error had occured $Errorn            n        }n    }n    Endn    {n        n        #Endnn    }n}nnnn$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;n$credential = New-Object System.Management.Automation.PSCredential($($WindowsDomain)$($DomainUsername),$Securepass);n$array = $WindowsDomain.Split(.)n$DomainPath = DC=$($array -join (,DC=))n$ou =  OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)nnAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options AccountCreate -oupath $ounnwrite Setting Autologon to domain service accountnn$username = ($serviceaccount -split )[1]nset-autologon -DefaultUsername $username -DefaultPassword $servicepassword -defaultdomain $WindowsDomain -AutoLogonCount 9999999nshutdown -r -t 5,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Join Reboot Wait,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 90
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Apps MGT,
							state ACTIVE,
							attrs {
								exit_status [],
								script try {n  choco install googlechrome -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install googlechrome -y --ignore-checksumsn}ntry {n  choco install 7zip.install -y --ignore-checksumsn} catch {n  sleep (get-random 0,45)n  choco install 7zip.install -y --ignore-checksumsn}ntry {n  choco install pswindowsupdate -y --ignore-checksumsn} catch {n  sleep 20n  choco install pswindowsupdate -y --ignore-checksumsn}ntry {n  choco install bginfo -y --ignore-checksumsn} catch {n  sleep 20n  choco install bginfo -y --ignore-checksumsn} nnsleep 20n$bgInfoRegPath = HKLMSOFTWAREMicrosoftWindowsCurrentVersionRunn$bgInfoRegkey = BgInfon$bgInfoRegType = Stringn$bgInfoRegkeyValue = CProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicpromptnnNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValuennCProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt nwrite 'cProgramDatachocolateylibbginfoToolsBginfo64.exe CPackagesHix.bgi timer0 nolicprompt'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpbginfo.cmd -Encoding ASCIIn ,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Configure Nutanix Files,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$serviceuser                = @@{Service_Account.username}@@n$servicePassword            = @@{Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Add-FileServerShares {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [object] $vfiler,n    [string] $nodecount = 3,n    [String] $WindowsAdDomainName,n    [string] $tier,n    [string] $CustomerCoden  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Adding Fileserver Sharesnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilers$($vfiler.uuid)sharesforce=truenn  write-log -message Using URL $URLnn$Userhomejson1= @n{n  name $($CustomerCode)-$($Tier)-Userhome,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion true,n  windowsAdDomainName $($WindowsAdDomainName),n  description User Home Data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType HOMESn}n@n$Userhomejson2= @n{n  name $($CustomerCode)-$($Tier)-Userhome,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion true,n  windowsAdDomainName $($WindowsAdDomainName),n  description User Home Data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType GENERALn}n@n$Departmentjson= @n{n  name $($CustomerCode)-$($Tier)-Department,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion false,n  windowsAdDomainName $($WindowsAdDomainName),n  description Department data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType GENERALn}n@nn  if ($nodecount -le 2){n    $Userhomejson = $Userhomejson2n  } else {n    $Userhomejson = $Userhomejson1n  }n  $shares = REST-Query-Shares -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusernamen  [array]$Delete += $shares.entities  where {$_.name -match $($CustomerCode)-$($Tier)}n  if ($delete){nn    write-log -message We found $($delete.count) shares to clean first.nn    foreach ($share in $delete){n      sleep 20  n      write-log -message Deleting $($share.uuid)nn      REST-Delete-Share -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername -vfilerUUID $vfiler.uuid -shareUUID $share.uuidn      sleep 60n    }n  }n  try{nn    write-log -message Creating Userhomen      n    $task = Invoke-RestMethod -Uri $URL -method post -body $Userhomejson -ContentType 'applicationjson' -headers $headers;n    sleep 40n  } catch {nn    write-log -message Creating Userhome againnn    $task = Invoke-RestMethod -Uri $URL -method post -body $Userhomejson -ContentType 'applicationjson' -headers $headers;n    sleep 40nn  }n  try{n    write-log -message Creating Departmentnn    sleep 40n    $task = Invoke-RestMethod -Uri $URL -method post -body $Departmentjson -ContentType 'applicationjson' -headers $headers;     n  } catch {nn    write-log -message Creating Department againnn    sleep 40n    $task = Invoke-RestMethod -Uri $URL -method post -body $Departmentjson -ContentType 'applicationjson' -headers $headers;nn    write-log -message Department Createdn  }n    n  write-log -message All Shares Creatednnn  Return $taskn} nnFunction REST-Query-FileServer {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message File Server Querynn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilersnn  try {n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;n  }nn  Return $taskn} nnFunction REST-Query-Shares {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message File Share Querynn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilerssharesnn  try {n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  Return $taskn} nnFunction REST-Delete-Share {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $vfilerUUID,n    [string] $shareUUIDn  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Delete Share $($shareUUID) on vFiler $($vfilerUUID)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilers$($vfilerUUID)shares$($shareUUID)force=truenn  try {n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  Return $taskn} nnFunction PSR-Generate-FilesContent {n  param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $username,n    [string] $password,n    [string] $domainname,n    [string] $fsname,n    [string] $customerNameLong,n    [string] $customerCode,n    [string] $tiern  )n  write-log -message Debug level is $debug;n  write-log -message Building credential object;nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  $secpass = $password  ConvertTo-SecureString -asplaintext -force;n  $username = ($username -split )[1]n  write-log -message Using Domain Creds $($domainname)$($username)n  $DomainCreds = New-Object System.Management.Automation.PsCredential($($domainname)$($username),$secpass);nn  $FirstdomaincontrollerIP = (Test-Connection $domainname -count 1).ipv4address.ipaddresstostringnn  write-log -message  Connecting to the first responding DC $FirstdomaincontrollerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($FirstdomaincontrollerIP)).hostname nn  write-log -message  Reconnecting to latest OS version Name $Dnsnamenn  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $DomainCreds {n    $allDCs = (Get-ADForest).Domains  %{ Get-ADDomainController -Filter  -Server $_ }n    ($allDCs  sort [version]OperatingSystemVErsion -Desc  select -first 1).IPv4Addressn  }nn  write-log -message  Reconnecting to latest OS version DC $LatestDomainControllerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($LatestDomainControllerIP)).hostname nn  write-log -message Reconnecting to latest OS version Name $Dnsnamen  write-log -message Executing Files Content Generation.;n  write-log -message This will take a while.;n  write-log -message Using File Server $fsname;nn    invoke-command -computername $Dnsname -credential $DomainCreds {nn      $fsname               = $args[0]n      $username             = $args[1]n      $password             = $args[2]n      $domainname           = $args[3]n      $tier                 = $args[4]n      $customerNameLong     = $args[5]n      $CustomerCode         = $args[6]n      $AppLongCode          = $args[7]n      $array = $domainname.Split(.)n      $DomainPath = DC=$($array -join (,DC=))n      $jobname = Content $($Tier)-$($CustomerCode) $($AppLongCode) Generate;n      Get-ScheduledTask $jobname -ea0  stop-scheduledtaskn      Get-ScheduledTask $jobname -ea0  Unregister-scheduledtask -confirm0n      [ARRAY]$OUTPUT += [STRING]'start-transcript cwindowstempContentApp.log'n      [ARRAY]$OUTPUT += [STRING]'$Username = ' + '' + $username + ''n      [ARRAY]$OUTPUT += [STRING]'$password = ' + '' + $password + ''n      [ARRAY]$OUTPUT += [STRING]'$domainname = ' + '' + $domainname + ''n      [ARRAY]$OUTPUT += [STRING]'$fsname = ' + '' + $fsname + ''n      [ARRAY]$OUTPUT += [STRING]'$tier = ' + '' + $Tier + ''n      [ARRAY]$OUTPUT += [STRING]'$CustomerCode = ' + '' + $CustomerCode + ''n      [ARRAY]$OUTPUT += [STRING]'$customerNameLong = ' + '' + $customerNameLong + '' n      [ARRAY]$OUTPUT += [STRING]'$DomainPath = ' + '' + $DomainPath + '' n      [ARRAY]$OUTPUT += [STRING]'$AppLongCode = ' + '' + $AppLongCode + '' n      [ARRAY]$OUTPUT += [STRING]'$secpassword = $password  ConvertTo-SecureString -asplaintext -force;'n      [ARRAY]$OUTPUT += [STRING]'$DomainCreds = New-Object System.Management.Automation.PsCredential($Username,$secpassword);'n      [ARRAY]$OUTPUT += [STRING]'write Content Indexing Starting'n      [ARRAY]$OUTPUT += [STRING]'$Wavfiles = get-childitem -recurse c.wav -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Wav Files $($Wavfiles.count) Done, doing doc'n      [ARRAY]$OUTPUT += [STRING]'$docfiles = get-childitem -recurse c.doc -ea0'n      [ARRAY]$OUTPUT += [STRING]'write doc Files $($docfiles.count) Done, doing jpg'n      [ARRAY]$OUTPUT += [STRING]'$jpgfiles = get-childitem -recurse c.jpg -ea0'n      [ARRAY]$OUTPUT += [STRING]'write JPG Files $($jpgfiles.count) Done, doing cab'n      [ARRAY]$OUTPUT += [STRING]'$Cabfiles = get-childitem -recurse c.cab -ea0  select -first 20'n      [ARRAY]$OUTPUT += [STRING]'write CAB Files $($Cabfiles.count) Done, doing zip'n      [ARRAY]$OUTPUT += [STRING]'$zipfiles = get-childitem -recurse c.zip -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Zip Files $($zipfiles.count) Done, doing Txt'n      [ARRAY]$OUTPUT += [STRING]'$txtfiles = get-childitem -recurse c.txt -ea0'n      [ARRAY]$OUTPUT += [STRING]'write TXT Files $($txtfiles.count) Done, doing AVI'n      [ARRAY]$OUTPUT += [STRING]'$avifiles = get-childitem -recurse c.avi -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Content Indexing Completed, $($avifiles.count)'n      [ARRAY]$OUTPUT += [STRING]'write Using Path OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)'n      [ARRAY]$OUTPUT += [STRING]'Get-ADUser -Filter  -SearchBase OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) Foreach-Object{'n      [ARRAY]$OUTPUT += [STRING]'  $user = $_'n      [ARRAY]$OUTPUT += [STRING]'  $sam = $_.SamAccountName'n      [ARRAY]$OUTPUT += [STRING]'  write Working on $sam'n      [ARRAY]$OUTPUT += [STRING]'  Set-ADuser -Identity $_ -HomeDrive H -HomeDirectory $($fsname)$sam -ea0'n      [ARRAY]$OUTPUT += [STRING]'  $homeShare = new-item -path $($fsname)$($CustomerCode)-$($Tier)-Userhome$sam -ItemType Directory -force'n      [ARRAY]$OUTPUT += [STRING]'  $acl = Get-Acl $homeShare -ea0'n      [ARRAY]$OUTPUT += [STRING]'  $FileSystemRights = [System.Security.AccessControl.FileSystemRights]Modify'n      [ARRAY]$OUTPUT += [STRING]'  $AccessControlType = [System.Security.AccessControl.AccessControlType]Allow'n      [ARRAY]$OUTPUT += [STRING]'  $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]ContainerInherit, ObjectInherit'n      [ARRAY]$OUTPUT += [STRING]'  $PropagationFlags = [System.Security.AccessControl.PropagationFlags]InheritOnly'n      [ARRAY]$OUTPUT += [STRING]'  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule ($User.SID, $FileSystemRights, $InheritanceFlags, $PropagationFlags, $AccessControlType)'n      [ARRAY]$OUTPUT += [STRING]'  $acl.AddAccessRule($AccessRule)'n      [ARRAY]$OUTPUT += [STRING]'  Set-Acl -Path $homeShare -AclObject $acl -ea0'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 3'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).wav'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $cabfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 10'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).cab'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 50'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).doc'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 19'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).jpg'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).zip'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).txt'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 30'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).avi'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'}'n      [ARRAY]$OUTPUT += [STRING]''n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Finance'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += IT'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += HR'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Factory'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += RnD'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Management'n      [ARRAY]$OUTPUT += [STRING]'foreach ($item in $array){'n      [ARRAY]$OUTPUT += [STRING]'  copy-item -type Directory $($fsname)$($CustomerCode)-$($Tier)-Department$item'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).wav'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  $count =0'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).doc'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).jpg'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Cabfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).cab'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).zip'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).txt'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).avi'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'}'n      $scriptfile = CwindowstempContent-$($AppLongCode)-$($tier)-$($customerCode).ps1n      $OUTPUT  OUT-FILE $scriptfilen      $argumentList = -file $scriptfilen      $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n      $SecurePassword = $password  ConvertTo-SecureString -AsPlainText -Forcen      $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $username -Password $passwordn      sleep 5n      Get-ScheduledTask $jobname  start-scheduledtaskn      sleep 60n      Get-ScheduledTask $jobname  start-scheduledtaskn    } -args $FSname,$username,$password,$domainname,$tier,$customerNameLong,$CustomerCode,$AppLongCoden  $counter = 0nn  write-log -message Tailing the log from the remote session to capture successnn  $status = Successn n  write-log -message All Done here, full of File Content;n  write-log -message Please play with me.;nn  $resultobject =@{n    Result = $statusn  };n  return $resultobjectn};nnnn$vfilers = REST-Query-FileServer -PEClusterIP $PEClusterIP -clusername $PEadmin -clpassword $PEpassn$vfiler =  $vfilers.entities  where {$_.name -eq $VFilername}nnwrite-log -message Working with VFiler UUID $($VFiler.uuid)nnREST-Add-FileServerShares -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -vfiler $vfiler -windowsAdDomainName $windowsAdDomainName -tier $tier -CustomerCode $CustomerCodennn#write-log -message Generating File Content$DummyADContentnn#if ($DummyADContent -eq 1){n  #PSR-Generate-FilesContent -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -username $serviceuser -password $servicePassword -tier $tier -customercode $CustomerCode -fsname $vfiler.name -domainname $WindowsAdDomainName -customerNameLong $customerNameLongn#}nn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name IIS Install,
							state ACTIVE,
							attrs {
								exit_status [],
								script n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).daten$principal = New-ScheduledTaskPrincipal -UserId $envUSERDOMAIN$envUSERNAME -LogonType S4U -RunLevel Highestn$script = CwindowstempIIS.ps1nwrite 'start-transcript cwindowstempiis.log'  out-file $scriptnwrite 'Get-NetAdapter  Get-NetAdapterBinding  Disable-NetAdapterBinding -ComponentID ms_tcpip6 -PassThru -ea0'  out-file $script -appendnwrite 'Install-WindowsFeature -name Web-Server -IncludeManagementTools'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Performance'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45'  out-file $script -appendnwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASP'  out-file $script -appendnwrite ''  out-file $script -appendnwrite 'Write Webserver installed'  out-file $script -appendn$jobname = Setup IIS;n$action = New-ScheduledTaskAction -Execute powershell.exe -Argument $scriptn$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Forcen$task  start-scheduledtaskndo {n  write Waiting for $jobnamen  sleep 60n  $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n} Until ($state.state -eq 3)ntry {n  get-content 'cwindowstempiis.log'n} catch {n  $task  unregister-scheduledtask -confirm0n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Forcen  $task  start-scheduledtaskn}ndo {n  write Waiting for $jobnamen  sleep 60n  $state = (Get-ScheduledTask  where {$_.taskname -eq $jobname})n} Until ($state.state -eq 3),
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Create Dummy Content,
							state ACTIVE,
							attrs {
								exit_status [],
								script n$AppshortCode               = @@{AC}@@n$AppLongCode                = @@{AppLongCode}@@n$PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$serviceuser                = @@{Service_Account.username}@@n$servicePassword            = @@{Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Add-FileServerShares {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [object] $vfiler,n    [string] $nodecount = 3,n    [String] $WindowsAdDomainName,n    [string] $tier,n    [string] $CustomerCoden  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Adding Fileserver Sharesnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilers$($vfiler.uuid)sharesforce=truenn  write-log -message Using URL $URLnn$Userhomejson1= @n{n  name $($CustomerCode)-$($Tier)-Userhome,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion true,n  windowsAdDomainName $($WindowsAdDomainName),n  description User Home Data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType HOMESn}n@n$Userhomejson2= @n{n  name $($CustomerCode)-$($Tier)-Userhome,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion true,n  windowsAdDomainName $($WindowsAdDomainName),n  description User Home Data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType GENERALn}n@n$Departmentjson= @n{n  name $($CustomerCode)-$($Tier)-Department,n  fileServerUuid $($vfiler.uuid),n  enablePreviousVersion false,n  windowsAdDomainName $($WindowsAdDomainName),n  description Department data,n  maxSizeGiB 0,n  protocolType SMB,n  secondaryProtocolType NONE,n  sharePath ,n  isNestedShare false,n  enableAccessBasedEnumeration true,n  shareType GENERALn}n@nn  if ($nodecount -le 2){n    $Userhomejson = $Userhomejson2n  } else {n    $Userhomejson = $Userhomejson1n  }n  $shares = REST-Query-Shares -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusernamen  [array]$Delete += $shares.entities  where {$_.name -match $($CustomerCode)-$($Tier)}n  if ($delete){nn    write-log -message We found $($delete.count) shares to clean first.nn    foreach ($share in $delete){n      sleep 20  n      write-log -message Deleting $($share.uuid)nn      REST-Delete-Share -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername -vfilerUUID $vfiler.uuid -shareUUID $share.uuidn      sleep 60n    }n  }n  try{nn    write-log -message Creating Userhomen      n    $task = Invoke-RestMethod -Uri $URL -method post -body $Userhomejson -ContentType 'applicationjson' -headers $headers;n    sleep 40n  } catch {nn    write-log -message Creating Userhome againnn    $task = Invoke-RestMethod -Uri $URL -method post -body $Userhomejson -ContentType 'applicationjson' -headers $headers;n    sleep 40nn  }n  try{n    write-log -message Creating Departmentnn    sleep 40n    $task = Invoke-RestMethod -Uri $URL -method post -body $Departmentjson -ContentType 'applicationjson' -headers $headers;     n  } catch {nn    write-log -message Creating Department againnn    sleep 40n    $task = Invoke-RestMethod -Uri $URL -method post -body $Departmentjson -ContentType 'applicationjson' -headers $headers;nn    write-log -message Department Createdn  }n    n  write-log -message All Shares Creatednnn  Return $taskn} nnFunction REST-Query-FileServer {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message File Server Querynn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilersnn  try {n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;n  } catch {n    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  Return $taskn} nnFunction REST-Query-Shares {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message File Share Querynn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilerssharesnn  try {n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;n  } catch {n    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method get -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  Return $taskn} nnFunction REST-Delete-Share {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $vfilerUUID,n    [string] $shareUUIDn  )n  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Delete Share $($shareUUID) on vFiler $($vfilerUUID)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vfilers$($vfilerUUID)shares$($shareUUID)force=truenn  try {n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;n  } catch {n    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method DELETE -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn  }nn  Return $taskn} nnFunction PSR-Generate-FilesContent {n  param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $username,n    [string] $password,n    [string] $domainname,n    [string] $fsname,n    [string] $customerNameLong,n    [string] $customerCode,n    [string] $tier,n    [string] $AppshortCode,n    [string] $AppLongCode   n  )n  write-log -message Debug level is $debug;n  write-log -message Building credential object;nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  $secpass = $password  ConvertTo-SecureString -asplaintext -force;n  $username = ($username -split )[1]n  write-log -message Using Domain Creds $($domainname)$($username)n  $DomainCreds = New-Object System.Management.Automation.PsCredential($($domainname)$($username),$secpass);nn  $FirstdomaincontrollerIP = (Test-Connection $domainname -count 1).ipv4address.ipaddresstostringnn  write-log -message  Connecting to the first responding DC $FirstdomaincontrollerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($FirstdomaincontrollerIP)).hostname nn  write-log -message  Reconnecting to latest OS version Name $Dnsnamenn  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $DomainCreds {n    $allDCs = (Get-ADForest).Domains  %{ Get-ADDomainController -Filter  -Server $_ }n    ($allDCs  sort [version]OperatingSystemVErsion -Desc  select -first 1).IPv4Addressn  }nn  write-log -message  Reconnecting to latest OS version DC $LatestDomainControllerIPnn  $Dnsname = ([System.Net.Dns]GetHostbyAddress($LatestDomainControllerIP)).hostname nn  write-log -message Reconnecting to latest OS version Name $Dnsnamen  write-log -message Executing Files Content Generation.;n  write-log -message This will take a while.;n  write-log -message Using File Server $fsname;nn    invoke-command -computername $Dnsname -credential $DomainCreds {nn      $fsname               = $args[0]n      $username             = $args[1]n      $password             = $args[2]n      $domainname           = $args[3]n      $tier                 = $args[4]n      $customerNameLong     = $args[5]n      $CustomerCode         = $args[6]n      $AppshortCode         = $args[7]n      $AppLongCode          = $args[8]n      $array = $domainname.Split(.)n      $DomainPath = DC=$($array -join (,DC=))n      $jobname = Content $($Tier)-$($CustomerCode) $($AppLongCode) Generate;n      Get-ScheduledTask $jobname -ea0  stop-scheduledtaskn      Get-ScheduledTask $jobname -ea0  Unregister-scheduledtask -confirm0n      [ARRAY]$OUTPUT += [STRING]'start-transcript cwindowstempContentApp.log'n      [ARRAY]$OUTPUT += [STRING]'$Username = ' + '' + $username + ''n      [ARRAY]$OUTPUT += [STRING]'$password = ' + '' + $password + ''n      [ARRAY]$OUTPUT += [STRING]'$domainname = ' + '' + $domainname + ''n      [ARRAY]$OUTPUT += [STRING]'$fsname = ' + '' + $fsname + ''n      [ARRAY]$OUTPUT += [STRING]'$tier = ' + '' + $Tier + ''n      [ARRAY]$OUTPUT += [STRING]'$CustomerCode = ' + '' + $CustomerCode + ''n      [ARRAY]$OUTPUT += [STRING]'$customerNameLong = ' + '' + $customerNameLong + '' n      [ARRAY]$OUTPUT += [STRING]'$DomainPath = ' + '' + $DomainPath + ''n      [ARRAY]$OUTPUT += [STRING]'$AppLongCode = ' + '' + $AppLongCode + ''n      [ARRAY]$OUTPUT += [STRING]'$secpassword = $password  ConvertTo-SecureString -asplaintext -force;'n      [ARRAY]$OUTPUT += [STRING]'$DomainCreds = New-Object System.Management.Automation.PsCredential($Username,$secpassword);'n      [ARRAY]$OUTPUT += [STRING]'write Content Indexing Starting'n      [ARRAY]$OUTPUT += [STRING]'$Wavfiles = get-childitem -recurse c.wav -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Wav Files $($Wavfiles.count) Done, doing doc'n      [ARRAY]$OUTPUT += [STRING]'$docfiles = get-childitem -recurse c.doc -ea0'n      [ARRAY]$OUTPUT += [STRING]'write doc Files $($docfiles.count) Done, doing jpg'n      [ARRAY]$OUTPUT += [STRING]'$jpgfiles = get-childitem -recurse c.jpg -ea0'n      [ARRAY]$OUTPUT += [STRING]'write JPG Files $($jpgfiles.count) Done, doing cab'n      [ARRAY]$OUTPUT += [STRING]'$Cabfiles = get-childitem -recurse c.cab -ea0  select -first 20'n      [ARRAY]$OUTPUT += [STRING]'write CAB Files $($Cabfiles.count) Done, doing zip'n      [ARRAY]$OUTPUT += [STRING]'$zipfiles = get-childitem -recurse c.zip -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Zip Files $($zipfiles.count) Done, doing Txt'n      [ARRAY]$OUTPUT += [STRING]'$txtfiles = get-childitem -recurse c.txt -ea0'n      [ARRAY]$OUTPUT += [STRING]'write TXT Files $($txtfiles.count) Done, doing AVI'n      [ARRAY]$OUTPUT += [STRING]'$avifiles = get-childitem -recurse c.avi -ea0'n      [ARRAY]$OUTPUT += [STRING]'write Content Indexing Completed, $($avifiles.count)'n      [ARRAY]$OUTPUT += [STRING]'write Using Path OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)'n      [ARRAY]$OUTPUT += [STRING]'Get-ADUser -Filter  -SearchBase OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath) Foreach-Object{'n      [ARRAY]$OUTPUT += [STRING]'  $user = $_'n      [ARRAY]$OUTPUT += [STRING]'  $sam = $_.SamAccountName'n      [ARRAY]$OUTPUT += [STRING]'  write Working on $sam'n      [ARRAY]$OUTPUT += [STRING]'  Set-ADuser -Identity $_ -HomeDrive H -HomeDirectory $($fsname)$sam -ea0'n      [ARRAY]$OUTPUT += [STRING]'  $homeShare = new-item -path $($fsname)$($CustomerCode)-$($Tier)-Userhome$sam -ItemType Directory -force'n      [ARRAY]$OUTPUT += [STRING]'  $acl = Get-Acl $homeShare -ea0'n      [ARRAY]$OUTPUT += [STRING]'  $FileSystemRights = [System.Security.AccessControl.FileSystemRights]Modify'n      [ARRAY]$OUTPUT += [STRING]'  $AccessControlType = [System.Security.AccessControl.AccessControlType]Allow'n      [ARRAY]$OUTPUT += [STRING]'  $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]ContainerInherit, ObjectInherit'n      [ARRAY]$OUTPUT += [STRING]'  $PropagationFlags = [System.Security.AccessControl.PropagationFlags]InheritOnly'n      [ARRAY]$OUTPUT += [STRING]'  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule ($User.SID, $FileSystemRights, $InheritanceFlags, $PropagationFlags, $AccessControlType)'n      [ARRAY]$OUTPUT += [STRING]'  $acl.AddAccessRule($AccessRule)'n      [ARRAY]$OUTPUT += [STRING]'  Set-Acl -Path $homeShare -AclObject $acl -ea0'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 3'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).wav'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $cabfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 10'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).cab'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 50'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).doc'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 19'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).jpg'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).zip'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).txt'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 30'n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Userhome$($sam)$($targetfilename).avi'n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'}'n      [ARRAY]$OUTPUT += [STRING]''n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Finance'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += IT'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += HR'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Factory'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += RnD'n      [ARRAY]$OUTPUT += [STRING]'[array]$array += Management'n      [ARRAY]$OUTPUT += [STRING]'foreach ($item in $array){'n      [ARRAY]$OUTPUT += [STRING]'  copy-item -type Directory $($fsname)$($CustomerCode)-$($Tier)-Department$item'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).wav'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  $count =0'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).doc'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).jpg'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Cabfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).cab'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).zip'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).txt'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'n      [ARRAY]$OUTPUT += [STRING]'    $count =0'n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'n      [ARRAY]$OUTPUT += [STRING]'    do {'n      [ARRAY]$OUTPUT += [STRING]'      $count++'n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'n      [ARRAY]$OUTPUT += [STRING]'      copy-item $($file.fullname) $($fsname)$($CustomerCode)-$($Tier)-Department$item$($targetfilename).avi'n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'n      [ARRAY]$OUTPUT += [STRING]'  }'n      [ARRAY]$OUTPUT += [STRING]'}'nn      $scriptfile = CwindowstempContent-$($AppLongCode)-$($tier)-$($customerCode).ps1n      $OUTPUT  OUT-FILE $scriptfilen      $argumentList = -file $scriptfilen      $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n      $SecurePassword = $password  ConvertTo-SecureString -AsPlainText -Forcen      $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $username -Password $passwordn      sleep 5n      Get-ScheduledTask $jobname  start-scheduledtaskn      sleep 60n      Get-ScheduledTask $jobname  start-scheduledtaskn    } -args $FSname,$username,$password,$domainname,$tier,$customerNameLong,$CustomerCode,$AppshortCode,$AppLongCoden  $counter = 0nn  write-log -message Tailing the log from the remote session to capture successnn  $status = Successn n  write-log -message All Done here, full of File Content;n  write-log -message Please play with me.;nn  $resultobject =@{n    Result = $statusn  };n  return $resultobjectn};nnnn$vfilers = REST-Query-FileServer -PEClusterIP $PEClusterIP -clusername $PEadmin -clpassword $PEpassn$vfiler =  $vfilers.entities  where {$_.name -eq $VFilername}nnwrite-log -message Working with VFiler UUID $($VFiler.uuid)nn#REST-Add-FileServerShares -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -vfiler $vfiler -windowsAdDomainName $windowsAdDomainName -tier $tier -CustomerCode $CustomerCodennnwrite-log -message Generating File Content$DummyADContentnnif ($DummyADContent -eq 1){n  PSR-Generate-FilesContent -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -username $serviceuser -password $servicePassword -tier $tier -customercode $CustomerCode -fsname $vfiler.name -domainname $WindowsAdDomainName -customerNameLong $customerNameLong -AppshortCode $AppshortCode -AppLongCode $AppLongCoden}nn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Change CDROM drive to Z,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesnn# No variables required.nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnwrite-log -message Change CD Drive to Znn$cd = $NULLn$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $envCOMPUTERNAME -ErrorAction StopnSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter DriveLetter = '$($cd.drive)' ) -Arguments @{DriveLetter='Z'}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name SetVar ERA IP,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$WindowsDomainUser          = @@{Domain_Service_Account.username}@@n$WindowsDomainPass          = @@{Domain_Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnnFunction REST-ERA-GetClusters {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)8443erav0.8clustersnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnWrite-log -message Query All VMsnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadminnnWrite-log -message Filter ERA VMnn$ERAIP = ($vms.entities  where {$_.VMName -match ^ERA}).ipaddresses  select -first 1nnWrite-log -message Query ERA Clusternn$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnif ($ERACluster){nn  write-log -message We detected $($ERACluster.id) ERA Cluster, storing the IP as CALM variable.nn  write ERAIP=$($ERAIP)nn} else {nn  write-log -message We failed boss, is this a 1CD based block -sev WARNnn}n,
								eval_variables [ERAIP],
								eval_scope local,
								script_type npsscript,
								type ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type SET_VARIABLE,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigMGT
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Workspace App,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@n$ServiceAccount         = @@{Service_Account.username}@@        n$servicePassword        = @@{Service_Account.secret}@@n$tier                   = @@{Tier}@@n$CustomerCode           = @@{CustomerName}@@n$vmname                 = $envcomputernamennnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Unmount-CDRom {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuid,n    [object] $cdromn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuidnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty truen  }]n}n@ n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM Unmounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn}nnFunction REST-Get-Image-Sizes {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($PEClusterIP)9440apinutanixv0.8imagesincludeVmDiskSizes=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Mount-CDRom-Image {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $VMuuid,n    [object] $cdrom,n    [object] $Imagen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Mounting CD for VM with ID $VMuuidn  write-log -message Using ISO $($Image.Name)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($VMuuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty false,n    vm_disk_clone {n      disk_address {n        vmdisk_uuid $($Image.vmDiskId)n      },n      minimum_size $($Image.vmDiskSize)n    }n  }]n}n@n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM mounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn} nnFunction PSR-Install-Citrix {n  param (n    [string]$serviceaccount,n    [string]$servicepassword,n    [string]$WindowsDomain,n    [string]$tier,n    [string]$CustomerCoden  )n$tier                n$CustomerCode        n  write-log -message Creating script;n  [ARRAY]$OUTPUT += [STRING]'$tier = ' + $tier + ''n  [ARRAY]$OUTPUT += [STRING]'$CustomerCode = ' + $CustomerCode + ''n  [ARRAY]$OUTPUT += [STRING]'$WindowsDomain = ' + $WindowsDomain + ''n  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceid'n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript cwindowstempCitrixNTNX.log'n  $OUTPUT += [STRING]'& $($driveletter)Citrix Receiver and Plug-insWindowsReceiverCitrixWorkspaceApp.exe silent STORE0=SF-$($CustomerCode)-$($tier);httpsSF-$($CustomerCode)-$($tier).$($WindowsDomain)#SF-$($CustomerCode)-$($tier);On;Store'n  write-log -message Creating Task;n  $username = ($serviceaccount -split )[1]n  $OUTPUT  OUT-FILE CwindowstempCitrix.ps1n  $argumentList = -file CWindowsTempCitrix.ps1n  $jobname = PowerShell Citrix Install;n  $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  $SecurePassword = $servicepassword  ConvertTo-SecureString -AsPlainText -Forcen  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePasswordn  $CredPassword = $Credentials.GetNetworkCredential().Password n  write Creating Task with User $($WindowsDomain)$($username)n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $($WindowsDomain)$($username) -Password $CredPasswordn  sleep 10n  Get-ScheduledTask $jobname -ea0  start-scheduledtaskn  n};nnn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnn[array]$vm = $VMS.entities  where {$_.vmname -eq $vmname}nnif ($vm.count -gt 1){n    write-log VMs are not clean, same machine exists twice -sev ERRORn    breakn}nnnwrite-log -message Getting VM Disk Detail for $($vm.uuid) using $VMIPnn$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidnnwrite-log -message Finding CDROMn  n$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message CDROM is not Empty, eject captain.nn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidn$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}nif ($cdrom.is_empty -eq $false){nn  write-log -message Unmounting Whatever is in there nownn  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn}nn$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1n$imageobj = $images.entities  where {$_.name -eq $CitrixImageName}nnwrite-log -message Mounting Image $($imageobj.vmdiskid)nnREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobjnnwrite-log -message Installing Citrix Application SuitennPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomain -tier $tier -CustomerCode $CustomerCodenn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 03aaea22_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 9ed4ee76_dag
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure MGT Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name d69d1f47_dag,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 9ed117f4_runbook,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d69d1f47_dag
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name ConfigXAS
				}],
				name Configure XAS Part 2,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure XAS Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Citrix Roles
							}, {
								kind app_task,
								name Wait for Install and Reboot
							}, {
								kind app_task,
								name Download and Run Optimizer
							}, {
								kind app_task,
								name Snap Me
							}],
							name 9ed4ee76_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [{
									from_task_reference {
										kind app_task,
										name Install Citrix Roles
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Wait for Install and Reboot
									}
								}, {
									from_task_reference {
										kind app_task,
										name Wait for Install and Reboot
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Download and Run Optimizer
									}
								}, {
									from_task_reference {
										kind app_task,
										name Download and Run Optimizer
									},
									edge_type user_defined,
									type ,
									to_task_reference {
										kind app_task,
										name Snap Me
									}
								}],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install Citrix Roles,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$CitrixImageName        = @@{CitrixImageName}@@n$WindowsDomain          = @@{WindowsDomain}@@n$ServiceAccount         = @@{Service_Account.username}@@        n$servicePassword        = @@{Service_Account.secret}@@n$brokername             = @@{XBS.BrokerName[0]}@@.$($windowsdomain)nnnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nfunction Set-TargetResource {n    [CmdletBinding()]n    param (n        [Parameter(Mandatory)] [ValidateNotNullOrEmpty()]n        [System.String] $Name,n        n        [Parameter()] [ValidateSet('Present','Absent')]n        [System.String] $Ensure = 'Present'n    )n    process {n        $listOfDDCs = GetRegistryValue -Key 'HKLMSOFTWARECitrixVirtualDesktopAgent' -Name 'ListOfDDCs';n        $ddcs = New-Object -TypeName 'System.Collections.ArrayList' -ArgumentList @();n        if (-not [System.String]IsNullOrEmpty($listOfDDCs)) {n            $ddcs.AddRange($listOfDDCs.Split(' '));n        }nn        ## Ensure that the controller is in the listn        if ($Ensure -eq 'Present') {n            Write-Verbose ($localizedData.AddingDeliveryController -f $Name);n            [ref] $null = $ddcs.Add($Name);n        }n        ## Ensure that the controller is NOT in the listn        if ($Ensure -eq 'Absent') {n            Write-Verbose ($localizedData.RemovingDeliveryController -f $Name);    n            [ref] $null = $ddcs.Remove($Name);n        }n        $listOfDDCs = [System.String]Join(' ', $ddcs.ToArray());n        Write-Verbose ($localizedData.SettingRegSZValue -f 'ListOfDDCs', $listOfDDCs);n        Set-ItemProperty -Path 'HKLMSOFTWARECitrixVirtualDesktopAgent' -Name 'ListOfDDCs' -Value $listOfDDCs;n        Write-Verbose ($localizedData.RestartingService -f 'BrokerAgent');n        Restart-Service -Name 'BrokerAgent' -Force;n    } #end processn} #end Set-TargetResourcenFunction REST-Unmount-CDRom {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuid,n    [object] $cdromn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuidnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty truen  }]n}n@ n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM Unmounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn}nnFunction REST-Get-Image-Sizes {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $silent =0n  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }n  if ($silent -ne 1){nn    write-log -message Executing Images List Query With Sizenn  }n  $URL = https$($PEClusterIP)9440apinutanixv0.8imagesincludeVmDiskSizes=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }nn  Return $taskn} nnFunction REST-Mount-CDRom-Image {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $VMuuid,n    [object] $cdrom,n    [object] $Imagen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Mounting CD for VM with ID $VMuuidn  write-log -message Using ISO $($Image.Name)nn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($VMuuid)disksupdatenn  write-log -message Using URL $URLnn$Payload= @n{n  vm_disks [{n    disk_address {n      vmdisk_uuid $($cdrom.disk_address.vmdisk_uuid),n      device_index $($cdrom.disk_address.device_index),n      device_bus $($cdrom.disk_address.device_bus)n    },n    flash_mode_enabled false,n    is_cdrom true,n    is_empty false,n    vm_disk_clone {n      disk_address {n        vmdisk_uuid $($Image.vmDiskId)n      },n      minimum_size $($Image.vmDiskSize)n    }n  }]n}n@n  if ($debug -ge 2){n    $Payloadn  }n  try{n    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;nn    write-log -message CDROM mounted nn  } catch {n    sleep 10n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method PUT -body $Payload -ContentType 'applicationjson' -headers $headers;n  }nn  Return $taskn} nnFunction PSR-Install-Citrix {n  param (n    [string]$serviceaccount,n    [string]$servicepassword,n    [string]$WindowsDomain,n    [string]$brokernamen  )nn  write-log -message Creating script;n  write-log -message Using broker @@{XBS.BrokerName[0]}@@.$($windowsdomain)nn  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceid'n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript cwindowstempCitrixNTNX.log'n  [ARRAY]$OUTPUT += [STRING]'& $($driveletter)x64XenDesktop SetupXenDesktopVDASetup.exe components VDA noreboot quiet disableexperiencemetrics CONTROLLERS @@{XBS.BrokerName[0]}@@.@@{WindowsDomain}@@ ENABLE_HDX_PORTS ENABLE_REAL_TIME_TRANSPORT ENABLE_FRAMEHAWK_PORT ENABLE_HDX_UDP_PORTS ENABLE_REMOTE_ASSISTANCE OPTIMIZE'nn  write-log -message Creating Task;n  $username = ($serviceaccount -split )[1]n  $OUTPUT  OUT-FILE CwindowstempCitrix.ps1n  $argumentList = -file CWindowsTempCitrix.ps1n  $jobname = PowerShell Citrix Install;n  $action = New-ScheduledTaskAction -Execute $pshomepowershell.exe -Argument  $argumentList;n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Daten  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;n  $SecurePassword = $servicepassword  ConvertTo-SecureString -AsPlainText -Forcen  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePasswordn  $CredPassword = $Credentials.GetNetworkCredential().Password n  write Creating Task with User $($WindowsDomain)$($username)n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel Highest -User $($WindowsDomain)$($username) -Password $CredPasswordn  # n  Get-ScheduledTask $jobname  start-scheduledtaskn  n  do {n    sleep 40n    $count++n    $state = (Get-ScheduledTask $jobname).staten    write-log Task is $staten  } until ($Count -ge 20 -or $state -eq Running)n  $status = Successnn  write-log -message All Done here, Citrix Done;n  get-content cwindowstempCitrixNTNX.logn  $resultobject =@{n    Result = $statusn  };n  return $resultobjectn};nnwrite-log -message Creating VDA Selfreg solutionnnwrite 'SET _prefix=%username~0,3%'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpVDAreg.cmd -Encoding ASCIInwrite 'IF %_prefix%==svc powershell.exe -file cwindowstempVDAreg.ps1'  out-file CProgramDataMicrosoftWindowsStart MenuProgramsStartUpVDAreg.cmd -Encoding ASCII -appendn[array]$output += 'set-itemproperty -path HKLMSOFTWARECitrixVirtualDesktopAgent -name ListOfDDCs -Value '  + $brokername + ''n[array]$output += 'restart-service BrokerAgent -force'n$output  out-file cwindowstempVDAreg.ps1 -Encoding ASCIInnwrite-log -message Installing Citrix Application Suitenn$driveletter = (Get-CimInstance Win32_LogicalDisk  { $_.DriveType -eq 5}  select DeviceID).deviceidnget-item $($driveletter)x64Citrix Desktop Delivery Controllerpowershell.msi  % {msiexec i $_.fullname qn;sleep 15}nsleep 60nnPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomainnnsleep 200nnnnwrite-log -message Shutdown for clean snapnnShutdown -r -t 10n#write-log -message Ejecting Drivenn#$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuidn#$CDrom = $VMdetail.vm_disk_info  where {$_.is_cdrom -eq $true}n#if ($cdrom.is_empty -eq $false){n#  n#  write-log -message Unmounting Frame Agentn#  n#  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdromn#}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Wait for Install and Reboot,
							state ACTIVE,
							attrs {
								type ,
								interval_secs 100
							},
							timeout_secs 0,
							type DELAY,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Download and Run Optimizer,
							state ACTIVE,
							attrs {
								exit_status [],
								script $PackageURL                 = @@{CitrixOptimizerPackageURL}@@n$OSChoise                   = @@{WindowsEdition}@@nn### SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic nwrite-log -message Disable Shutdown Trackernnif ( -Not (Test-Path 'registryHKEY_LOCAL_MACHINESOFTWAREPoliciesMicrosoftWindows NTReliability')){n  New-Item -Path 'registryHKEY_LOCAL_MACHINESOFTWAREPoliciesMicrosoftWindows NT' -Name Reliability -Forcen}nSet-ItemProperty -Path 'registryHKEY_LOCAL_MACHINESOFTWAREPoliciesMicrosoftWindows NTReliability' -Name ShutdownReasonOn -Value 0nnwrite-log -message Install Citrix Optimizernn$PkgDir = CCTXOptimizernnmkdir $PkgDirnnwrite Downloading Packagesnwrite Using URL $PackageURLnn$filename = $PackageURL -split   select -last 1n$output = $($PkgDir)$($filename)nn$count = 0ndo {n  $count ++n  try {n    $wc = New-Object net.webclientn    $wc.Downloadfile($PackageURL, $output)n    $failed = 0n  } catch {n    sleep 15n    $failed = 1n  }n} until ($count -ge 4 -or $failed -eq 0)nnExpand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirnnif ($OSChoise -match 2019){n  $template = $($PkgDir)TemplatesCitrix_Windows_Server_2019_1809.xml n} elseif ($OSChoise -match 2016){n  $template = $($PkgDir)TemplatesCitrix_Windows_Server_2016_1607.xml n} elseif ($OSChoise -match 10){  n  $template = $($PkgDir)TemplatesCitrix_Windows_10_1903.xmln}nn& $($PkgDir)CtxOptimizerEngine.ps1 -Source $template -Mode Executennshutdown -s -t 5,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigXAS
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Snap Me,
							state ACTIVE,
							attrs {
								exit_status [],
								script $AppshortCode                                          = @@{AC}@@n$AppLongCode                                           = @@{AppLongCode}@@n$customercode                                          = @@{CustomerName}@@n$customerNameLong                                      = @@{CustomerNameLong}@@n$tier                                                  = @@{Tier}@@n$WindowsDomain                                         = @@{WindowsDomain}@@n$target                                                = $($AppshortCode)-$($tier)-$($CustomerCode)-XAS0n$PEAdmin                                               = @@{PC_CRED.username}@@n$PEPass                                                = @@{PC_CRED.secret}@@n$PEClusterIP                                           = @@{PEIP}@@nn# SSL Ignorennadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn## FunctionsnnFunction write-log {n  #n   .Synopsisn   Write logs for debugging purposesn   n   .Descriptionn   This function writes logs based on the message including a time stamp for debugging purposes.n  #n  param (n  $message,n  $sev = INFOn  )n  if ($sev -eq INFO){n  write-host $(get-date -format hhmmss)  INFO  $messagen  } elseif ($sev -eq WARN){n  write-host $(get-date -format hhmmss)  WARN  $messagen  } elseif ($sev -eq ERROR){n  write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n  write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Create-SnapShot {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $vmId,n    [string] $snapname = CitrixBasen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing SnapShot Create on $($vm.vmid)nn  $URL = https$($PEClusterIP)9440apinutanixv0.8snapshotsnn  $json = @n{n  snapshotSpecs [{n    vmUuid $($vmId),n    snapshotName $($snapname)n  }]n}n@n  try {n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }catch{nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    sleep 10n    $task = Invoke-RestMethod -Uri $URL -method post -body $json -ContentType 'applicationjson' -headers $headers;n  }n  Return $taskn} nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nn### Logicnn$vms = rest-get-vms -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnnwrite-log -message Searching for $targetnn$vm = $vms.entities  where {$_.vmname -eq $target}nnwrite-log -message Using VM ID $($vm.vmid)n$Guid = (new-guid).guidn$snap = REST-Create-SnapShot -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -vmId $vm.vmid -snapname $Guidnwrite SnapshotName=$($Guid),
								eval_variables [SnapshotName],
								eval_scope local,
								script_type npsscript,
								type ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type SET_VARIABLE,
							variable_list []
						}],
						description ,
						name 03aaea22_runbook_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 9ed4ee76_dag_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure XAS Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name d69d1f47_dag_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 9ed117f4_runbook_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d69d1f47_dag_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}, {
				description ,
				action_list [],
				type DEB,
				service_local_reference_list [{
					kind app_service,
					name ConfigSQL1
				}],
				name Configure SQL1 Part 2,
				version ,
				options {
					install_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure SQL1 Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [{
								kind app_task,
								name Install 6 Hix Empty DB
							}],
							name 9ed4ee76_dag_cloned_1_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name ConfigSQL1
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name Install 6 Hix Empty DB,
							state ACTIVE,
							attrs {
								exit_status [],
								script ### Variablesn$WindowsDomain    = @@{WindowsDomain}@@n$AppshortCode     = @@{AC}@@n$AppLongCode      = @@{AppLongCode}@@n$Tier             = @@{Tier}@@n$customercode     = @@{CustomerName}@@n$HixEmptyDBURL    = @@{HixEmptyDBURL}@@n$HixDBServer      = $($AppshortCode)-$($tier)-$($CustomerCode)-SQL1           n$HixTargetDBName  = $($AppLongCode)-$($tier)-$($CustomerCode)nn                        n### Assembliesnnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nn### FunctionsnnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nn## Logic nnif ($envcomputername -eq $HixDBServer ){n  $Maincount = 0n  do {n    $maincount ++n    write-log -message Download $AppLongCode Databasen    n    $PkgDir = RTempn  n    mkdir $PkgDirn    n    write Using URL $HixEmptyDBURLn  n    $filename = $hixEmptyDBURL -split   select -last 1n    $output = $($PkgDir)$($filename)n  n    $count = 0n    do {n      $count ++n      try {n        $wc = New-Object net.webclientn        $wc.Downloadfile($hixEmptyDBURL, $output)n        $failed = 0n      } catch {n        sleep 15n        $failed = 1n      }n    } until ($count -ge 4 -or $failed -eq 0)n    n    Expand-Archive -Path $($PkgDir)$($filename) -DestinationPath $PkgDirn    $item = get-item $($PkgDir).bakn  } until ($maincount -ge 5 -or $item)nn  write-log Restoring $AppLongCode Database(s)n  $count = 0n  do {n    if ($count -eq 0){n      $HixTargetDBName = $($AppLongCode)_$($Tier)_ENVIRONMENTSn      $bakfile = $($PkgDir)HiX_ENVIRONMENTS.bakn    } elseif ($count -eq 1){n      $HixTargetDBName = $($AppLongCode)_$($Tier)_ENVSETTINGSn      $bakfile = $($PkgDir)HiX_ENVSETTINGS.bakn    } elseif ($count -eq 2){n      $HixTargetDBName = $($AppLongCode)_$($Tier)_MMn      $bakfile = $($PkgDir)HiX_MM.bakn    } elseif ($count -eq 3){n      $HixTargetDBName = $($AppLongCode)_$($Tier)n      $bakfile = $($PkgDir)HiX_DEV.bakn    } elseif ($count -eq 4){n      $HixTargetDBName = $($AppLongCode)_$($Tier)_AUDITLOGn      $bakfile = $($PkgDir)HiX_PROD_AUDITLOG.bakn    } elseif ($count -eq 5){n      $HixTargetDBName = $($AppLongCode)_$($Tier)_UXIPLOGn      $bakfile = $($PkgDir)HiX_UXIPLOG.bakn    }n    Restoring $AppLongCode Database $HixTargetDBNamen    Restore-SqlDatabase -ServerInstance $HixDBServer -Database $HixTargetDBName -BackupFile $bakfile -ReplaceDatabasen    $count++n  } until ($count -ge 6)n  Set-Location SQLSERVERSQL$($HixDBServer)MSSQLSERVERn  Invoke-Sqlcmd -Query UPDATE dbo.ziscon_domain SET name = $($WindowsDomain) WHERE id='chipsoft02' -Database $($AppLongCode)_$($Tier)n  $error.clear()n}nn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 03aaea22_runbook_cloned_0_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name 9ed4ee76_dag_cloned_1_cloned_1
						},
						message_list [],
						variable_list []
					},
					type ,
					uninstall_runbook {
						task_definition_list [{
							target_any_local_reference {
								kind app_package,
								name Configure SQL1 Part 2
							},
							retries 0,
							description ,
							message_list [],
							child_tasks_local_reference_list [],
							name d69d1f47_dag_cloned_1_cloned_1,
							state ACTIVE,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}],
						description ,
						name 9ed117f4_runbook_cloned_0_cloned_0,
						state ACTIVE,
						main_task_local_reference {
							kind app_task,
							name d69d1f47_dag_cloned_1_cloned_1
						},
						message_list [],
						variable_list []
					}
				},
				variable_list []
			}],
			app_profile_list [{
				deployment_create_list [{
					type GREENFIELD,
					action_list [],
					name 9827a25e_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Install Management Server
					}],
					substrate_local_reference {
						kind app_substrate,
						name Mgt Box
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name 00a6305e_deployment,
					min_replicas 2,
					default_replicas 2,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 2,
					package_local_reference_list [{
						kind app_package,
						name Install SQL
					}],
					substrate_local_reference {
						kind app_substrate,
						name MSSQL 2017 Single Instances
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name 828ac615_deployment,
					min_replicas 3,
					default_replicas 3,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 3,
					package_local_reference_list [{
						kind app_package,
						name Install App Servers
					}],
					substrate_local_reference {
						kind app_substrate,
						name Hix App Servers
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name d54122c2_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Install XenApp Servers
					}],
					substrate_local_reference {
						kind app_substrate,
						name Xen App Servers
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name da2599c7_deployment,
					min_replicas 4,
					default_replicas 4,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 4,
					package_local_reference_list [{
						kind app_package,
						name Install Xen Backend Servers
					}],
					substrate_local_reference {
						kind app_substrate,
						name Xen App Backend Servers
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name a7eb873b_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Config XenDesktop Backend Servers
					}],
					substrate_local_reference {
						kind app_substrate,
						name Execute on XBS0
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name 343f5662_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Configure MGT Part 2
					}],
					substrate_local_reference {
						kind app_substrate,
						name Execute on MGT0
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name 658658dc_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Configure XAS Part 2
					}],
					substrate_local_reference {
						kind app_substrate,
						name Execute on XAS0
					},
					variable_list [],
					description 
				}, {
					type GREENFIELD,
					action_list [],
					name b2b237cc_deployment,
					min_replicas 1,
					default_replicas 1,
					depends_on_list [],
					published_service_local_reference_list [],
					max_replicas 1,
					package_local_reference_list [{
						kind app_package,
						name Configure SQL1 Part 2
					}],
					substrate_local_reference {
						kind app_substrate,
						name Execute on SQL1
					},
					variable_list [],
					description 
				}],
				description ,
				action_list [{
					description ,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Generate Report For all Servers
							}],
							name 6d1aee83_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Generate Report For all Servers,
							attrs {
								exit_status [],
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$WindowsDomain          = @@{WindowsDomain}@@n$domainServicePassword  = @@{Domain_Service_Account.secret}@@n$domainServiceUser      = @@{Domain_Service_Account.username}@@n$Tier                   = @@{Tier}@@n$customerNameLong       = @@{CustomerNameLong}@@n$customercode           = @@{CustomerName}@@n$AppshortCode           = @@{AC}@@n$AppLongCode            = @@{AppLongCode}@@nnnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnn##Logicnn$password = $domainServicePassword  ConvertTo-SecureString -asplaintext -force;n$domain = ((Get-WmiObject Win32_ComputerSystem).Domain)n$credential = New-Object System.Management.Automation.PsCredential($($domainServiceUser),$password);nn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnnwrite-log -message Filtering VMsnn$vms = $vms.entities  where {$_.vmname -match ^$($AppshortCode)-$($Tier)-$($customercode).}nnwrite-log -message We have $($Vms.count) Vms after filtering for tier $Tier and customer $customercodennForeach ($VM in $vms){n#write $vmsn  $Target = $($vm.vmname).$($WindowsDomain)n  if ($Vm.vmname -eq $VMName){n    $hotfixoutput += Get-HotFix -ComputerName $Targetn  }n  write Connecting to $Targetn  $hotfixoutput += Get-HotFix -ComputerName $Target -credential $credentialn}n## HTML settingsn$Header = @nstylenTABLE {border-width 1px;border-style solid;border-color black;border-collapse collapse;}nTH {border-width 1px;padding 3px;border-style solid;border-color black;background-color white;font-size100%;}nTD {border-width 1px;padding 3px;border-style solid;border-color black;width 330px;font-size85%}nstylen@nn$hotfixoutput  select PsComputername,Description,HotFixID,InstalledBy,InstalledOn   convertto-html -title Patching Report -head $Header  out-file cinetpubwwwrootPatchingReport.html  n$IP = (Get-NetIPAddress where {$_.interfacealias -eq Ethernet -and $_.ipaddress -notmatch }).IPAddressnwrite Please open the report at http$($ip)PatchingReport.html,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 0443dcbb_runbook,
						main_task_local_reference {
							kind app_task,
							name 6d1aee83_dag
						},
						variable_list []
					},
					name Windows Patching Generate Report
				}, {
					description ,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Install Updates
							}],
							name 78fca311_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Install Updates,
							attrs {
								exit_status [],
								script $VMName                 = @@{platform.status.name}@@n$PEAdmin                = @@{PC_CRED.username}@@n$PEPass                 = @@{PC_CRED.secret}@@n$PEClusterIP            = @@{PEIP}@@n$WindowsDomain          = @@{WindowsDomain}@@n$domainServicePassword  = @@{Domain_Service_Account.secret}@@n$domainServiceUser      = @@{Domain_Service_Account.username}@@n$Tier                   = @@{Tier}@@n$customerNameLong       = @@{CustomerNameLong}@@n$customercode           = @@{CustomerName}@@n$AppshortCode           = @@{AC}@@n$AppLongCode            = @@{AppLongCode}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnFunction REST-Get-VM-Detail {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $uuidn  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv2.0vms$($uuid)include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=truenn  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNnn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found a VM called $($task.name)nn  Return $taskn} nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnn##Logicnn$password = $domainServicePassword  ConvertTo-SecureString -asplaintext -force;n$domain = ((Get-WmiObject Win32_ComputerSystem).Domain)n$credential = New-Object System.Management.Automation.PsCredential($($domainServiceUser),$password);nn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdminnnwrite-log -message Filtering VMsnn$vms = $vms.entities  where {$_.vmname -match ^$($AppshortCode)-$($Tier)-$($customercode).}nnwrite-log -message We have $($Vms.count) Vms after filtering for tier $Tier and customer $customercoden[array]$vms = $vms.vmnamen$string = $vms -join ,nnInvoke-WUInstall -ComputerName $string -Script {ipmo PSWindowsUpdate; Add-WUServiceManager -ServiceID 7971f918-a847-4430-9279-4a52d1efe18d -confirm0;Get-WUInstall u2013MicrosoftUpdate u2013AcceptAll u2013AutoReboot -confirm0  Out-File CPSWindowsUpdate.log } -Confirm$false u2013Verbosennget-content CPSWindowsUpdate.log  out-file cinetpubwwwrootInstallReport.htmlnn$IP = (Get-NetIPAddress where {$_.interfacealias -eq Ethernet -and $_.ipaddress -notmatch }).IPAddressnnwrite Please open the report at http$($ip)InstallReport.htmlnn,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name d2ec012f_runbook,
						main_task_local_reference {
							kind app_task,
							name 78fca311_dag
						},
						variable_list []
					},
					name Windows Patching Install Patches
				}, {
					description Clones the ERA HIX Prod Database Into this instance.,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Clone Prod Database
							}],
							name 769b1dc4_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Clone Prod Database,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$WindowsDomainUser          = @@{Domain_Service_Account.username}@@n$WindowsDomainPass          = @@{Domain_Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@n$targetTierDB               = @@{ERAProdDB}@@n$SourceProdDB               = @@{ERATargetDB}@@n$EraIP                      = @@{ConfigMGT.ERAIP}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnnFunction REST-ERA-GetClusters {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)8443erav0.8clustersnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-Get-Database-Servers {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)erav0.8dbserversnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Instances {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Timemachinesnn  $URL = https$($EraIP)erav0.8tmsnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Snapshots {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $TMsIDn  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA TimeMachine $TMsID Capabilitynn  $URL = https$($EraIP)erav0.8tms$($TMsID)capabilitytype=real&time-zone=EuropeAmsterdamnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Accociate-TMS-With-MSSQL-Server {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $TmsID,n    [object] $dbservern  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Associating Database Server $($dbserver.id) with TMS $($TmsID)nn  $URL = https$($EraIP)erav0.8tms$($TmsID)dbserversaction=associate;nn$body = @n[n  $($dbserver.id)n]n@nn  try {n    $task = Invoke-RestMethod -Uri $URL -method POST -body $body -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    write-log -message Already done bossn    #$task = Invoke-RestMethod -Uri $URL -method POST -body $body -headers $headers;nn    $error.clear()n  }  n  Return $taskn} nn### Logicnnwrite-log -message Getting ERA Clusternn$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnwrite-log -message We found the era cluster $($ERACluster.id)nwrite-log -message Getting ERA TimeMachinesnn$timemachines = REST-ERA-Get-TimeMachine-Instances -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnwrite-log -message We found $($TimeMachines.count) Timemachinesnwrite-log -message Searching for $SourceProdDB TimeMachinenn$timemachine = $timemachines  where {$_.name -eq $SourceProdDB }nnif ($timemachine){nn  write-log -message We found $SourceProdDB with ID $($TimeMachine.id)n  write-log -message Getting the latest Snapshot, its ID.nn  $snapshots = REST-ERA-Get-TimeMachine-Snapshots -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMIDn  $snapshot = $snapshots.capability.Snapshots sort dateCreated select -last 1nn  write-log -message We are using snapshot $($snapshot.id) created on $($snapshot.dateCreated) with name $($snapshot.name)n  Write-log -message Making sure the Database server is authorised for the timemachinenn  $dbservers = REST-ERA-Get-Database-Servers -EraIP $EraIP -clpassword $PEpass -clusername $PEadminn  $dbserver = $dbservers  where {$_.name -eq $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1}nn  if (!$dbserver){nn    write-log -message This $applongcode SQL server is not registered, please register the server first.n    write-log -message Please use Calm Day 2 actions to Register this database server first.nn  } else {nn    $connect = REST-ERA-Accociate-TMS-With-MSSQL-Server -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMID -dbserver $dbservernnn  }nn}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 6d843c2a_runbook,
						main_task_local_reference {
							kind app_task,
							name 769b1dc4_dag
						},
						variable_list [{
							regex {
								should_validate false,
								value ^.$
							},
							val_type STRING,
							is_mandatory false,
							description ,
							data_type BASE,
							type EXEC_LOCAL,
							name ERAProdDB,
							value ,
							label Select the ERA Hix Production Time Machine,
							attrs {
								type 
							},
							editables {
								value true
							},
							is_hidden false,
							options {
								type EXEC,
								attrs {
									script api_url = 'https@@{ConfigMGT.ERAIP}@@erav0.8tms'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nr = urlreq(api_url, verb='GET', auth=BASIC, user='@@{PC_CRED.username}@@', passwd='@@{PC_CRED.secret}@@', headers=headers, verify=False)n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nDatabases = []nfor i in respn    Databases.append(str(i['name']))n#print (authProv)nprint(','.join(Databases)),
									type EXEC,
									command_line_args ,
									exit_status [],
									script_type static
								}
							}
						}, {
							val_type STRING,
							is_mandatory false,
							description ,
							data_type BASE,
							type LOCAL,
							name ERATargetDB,
							value Change Me,
							label Enter the Target Database Name for this instance,
							attrs {
								type 
							},
							editables {
								value true
							},
							is_hidden false,
							options {
								type PREDEFINED,
								choices []
							}
						}]
					},
					name ERA Clone Prod DB
				}, {
					description ,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Register SQL Server
							}],
							name a6f35a80_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Register SQL Server,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$WindowsDomainUser          = @@{Domain_Service_Account.username}@@n$WindowsDomainPass          = @@{Domain_Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@n$EraIP                      = @@{ConfigMGT.ERAIP}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnnFunction REST-ERA-GetClusters {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)8443erav0.8clustersnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-GET-MSSQL-Servers {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Database Serversnn  $URL = https$($EraIP)erav0.8dbservers;nn  write-log -message Using URL $urlnnn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-Regoister-MSSQL-Server {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $WindowsDomain,n    [string] $WindowsDomainUser, n    [string] $WindowsDomainPass,n    [string] $MSSQLVMIP,n    [string] $MSSQLVMName,n    [object] $ERAClustern  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Registering HIX Database Servernn  $URL = https$($EraIP)erav0.8dbservers;nn  $body = @n{n  status 8,n  timeMachineId null,n  forcedInstall true,n  ownerId 1,n  type register_host,n  actionArguments [],n  vmInfo [n    {n      name application_type,n      value sqlserver_databasen    },n    {n      name working_dir,n      value Ctempn    },n    {n      name era_deploy_base,n      value CNTNXERA_BASEn    },n    {n      name same_as_admin,n      value truen    },n    {n      name create_era_drive,n      value truen    },n    {n      name sql_login_used,n      value falsen    },n    {n      name sysadmin_username_win,n      value $($WindowsDomainUser)n    },n    {n      name sysadmin_password_win,n      value $($WindowsDomainPass)n    },n    {n      name instance_name,n      value MSSQLSERVERn    }n  ],n  actionHeader [n    {n      name cloudId,n      value $($ERACluster.id)n    },n    {n      name cloudName,n      value nulln    },n    {n      name host_ip,n      value $($MSSQLVMIP)n    },n    {n      name vm_name,n      value $($MSSQLVMName)n    },n    {n      name host_username,n      value $($WindowsDomainUser)n    },n    {n      name host_password,n      value $($WindowsDomainPass)n    }n  ]n}n@nn  try {n    $task = Invoke-RestMethod -Uri $URL -method POST -body $body -headers $headers;n  } catch {n    sleep 10n    $error.clear()nn    $task = Invoke-RestMethod -Uri $URL -method POST -body $body -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnWrite-log -message Query ERA Clusternn$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnWrite-log -message Using ERA Cluster $($ERACluster.id)nn$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadminnn$vm = $vms.entities  where {$_.vmname -eq $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1}nn$VMIP = $vm.ipAddresses  where { $_ -notmatch ^169}nnWrite-log -message Getting existing MSSQL database servers, searching for $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1nn$existingERAServers = REST-ERA-GET-MSSQL-Servers -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminn$register = 1nForeach ($server in $existingERAServers.name){n  if ($server -eq $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1){nn    write-log -message Server  $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1 is already registered.nn    $register = 0n  } n}nif ($register -eq 1){n  n  write-log -message Server $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1 has NOT been registered, executing ERA Registration.nn  $register = REST-ERA-Regoister-MSSQL-Server -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin -WindowsDomain $WindowsDomain -WindowsDomainUser $WindowsDomainUser -WindowsDomainPass $WindowsDomainPass -MSSQLVMIP $VMIP -MSSQLVMName $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1 -ERACluster $ERAClustern  nn  n}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 84f1735c_runbook,
						main_task_local_reference {
							kind app_task,
							name a6f35a80_dag
						},
						variable_list []
					},
					name ERA Register HIX Database Server
				}, {
					description Clones the ERA HIX Prod Database Into this instance.,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Create Snapshot
							}],
							name 769b1dc4_dag_cloned_1,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Create Snapshot,
							attrs {
								exit_status [],
								script $PEClusterIP                = @@{PEIP}@@n$PEadmin                    = @@{PC_CRED.username}@@n$PEpass                     = @@{PC_CRED.secret}@@n$VFilername                 = @@{FileServer}@@n$WindowsAdDomainName        = @@{WindowsDomain}@@n$WindowsDomainUser          = @@{Domain_Service_Account.username}@@n$WindowsDomainPass          = @@{Domain_Service_Account.secret}@@n$tier                       = @@{Tier}@@n$CustomerCode               = @@{CustomerName}@@n$Appshortcode               = @@{AC}@@n$AppLongcode                = @@{AppLongCode}@@n$DummyADContent             = @@{DummyADContent}@@n$customerNameLong           = @@{CustomerNameLong}@@n$targetTierDB               = @@{ERAProdDB}@@n$SourceProdDB               = @@{ERATargetDB}@@n$snapshotName               = @@{SnapShotName}@@n$EraIP                      = @@{ConfigMGT.ERAIP}@@nnadd-type @n  using System.Net;n  using System.Security.Cryptography.X509Certificates;n  public class TrustAllCertsPolicy  ICertificatePolicy {n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,n                                        WebRequest request, int certificateProblem) {n          return true;n      }n   }n@nn[System.Net.ServicePointManager]CertificatePolicy = New-Object TrustAllCertsPolicyn[Net.ServicePointManager]SecurityProtocol = [Net.SecurityProtocolType]Ssl3, [Net.SecurityProtocolType]Tls, [Net.SecurityProtocolType]Tls11, [Net.SecurityProtocolType]Tls12nnFunction write-log {n  param (n  $message,n  $sev = INFO,n  $slacklevel = 0n  )n  if ($sev -eq INFO){n    write-host $(get-date -format hhmmss)  INFO   $messagen  } elseif ($sev -eq WARN){n    write-host $(get-date -format hhmmss)  WARN   $messagen  } elseif ($sev -eq ERROR){n    write-host $(get-date -format hhmmss)  ERROR  $messagen  } elseif ($sev -eq CHAPTER){n    write-host `n`n### $message`n`nn  }n} nnfunction Get-FunctionName {n  param (n    [int]$StackNumber = 1n  ) n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionNamen}nnFunction REST-Get-VMs {n  Param (n    [string] $PEClusterIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Executing VM Listnn  $URL = https$($PEClusterIP)9440PrismGatewayservicesrestv1vmsn n  try{n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  }n  write-log -message We found $($task.entities.count) items.nn  Return $taskn} nnnFunction REST-ERA-GetClusters {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)8443erav0.8clustersnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-Get-Database-Servers {n  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Clustersnn  $URL = https$($EraIP)erav0.8dbserversnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Instances {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusernamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA Timemachinesnn  $URL = https$($EraIP)erav0.8tmsnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnFunction REST-ERA-Get-TimeMachine-Snapshots {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $TMsIDn  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA TimeMachine $TMsID Capabilitynn  $URL = https$($EraIP)erav0.8tms$($TMsID)capabilitytype=real&time-zone=EuropeAmsterdamnn  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method GET -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nnnFunction REST-ERA-Create-TimeMachine-Snapshot {nn  Param (n    [string] $EraIP,n    [string] $clpassword,n    [string] $clusername,n    [string] $TMsID,n    [string] $snapshotnamen  )nn  write-log -message Debug level is $($debug);n  write-log -message Building Credential objectn  $credPair = $($clusername)$($clpassword)n  $encodedCredentials = [System.Convert]ToBase64String([System.Text.Encoding]ASCII.GetBytes($credPair))n  $headers = @{ Authorization = Basic $encodedCredentials }nn  write-log -message Query ERA TimeMachine $TMsID Capabilitynhttps10.42.75.39erav0.8tmsc1b29f99-6236-4d9d-bb2c-4086a4344e23snapshotsn  $URL = https$($EraIP)erav0.8tms$($TMsID)snapshotsn  $BODY = @n{n  actionHeader [{n    name snapshotName,n    value $($snapshotname)n  }]n}n@n  write-log -message Using URL $URLn  write-log -message Using IP $($EraIP)nn  try {n    $task = Invoke-RestMethod -Uri $URL -method post -body $body -headers $headers;n  } catch {n    sleep 10n    $error.clear()n    $task = Invoke-RestMethod -Uri $URL -method post -body $body -headers $headers;nn    $FName = Get-FunctionName;write-log -message Error Caught on function $FName -sev WARNn  }  n  Return $taskn} nn### Logicnnwrite-log -message Getting ERA Clusternn$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnwrite-log -message We found the era cluster $($ERACluster.id)nwrite-log -message Getting ERA TimeMachinesnn$timemachines = REST-ERA-Get-TimeMachine-Instances -EraIP $ERAIP -clpassword $PEpass -clusername $PEadminnnwrite-log -message We found $($TimeMachines.count) Timemachinesnwrite-log -message Searching for $SourceProdDB TimeMachinenn$timemachine = $timemachines  where {$_.name -eq $SourceProdDB }nnif ($timemachine){nn  write-log -message We found $SourceProdDB with ID $($TimeMachine.id)n  write-log -message Creating a new shapshotnn  $snapshot = REST-ERA-Create-TimeMachine-Snapshot -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMID -snapshotname $snapshotnamen n  write-log -message a new shapshot has been createdn  write $snapshotnn}n,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 6d843c2a_runbook_cloned_0,
						main_task_local_reference {
							kind app_task,
							name 769b1dc4_dag_cloned_1
						},
						variable_list [{
							regex {
								should_validate false,
								value ^.$
							},
							val_type STRING,
							is_mandatory false,
							description ,
							data_type BASE,
							type EXEC_LOCAL,
							name ERAProdDB,
							value ,
							label Select the ERA Hix Production Time Machine,
							attrs {
								type 
							},
							editables {
								value true
							},
							is_hidden false,
							options {
								type EXEC,
								attrs {
									script api_url = 'https@@{ConfigMGT.ERAIP}@@erav0.8tms'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nr = urlreq(api_url, verb='GET', auth=BASIC, user='@@{PC_CRED.username}@@', passwd='@@{PC_CRED.secret}@@', headers=headers, verify=False)n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nDatabases = []nfor i in respn    Databases.append(str(i['name']))n#print (authProv)nprint(','.join(Databases)),
									type EXEC,
									command_line_args ,
									exit_status [],
									script_type static
								}
							}
						}, {
							val_type STRING,
							is_mandatory false,
							description ,
							data_type BASE,
							type LOCAL,
							name ERATargetDB,
							value Change Me,
							label Enter the Target Database Name for this instance,
							attrs {
								type 
							},
							editables {
								value true
							},
							is_hidden false,
							options {
								type PREDEFINED,
								choices []
							}
						}, {
							val_type STRING,
							is_mandatory true,
							description ,
							data_type BASE,
							type LOCAL,
							name SnapShotName,
							value ,
							label Enter the name for the snapshot,
							attrs {
								type 
							},
							editables {
								value true
							},
							is_hidden false,
							options {
								type PREDEFINED,
								choices []
							}
						}]
					},
					name ERA Create Prod Snapshot
				}, {
					description Only use for non prod instances. Source DB is selected in ERA, Target DB is as per running tier instance of this app. ,
					type user,
					critical false,
					runbook {
						task_definition_list [{
							retries 0,
							description ,
							child_tasks_local_reference_list [{
								kind app_task,
								name Not Implemented
							}],
							name 404f6c88_dag,
							attrs {
								edges [],
								type 
							},
							timeout_secs 0,
							type DAG,
							variable_list []
						}, {
							target_any_local_reference {
								kind app_service,
								name MGT
							},
							retries 0,
							description ,
							child_tasks_local_reference_list [],
							name Not Implemented,
							attrs {
								exit_status [],
								script write TBD,
								script_type npsscript,
								type ,
								command_line_args ,
								login_credential_local_reference {
									kind app_credential,
									name Domain_Service_Account
								}
							},
							timeout_secs 0,
							type EXEC,
							variable_list []
						}],
						description ,
						name 20786e2c_runbook,
						main_task_local_reference {
							kind app_task,
							name 404f6c88_dag
						},
						variable_list []
					},
					name ERA Refresh Prod To Tier
				}],
				name HiX Deployment,
				variable_list [{
					regex {
						should_validate true,
						value ^[A-Za-z0-9-_]{1,3}$
					},
					val_type STRING,
					is_mandatory false,
					description Short Customer Code for naming conventionn3 Chars Short, Upper, Lower, Nrs - and _ are allowed,
					data_type BASE,
					type LOCAL,
					name CustomerName,
					value NTX,
					label Enter Customer Short Code (3 Chars),
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					regex {
						should_validate false,
						value ^.$
					},
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name Tier,
					value DEV,
					label Select the Tier for this deployment,
					attrs {
						type LOCAL
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices [DEV, PRD, ACC, TST]
					}
				}, {
					regex {
						should_validate false,
						value ^.$
					},
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type EXEC_LOCAL,
					name WindowsDomain,
					value ,
					label Select Domain Name,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type EXEC,
						attrs {
							script api_url = 'httpslocalhost9440PrismGatewayservicesrestv1authconfig'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nr = urlreq(api_url, verb='GET', auth=BASIC, user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nauthProv = []nfor i in resp['directoryList']n    authProv.append(str(i['domain']))nauthProv.append(Create New)n#print (authProv)nprint(','.join(authProv)),
							type EXEC,
							command_line_args ,
							exit_status [],
							script_type static
						}
					}
				}, {
					val_type STRING,
					is_mandatory true,
					description Password for all DevTest Users, the same password is used when generating 100s of test users, needs to comply to AD password policy,
					data_type BASE,
					type SECRET,
					name UserPassword,
					value ,
					label Enter the Password for user accounts,
					attrs {
						is_secret_modified false,
						secret_reference {},
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Long Customer Name, Can contain spaces etc.,
					data_type BASE,
					type LOCAL,
					name CustomerNameLong,
					value Nutanix,
					label Enter Customer Long Name,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Password for admin accounts specified in AdminAccounts, same password is used for all admins, needs to comply to AD password policy,
					data_type BASE,
					type SECRET,
					name AdminPassword,
					value ,
					label Enter the password for the Admin accounts,
					attrs {
						is_secret_modified false,
						secret_reference {},
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Comma Separated list of UPNs to be created, Needs to be a valid UPN for the given domain,
					data_type BASE,
					type LOCAL,
					name AdminAccounts,
					value will.robbinson,
					label Enter the admin UPNs,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					regex {
						should_validate false,
						value ^[d]$
					},
					val_type INT,
					is_mandatory false,
					description Creates random AD users for this HIX Deployment,
					data_type BASE,
					type LOCAL,
					name DummyADContent,
					value 1,
					label Enable Active Directory Dummy Users,
					attrs {
						type LOCAL
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices [1, 0]
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name PEIP,
					value 10.55.46.37,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Internal variable, Image is downloaded as per downloadable config,
					data_type BASE,
					type LOCAL,
					name CitrixImageName,
					value Citrix 1912,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory true,
					description Used for Home drives of test users.,
					data_type BASE,
					type EXEC_LOCAL,
					name FileServer,
					value ,
					label Select the correct Files Server.,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type EXEC,
						attrs {
							script api_url = 'https@@{PEIP}@@9440PrismGatewayservicesrestv1vfilers'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nr = urlreq(api_url, verb='GET', auth=BASIC, user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)n#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nauthProv = []nfor i in resp['entities']n    authProv.append(str(i['name']))nauthProv.append(Create New)n#print (authProv)nprint(','.join(authProv)),
							type EXEC,
							command_line_args ,
							exit_status [],
							script_type static
						}
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name ChocoPackagesURL,
					value httpsdl.dropboxusercontent.comspduqo0i0u6460fzChocoPackages.zip,
					label ,
					attrs {
						type LOCAL
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name ChocoClientPackageURL,
					value httpsdl.dropboxusercontent.comseoyk38rzod4435zchocolatey.zip,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Contains both Nutanix Citrix Binaries,
					data_type BASE,
					type LOCAL,
					name CitrixNutanixPackagesURL,
					value httpsdl.dropboxusercontent.comszr9ld9jygxx8ej8Nutanix-Citrix.zip,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name HixPackageURL,
					value httpsdl.dropboxusercontent.comsrqdts4zlmyjbhffChipSoft.6.2.zip,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Empty Hix DB,
					data_type BASE,
					type LOCAL,
					name HixEmptyDBURL,
					value httpsdl.dropboxusercontent.comscj4dpko6cxu5h10HiX_Leeg.zip,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name XenAppServerCount,
					value 5,
					label ,
					attrs {
						type LOCAL
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices [1, 2, 3, 4, 5]
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type EXEC_LOCAL,
					name StorageContainerName,
					value ,
					label ,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type EXEC,
						attrs {
							script api_url = 'https@@{PEIP}@@9440PrismGatewayservicesrestv2.0storage_containers'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nr = urlreq(api_url, verb='GET', auth=BASIC, user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)n#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nContainerNames = []nfor i in resp['entities']n    ContainerNames.append(str(i['name']))nContainerNames.append(Create New)n#print (authProv)nprint(','.join(ContainerNames)),
							type EXEC,
							command_line_args ,
							exit_status [],
							script_type static
						}
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description AutoSelect will choose the first vlan in the alfabet,
					data_type BASE,
					type EXEC_LOCAL,
					name VLanName,
					value ,
					label Select the VLAN name,
					attrs {
						type 
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type EXEC,
						attrs {
							script api_url = 'https@@{PEIP}@@9440apinutanixv3subnetslist'nheaders = {'Content-Type' 'applicationjson',  'Accept''applicationjson'}n#headers = {'Content-Type' 'applicationjson',  'Accept''applicationjson', 'Authorization' 'Bearer {}'.format(jwt)}nnpayload = {n  kind subnet,n  offset 0,n  length 999n}nnr = urlreq(api_url, verb='POST', auth=BASIC, user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, params=json.dumps(payload), verify=False)nnn#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)nif r.okn    resp = json.loads(r.content)n    #pprint(resp)nelsen    print Post request failed, r.contentn    exit(1)nVLanNames = []nVLanNames.append(AutoSelect)nfor i in resp['entities']n    VLanNames.append(str(i['spec']['name']))nnprint(','.join(VLanNames)),
							type EXEC,
							command_line_args ,
							exit_status [],
							script_type static
						}
					}
				}, {
					regex {
						should_validate false,
						value ^.$
					},
					val_type STRING,
					is_mandatory false,
					description Windows 2019 1809nWindows 2016 1607nWindows 10 1903 (not implemented)n,
					data_type BASE,
					type LOCAL,
					name WindowsEdition,
					value Windows 2016,
					label ,
					attrs {
						type LOCAL
					},
					editables {
						value true
					},
					is_hidden false,
					options {
						type PREDEFINED,
						choices [Windows 2019, Windows 2016, Windows 10]
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name CitrixOptimizerPackageURL,
					value httpsdl.dropboxusercontent.comseo1lw55gwsovjntCitrixOptimizer.zip,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description Short app code only 2 chars,
					data_type BASE,
					type LOCAL,
					name AC,
					value HX,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description App long code, max 6 chars,
					data_type BASE,
					type LOCAL,
					name AppLongCode,
					value HIX,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name Z_PCPassClearText,
					value xx,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description ,
					data_type BASE,
					type LOCAL,
					name Z_PCUser,
					value admin,
					label ,
					attrs {
						type 
					},
					editables {
						value false
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices []
					}
				}, {
					val_type STRING,
					is_mandatory false,
					description 1 of this BP is running on 1-click-demo.nThis is because the presence of the Certificate Auth. if 0 Xen install reverts to self signed.,
					data_type BASE,
					type LOCAL,
					name OneCDPresent,
					value 1,
					label ,
					attrs {
						type LOCAL
					},
					editables {
						value true
					},
					is_hidden true,
					options {
						type PREDEFINED,
						choices [1, 0]
					}
				}]
			}],
			published_service_definition_list [],
			default_credential_local_reference {
				kind app_credential,
				name Service_Account
			},
			type USER
		},
		name 1-Hix-Fix
	},
	api_version 3.0,
	metadata {
		last_update_time 1579138336841740,
		kind blueprint,
		spec_version 14,
		creation_time 1579121679084596,
		name 1-Hix-Fix
	}
}