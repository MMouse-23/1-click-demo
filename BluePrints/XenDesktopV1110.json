{"status":{},"contains_secrets":false,"product_version":"2.9.7","spec":{"description":"-XBS0 = Delivery Controller\n\n-XBS1 = License Server\n\n-XBS2 = StoreFront\n\n-XBS3 = Director (not finished)\n\n-SQL0 = XenApp DB\n\n-App1-3 Client app servers (binaries will be removed)\n\n-SQL1 = Client Database server\n\n-MGT0 = Management machine\n\n-XAS0 = Xen App \/ Desktop template.\n\n-XAI1-5 = AHV\/MCS imaged machine\n\n\n\nThis BP is for AHV Only.\n\nIt has been modified to work with 1-Click-Demo.\n\n\n\nRequirements.\n\n-AD\n\n-PKI in AD\n\n-Admin account to already exist.\n\n-Iso image is not downloaded automatically due to a bug.\n\n-Tested with Citrix 1912","resources":{"client_attrs":{"b2b237cc_deployment":{"y":-2234.6750095957,"x":-397.0992961705},"None":{"y":-2286.1069335938,"x":-48.0192565918},"00a6305e_deployment":{"y":-2535.4625848986,"x":-642.0689737857},"658658dc_deployment":{"y":-2241.1584519133,"x":-53.6642371321},"a7eb873b_deployment":{"y":-2244.4571237867,"x":660.4341665645},"d54122c2_deployment":{"y":-2816.058730609,"x":657.1849367484},"828ac615_deployment":{"y":-2820.7244043595,"x":-372.7730835141},"9827a25e_deployment":{"y":-2829.069314247,"x":139.9945397716},"da2599c7_deployment":{"y":-2522.9479567553,"x":932.3952513518},"343f5662_deployment":{"y":-2236.7370780222,"x":321.6879103295}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"391c3336_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3200c0d1_runbook","main_task_local_reference":{"kind":"app_task","name":"391c3336_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cba0c298_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d156426_runbook","main_task_local_reference":{"kind":"app_task","name":"cba0c298_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ea0f09c8_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cebace0e_runbook","main_task_local_reference":{"kind":"app_task","name":"ea0f09c8_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c043d112_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8cd9dedc_runbook","main_task_local_reference":{"kind":"app_task","name":"c043d112_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"81392976_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5963e13d_runbook","main_task_local_reference":{"kind":"app_task","name":"81392976_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"MGT","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MachineType","value":"MGT","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ServerOU","value":"TBD","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ServerOULate","value":"TBD","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ChocoServer","value":"TBD","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"391c3336_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3200c0d1_runbook_cloned_1","main_task_local_reference":{"kind":"app_task","name":"391c3336_dag_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cba0c298_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d156426_runbook_cloned_1","main_task_local_reference":{"kind":"app_task","name":"cba0c298_dag_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ea0f09c8_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cebace0e_runbook_cloned_1","main_task_local_reference":{"kind":"app_task","name":"ea0f09c8_dag_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c043d112_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8cd9dedc_runbook_cloned_1","main_task_local_reference":{"kind":"app_task","name":"c043d112_dag_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"81392976_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5963e13d_runbook_cloned_1","main_task_local_reference":{"kind":"app_task","name":"81392976_dag_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"APP","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MachineType","value":"APP","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"391c3336_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3200c0d1_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"391c3336_dag_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cba0c298_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d156426_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"cba0c298_dag_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ea0f09c8_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cebace0e_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"ea0f09c8_dag_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c043d112_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8cd9dedc_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"c043d112_dag_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"81392976_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5963e13d_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"81392976_dag_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"SQL","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MachineType","value":"SQL","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"InstanceName","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"print 'hello'","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"391c3336_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3200c0d1_runbook_cloned_2","main_task_local_reference":{"kind":"app_task","name":"391c3336_dag_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cba0c298_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d156426_runbook_cloned_2","main_task_local_reference":{"kind":"app_task","name":"cba0c298_dag_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ea0f09c8_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cebace0e_runbook_cloned_2","main_task_local_reference":{"kind":"app_task","name":"ea0f09c8_dag_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c043d112_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8cd9dedc_runbook_cloned_2","main_task_local_reference":{"kind":"app_task","name":"c043d112_dag_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"81392976_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5963e13d_runbook_cloned_2","main_task_local_reference":{"kind":"app_task","name":"81392976_dag_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"XAS","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MachineType","value":"XAS","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"XBS0IP","value":"TBD","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"391c3336_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3200c0d1_runbook_cloned_2_cloned_0","main_task_local_reference":{"kind":"app_task","name":"391c3336_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"cba0c298_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1d156426_runbook_cloned_2_cloned_0","main_task_local_reference":{"kind":"app_task","name":"cba0c298_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ea0f09c8_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cebace0e_runbook_cloned_2_cloned_0","main_task_local_reference":{"kind":"app_task","name":"ea0f09c8_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"c043d112_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8cd9dedc_runbook_cloned_2_cloned_0","main_task_local_reference":{"kind":"app_task","name":"c043d112_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"81392976_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5963e13d_runbook_cloned_2_cloned_0","main_task_local_reference":{"kind":"app_task","name":"81392976_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"XBS","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"MachineType","value":"XBS","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"LIST","type":"LOCAL","name":"BrokerName","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4a6f4b21_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"59813977_runbook","main_task_local_reference":{"kind":"app_task","name":"4a6f4b21_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8946a3b7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"14a744d0_runbook","main_task_local_reference":{"kind":"app_task","name":"8946a3b7_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"694018db_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8ae46186_runbook","main_task_local_reference":{"kind":"app_task","name":"694018db_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ba15d77c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"83e429ef_runbook","main_task_local_reference":{"kind":"app_task","name":"ba15d77c_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"60d1c5c9_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"73591b74_runbook","main_task_local_reference":{"kind":"app_task","name":"60d1c5c9_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"ConfigXBS","port_list":[],"tier":"","variable_list":[],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7133577d_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0ff172e9_runbook","main_task_local_reference":{"kind":"app_task","name":"7133577d_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5ab20368_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"049e423f_runbook","main_task_local_reference":{"kind":"app_task","name":"5ab20368_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"e027f177_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"41477520_runbook","main_task_local_reference":{"kind":"app_task","name":"e027f177_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"82d78136_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"bcfdd589_runbook","main_task_local_reference":{"kind":"app_task","name":"82d78136_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"79c5a20f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7ea7c839_runbook","main_task_local_reference":{"kind":"app_task","name":"79c5a20f_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"ConfigMGT","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.","data_type":"BASE","type":"LOCAL","name":"ERAIP","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7133577d_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0ff172e9_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"7133577d_dag_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5ab20368_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"049e423f_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"5ab20368_dag_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"e027f177_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"41477520_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"e027f177_dag_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"82d78136_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"bcfdd589_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"82d78136_dag_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"79c5a20f_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7ea7c839_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"79c5a20f_dag_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"ConfigXAS","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.","data_type":"BASE","type":"LOCAL","name":"Dummy","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SnapshotName","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7133577d_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"0ff172e9_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"7133577d_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5ab20368_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"049e423f_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"5ab20368_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"e027f177_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"41477520_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"e027f177_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"82d78136_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"bcfdd589_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"82d78136_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"79c5a20f_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7ea7c839_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"79c5a20f_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"ConfigSQL1","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"This Variable is overwritten by a script output, auto detecting the ERA IP address on 1CD based blocks. This is an Internal variable.","data_type":"BASE","type":"LOCAL","name":"Dummy","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"SnapshotName","value":"TBD","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Mgt Box"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5fb6bc48_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"25b9104d_runbook","main_task_local_reference":{"kind":"app_task","name":"5fb6bc48_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Mgt Box"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2926b0f3_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"81c72a0b_runbook","main_task_local_reference":{"kind":"app_task","name":"2926b0f3_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Mgt Box","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"140","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"editables":{"create_spec":{"resources":{"nic_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-MGT@@{calm_array_index}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"9f369820-d6d2-42c7-9db5-a15b87cc5559"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"2048\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-MGT@@{calm_array_index}@@<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"6a2dbdea-3617-43b1-bd86-dfe4e92f9d9d","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"Windows 2019 STD","uuid":"fc621a91-b5ee-4dd6-9b8c-ddd2bbe1ff82"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Hix App Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"e8bb7f3b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"2e7ebfca_runbook","main_task_local_reference":{"kind":"app_task","name":"e8bb7f3b_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Hix App Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"da267928_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1841b533_runbook","main_task_local_reference":{"kind":"app_task","name":"da267928_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Hix App Servers","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"140","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"editables":{"create_spec":{"resources":{"nic_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-APP@@{calm_array_index}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"9f369820-d6d2-42c7-9db5-a15b87cc5559"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"2048\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-APP@@{calm_array_index}@@<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"6a2dbdea-3617-43b1-bd86-dfe4e92f9d9d","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"Windows 2019 STD","uuid":"fc621a91-b5ee-4dd6-9b8c-ddd2bbe1ff82"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"MSSQL 2017 Single Instances"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9364bd66_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"12c9fffe_runbook","main_task_local_reference":{"kind":"app_task","name":"9364bd66_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"MSSQL 2017 Single Instances"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7f662aee_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"7e19ac41_runbook","main_task_local_reference":{"kind":"app_task","name":"7f662aee_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"MSSQL 2017 Single Instances","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"140","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"editables":{"create_spec":{"resources":{"nic_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-SQL@@{calm_array_index}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"9f369820-d6d2-42c7-9db5-a15b87cc5559"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":2,"gpu_list":[],"memory_size_mib":12288,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"2048\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-SQL@@{calm_array_index}@@<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"6a2dbdea-3617-43b1-bd86-dfe4e92f9d9d","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"Windows 2019 STD","uuid":"fc621a91-b5ee-4dd6-9b8c-ddd2bbe1ff82"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Xen App Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7bc081ba_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"43c1911f_runbook","main_task_local_reference":{"kind":"app_task","name":"7bc081ba_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Xen App Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5c0028ca_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"969ed324_runbook","main_task_local_reference":{"kind":"app_task","name":"5c0028ca_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Xen App Servers","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"140","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"editables":{"create_spec":{"resources":{"nic_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-XAS@@{calm_array_index}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"9f369820-d6d2-42c7-9db5-a15b87cc5559"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":4,"gpu_list":[],"memory_size_mib":8192,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"2048\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>*<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"6a2dbdea-3617-43b1-bd86-dfe4e92f9d9d","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"Windows 2016 STD","uuid":"8657a5c8-10c5-4844-8675-a39acb01ea56"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Xen App Backend Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"dc6c4494_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"6fedb502_runbook","main_task_local_reference":{"kind":"app_task","name":"dc6c4494_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Xen App Backend Servers"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"a8f85926_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3d9de96a_runbook","main_task_local_reference":{"kind":"app_task","name":"a8f85926_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Xen App Backend Servers","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"","connection_port":5985,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"140","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"editables":{"create_spec":{"resources":{"nic_list":{},"num_vcpus_per_socket":true,"num_sockets":true,"memory_size_mib":true,"serial_port_list":{}}}},"os_type":"Windows","create_spec":{"name":"@@{AC}@@-@@{Tier}@@-@@{CustomerName}@@-XBS@@{calm_array_index}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"9f369820-d6d2-42c7-9db5-a15b87cc5559"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":2,"num_sockets":4,"gpu_list":[],"memory_size_mib":16384,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":null,"type":"","sysprep":{"is_domain":false,"install_type":"PREPARED","domain_credential_reference":null,"domain":"","dns_ip":"","dns_search_path":"","unattend_xml":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-International-Core\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <InputLocale>0413:00020409<\/InputLocale>\n            <SystemLocale>en-US<\/SystemLocale>\n            <UILanguageFallback>en-US<\/UILanguageFallback>\n            <UserLocale>nl-NL<\/UserLocale>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <AutoLogon>\n                <Enabled>true<\/Enabled>\n                <LogonCount>9999999<\/LogonCount>\n                <Username>Administrator<\/Username>\n                <Password>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/Password>\n            <\/AutoLogon>\n            <OOBE>\n                <HideEULAPage>true<\/HideEULAPage>\n                <HideWirelessSetupInOOBE>true<\/HideWirelessSetupInOOBE>\n                <NetworkLocation>Home<\/NetworkLocation>\n                <ProtectYourPC>2<\/ProtectYourPC>\n            <\/OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <PlainText>true<\/PlainText>\n                    <Value>@@{administrator.secret}@@<\/Value>\n                <\/AdministratorPassword>\n            <\/UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -q<\/CommandLine>\n                    <Description>Win RM quickconfig -q<\/Description>\n                    <Order>20<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm quickconfig -transport:http<\/CommandLine>\n                    <Description>Win RM quickconfig -transport:http<\/Description>\n                    <Order>21<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config @{MaxTimeoutms=\"1800000\"}<\/CommandLine>\n                    <Description>Win RM MaxTimoutms<\/Description>\n                    <Order>22<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/winrs @{MaxMemoryPerShellMB=\"2048\"}<\/CommandLine>\n                    <Description>Win RM MaxMemoryPerShellMB<\/Description>\n                    <Order>23<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service @{AllowUnencrypted=\"true\"}<\/CommandLine>\n                    <Description>Win RM AllowUnencrypted<\/Description>\n                    <Order>24<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/service\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>25<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/client\/auth @{Basic=\"true\"}<\/CommandLine>\n                    <Description>Win RM auth Basic<\/Description>\n                    <Order>26<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c winrm set winrm\/config\/listener?Address=*+Transport=HTTP @{Port=\"5985\"} <\/CommandLine>\n                    <Description>Win RM listener Address\/Port<\/Description>\n                    <Order>27<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=\"remote administration\" new enable=yes <\/CommandLine>\n                    <Description>Win RM adv firewall enable<\/Description>\n                    <Order>29<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net stop winrm <\/CommandLine>\n                    <Description>Stop Win RM Service <\/Description>\n                    <Order>28<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>cmd.exe \/c net start winrm <\/CommandLine>\n                    <Description>Start Win RM Service<\/Description>\n                    <Order>32<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <CommandLine>powershell -Command &quot;Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force&quot;<\/CommandLine>\n                    <Description>Set PowerShell ExecutionPolicy<\/Description>\n                    <Order>1<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-PSRemoting -Force&quot;<\/CommandLine>\n                    <Description>Enable PowerShell Remoting<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>61<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\"&quot;<\/CommandLine>\n                    <Description>Rule RDP Filewall<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>62<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 1&quot;<\/CommandLine>\n                    <Description>Enable RDP2016<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>63<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>powershell -Command &quot;Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0&quot;<\/CommandLine>\n                    <Description>Enable RDP2016p2<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>5<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>RDP adv firewall enable<\/Description>\n                    <CommandLine>cmd.exe \/c netsh advfirewall firewall set rule group=&quot;Remote Desktop&quot; new enable=yes <\/CommandLine>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>31<\/Order>\n                    <CommandLine>cmd.exe \/c sc config winrm start= auto<\/CommandLine>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <Description>No-Delay Auto start WinRM on boot<\/Description>\n                <\/SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>30<\/Order>\n                    <RequiresUserInput>true<\/RequiresUserInput>\n                    <CommandLine>cmd.exe \/c netsh advfirewall set allprofiles state off<\/CommandLine>\n                    <Description>Disable Windows Firewall<\/Description>\n                <\/SynchronousCommand>\n            <\/FirstLogonCommands>\n<ShowWindowsLive>false<\/ShowWindowsLive>\n        <\/component>\n    <\/settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <RunSynchronous>\n                <RunSynchronousCommand wcm:action=\"add\">\n                    <Order>1<\/Order>\n                    <Path>net user administrator \/active:Yes<\/Path>\n                    <WillReboot>Never<\/WillReboot>\n                <\/RunSynchronousCommand>\n            <\/RunSynchronous>\n        <\/component>\n        <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SkipAutoActivation>true<\/SkipAutoActivation>\n        <\/component>\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <ComputerName>*<\/ComputerName>\n        <\/component>\n    <\/settings>\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http:\/\/schemas.microsoft.com\/WMIConfig\/2002\/State\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n            <SetupUILanguage>\n            <UILanguage>en-US <\/UILanguage>\n            <\/SetupUILanguage>\n            <InputLocale>en-US <\/InputLocale>\n            <SystemLocale>en-US <\/SystemLocale>\n            <UILanguage>en-US <\/UILanguage>\n            <UILanguageFallback>en-US <\/UILanguageFallback>\n            <UserLocale>en-US <\/UserLocale>\n        <\/component>\n    <\/settings>\n<\/unattend>","type":""}},"power_state":"ON","type":"","account_uuid":"6a2dbdea-3617-43b1-bd86-dfe4e92f9d9d","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"Windows 2016 STD","uuid":"8657a5c8-10c5-4844-8675-a39acb01ea56"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]},{"description":"","action_list":[],"type":"EXISTING_VM","name":"Execute on XBS0","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"os_type":"Windows","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{XBS.address[0]}@@"},"variable_list":[]},{"description":"","action_list":[],"type":"EXISTING_VM","name":"Execute on MGT0","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"os_type":"Windows","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{MGT.address}@@"},"variable_list":[]},{"description":"","action_list":[],"type":"EXISTING_VM","name":"Execute on XAS0","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"os_type":"Windows","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{XAS.address}@@"},"variable_list":[]},{"description":"","action_list":[],"type":"EXISTING_VM","name":"Execute on SQL1","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true,"login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"os_type":"Windows","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{SQL.address[1]}@@"},"variable_list":[]}],"credential_definition_list":[{"username":"localhost\\administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"administrator"},{"username":"localhost\\svc_hix","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Service_Account"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"PC_CRED"},{"username":"administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"DomainInstallUser"},{"username":"PHX-POC073\\svc_HIX","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Domain_Service_Account"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"MGT"}],"name":"Install Management Server","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install Management Server"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Config OS MGT"},{"kind":"app_task","name":"Wait for Login"},{"kind":"app_task","name":"Create or Config AD"}],"name":"d2d318a8_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Config OS MGT"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create or Config AD"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Config OS MGT","state":"ACTIVE","attrs":{"exit_status":[],"script":"##Vars First\n$AppshortCode   = \"@@{AC}@@\"\n$account        = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n$secpass        = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\n$DomainUsername = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword = \"@@{DomainInstallUser.secret}@@\";\n$serviceaccuser = \"@@{Service_Account.username}@@\"\n$serviceaccpass = \"@@{Service_Account.secret}@@\"\n$NewName        = \"$($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@\"\n$WindowsDomain  = \"@@{WindowsDomain}@@\"\n\n##Functions Second\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n## Logic Last\nwrite \"Setting timezone\"\nset-timezone -id \"W. Europe Standard Time\"\n\nwrite \"Setting up powerscheme\"\npowercfg \/SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\npowercfg \/SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\n\nwrite \"Creating Local Service Account\"\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"$($env:computername)\\$($account)\"\n\nwrite \"Setting Autologon to service account\"\nset-autologon -DefaultUsername $serviceaccuser -DefaultPassword $serviceaccpass -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force\n\nwrite \"Renaming Server\"\nrename-Computer -NewName $NewName -force -confirm:0\n\nwrite \"Rebooting Server\"\nShutdown -r -t 10 -f","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login","state":"ACTIVE","attrs":{"type":"","interval_secs":90},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create or Config AD","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n$AppshortCode     = \"@@{AC}@@\"\n$AppLongCode      = \"@@{AppLongCode}@@\"\n$WindowsDomain    = \"@@{WindowsDomain}@@\"\n$UserPassword     = \"@@{UserPassword}@@\"\n$AdminPassword    = \"@@{AdminPassword}@@\"\n$adminAccounts    = \"@@{AdminAccounts}@@\"\n$serviceuser      = \"@@{Service_Account.username}@@\"\n$servicePassword  = \"@@{Service_Account.secret}@@\"\n$domainPassword   = \"@@{DomainInstallUser.secret}@@\"\n$domainInstallUser= \"@@{DomainInstallUser.username}@@\"\n$Tier             = \"@@{Tier}@@\"\n$customerNameLong = \"@@{CustomerNameLong}@@\"\n$DummyADContent   = \"@@{DummyADContent}@@\"\n$customercode     = \"@@{CustomerName}@@\"\n\n\n\n## Functions \nFunction Generate-DomainContent{\n  param(\n    $UserPassword,\n    $WindowsDomain,\n    $servicePassword,\n    $serviceuser,\n    $domainPassword,\n    $adminAccounts,\n    $adminPassword,\n    $domainInstallUser,\n    $tier,\n    $customerNameLong,\n    $Customercode,\n    $DummyADContent,\n    $AppLongCode,\n    $AppshortCode,\n    $FirstdomaincontrollerIP = (Test-Connection $WindowsDomain -count 1).ipv4address.ipaddresstostring\n  )\n\n  $password = $domainPassword | ConvertTo-SecureString -asplaintext -force;\n  $domain = ((Get-WmiObject Win32_ComputerSystem).Domain)\n  $credential = New-Object System.Management.Automation.PsCredential(\"$($WindowsDomain)\\$($domainInstallUser)\",$password);\n\n  write \"Connecting to the first responding DC $FirstdomaincontrollerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$FirstdomaincontrollerIP\")).hostname \n\n  write \"Reconnecting to latest OS version Name $Dnsname\"\n\n  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $credential {\n    $allDCs = (Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }\n    ($allDCs | sort [version]OperatingSystemVErsion -Desc | select -first 1).IPv4Address\n  }\n\n  write \"Reconnecting to latest OS version DC $LatestDomainControllerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$LatestDomainControllerIP\")).hostname \n\n  write \"Reconnecting to latest OS version Name $Dnsname\"\n\n  [array]$output = invoke-command -computername $Dnsname -credential $credential {\n    start-transcript c:\\windows\\temp\\ADConfig.log \n    $DomainPath       = ((((Get-ADOrganizationalUnit -Filter *) | select -first 1).DistinguishedName).split(',') | where {$_ -match \"DC\"}) -join(',') \n    $tier             = $args[0]\n    $UserPassword     = $args[1]\n    $servicePassword  = $args[2]\n    $adminAccounts    = $args[3]\n    $adminPassword    = $args[4]\n    $customerNameLong = $args[5]\n    $DummyADContent   = $args[6]\n    $serviceuser      = $args[7]\n    $Customercode     = $args[8]\n    $WindowsDomain    = $args[9]\n    $AppshortCode     = $args[10]\n    $AppLongCode      = $args[11]\n    $DNSdomain        = (Get-ADDomain).dnsroot\n    $ServiceAccounts  = \"svc_$($AppLongCode)\",\"svc_sql\",\"svc_xas\",\"svc_xbs\",\"svc_mgt\";\n    $adminPassword    = $adminPassword | convertto-securestring -AsPlainText -Force\n    $UserPassword     = $UserPassword | convertto-securestring -AsPlainText -Force\n    $servicePassword  = $servicePassword | convertto-securestring -AsPlainText -Force\n    write \"Using Domain Path $DomainPath\"\n    write \"(Re-)Creating the Parent OUs\"\n    write \"Cleaning 1CD first\"\n    try {\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-A,OU=Customers,$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-A,OU=Customers,$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}\n     try {\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-B,OU=Customers,$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-B,OU=Customers,$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}\n    try {\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-C,OU=Customers,$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-C,OU=Customers,$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}\n    try {\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-D,OU=Customers,$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=User-Accounts,OU=Customer-D,OU=Customers,$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}   \n    try {\n      Get-ADOrganizationalUnit -Identity \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}\n    try {\n      New-ADOrganizationalUnit -Name \"$($AppLongCode)\" -Path \"$($DomainPath)\";\n    } catch {\n      write \"Not Recreating $($AppLongCode) in $DomainPath\"  \n    };\n    try {\n      New-ADOrganizationalUnit -Name \"Global\" -Path \"OU=$($AppLongCode),$($DomainPath)\";\n    } catch {}\n    write \"(Re-)Creating the Customer OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"$customerNameLong\" -Path \"OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      write \"Not Recreating $($AppLongCode) in $DomainPath OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" \n    };\n    write \"(Re-)Creating the Tier OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"$tier\" -Path \"OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      \n      New-ADOrganizationalUnit -Name \"$tier\" -Path \"OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the Service Account OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"Service Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=Service Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=Service Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"Service Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the Groups OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"Groups\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"Groups\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the Users OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"User Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"User Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the Admins OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"Admin Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"Admin Accounts\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the Servers OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"Servers\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"Servers\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };\n    write \"(Re-)Creating the MCS OU\"\n    try {\n      New-ADOrganizationalUnit -Name \"MCS\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    } catch {\n      Get-ADOrganizationalUnit -Identity \"OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n      New-ADOrganizationalUnit -Name \"MCS\" -Path \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\";\n    };    \n    write \"Creating the Groups\"\n    try {\n        #Global First\n      new-adgroup -groupscope 1 -name \"$($AppLongCode)-Service-Accounts-Group\" -path \"OU=Global,OU=$($AppLongCode),$($DomainPath)\"\n    } catch {\n\n    }\n    new-adgroup -groupscope 1 -name \"$($Customercode)-$($Tier)-Admin-Accounts-Group\" -path \"OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" \n    new-adgroup -groupscope 1 -name \"$($Customercode)-$($Tier)-Service-Accounts-Group\" -path \"OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"\n    new-adgroup -groupscope 1 -name \"$($Customercode)-$($Tier)-User-Accounts-Group\" -path \"OU=Groups,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" \n    \n    if ($DummyADContent -eq 1){\n      write \"Creating Dummy users for $tier\"\n      function Generate-Name {;\n        $lastnames  = \"Smith Johnson Williams Jones Brown Davis Miller Wilson Moore Taylor Anderson Thomas Jackson White Harris Martin Thompson Garcia Martinez Robinson Clark Wright Rodriguez Lopez Lewis Perez Hill Roberts Lee Scott Turner Walker Green Phillips Hall Adams Campbell Allen Baker Parker Young Gonzalez Evans Hernandez Nelson Edwards King Carter Collins\";\n        $firstnames = \"James Christopher Ronald Mary Lisa Michelle John Daniel Anthony Patricia Nancy Laura Robert Paul Kevin Linda Karen Sarah Michael Mark Jason Barbara Betty Kimberly William Donald Jeff Elizabeth Helen Deborah David George Jennifer Sandra Richard Kenneth Maria Donna Charles Steven Susan Carol Joseph Edward Margaret Ruth Thomas Brian Dorothy Sharon\";\n        $first = $firstnames.split(\" \");\n        $Last = $lastnames.split(\" \");\n        $f = $first[ (Get-Random $first.count ) ];\n        $l = $last[ (Get-Random $last.count) ];\n        $full = $f+\".\"+$l;\n        return $full\n      };\n      $count1 = 0 \n      $count2 = 0\n      $names = $null;\n      do {;\n        [array]$names += Generate-name;\n        $count1++;\n      } until ($count1 -eq 1000);\n      write \"We have $($names.count) names\"\n      foreach ($user in $names){;\n        [array]$split = $user.split(\".\")\n        $first = $split[0];\n        $last = $split[1];\n        try {;\n          if ($count2 -le 200){;\n            write \"Creating user $user $count2 out of 200\"\n            new-aduser -name \"$first $last\" -Surname $last -givenname $first -AccountPassword $UserPassword -PasswordNeverExpires $true -SamAccountName \"$($user)\" -userPrincipalName \"$($user)@$($DNSdomain)\" -displayname \"$first $last\" -Company \"$customerNameLong\" -Office \"ChipSoft Amsterdam\" -EmailAddress \"$($user)@$($DNSdomain)\" -path \"OU=User Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" -title \"SR Bot\" -Department \"DevOps\"\n            add-ADGroupMember  \"$($Customercode)-$($Tier)-User-Accounts-Group\" \"$user\" -ea:0 | out-null;\n            $count2 = $count2 + 1;\n          };\n        } catch {;\n          $count2 = $count2 - 1;\n        };\n      };\n    } else {\n      write \"Not Generating dummy accounts in Production\"\n    }\n    \n    Write \"Creating Service Accounts\"\n    foreach ($serviceaccount in $ServiceAccounts){;\n      try {\n        new-aduser -name \"$($serviceaccount)\" -AccountPassword $servicePassword -PasswordNeverExpires $true -userPrincipalName \"$($serviceaccount)@$($DNSdomain)\" -path \"OU=Global,OU=$($AppLongCode),$($DomainPath)\" -ea:0;\n      }catch {}\n      try {\n        add-ADGroupMember  \"$($AppLongCode)-Service-Accounts-Group\" \"$($serviceaccount)\" -ea:0 | out-null;\n      }catch{}\n    };\n    Write \"Creating Admin Accounts\"\n    $adminAccountsARR = $adminAccounts -split  \",\"\n    foreach ($admin in $adminAccountsARR){;\n      [array]$arr = $admin.split(\".\")\n      $firstlast = $arr -join(\" \")\n      new-aduser -name \"$firstlast\" -AccountPassword $adminPassword -PasswordNeverExpires $true -userPrincipalName \"$($admin)@$($DNSdomain)\" -SamAccountName \"$($admin)\" -path \"OU=Admin Accounts,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" -ea:0\n      add-ADGroupMember  \"$($Customercode)-$($Tier)-Admin-Accounts-Group\" \"$($admin)\" -ea:0 | out-null;\n      $error.clear()\n    }; \n\n    Write \"Adding Service Account Group to Domain Admins\"\n    add-ADGroupMember  \"Domain Admins\" \"$($Customercode)-$($Tier)-Service-Accounts-Group\" -ea:0 | out-null;\n    try{\n      add-ADGroupMember  \"Domain Admins\" \"$($AppLongCode)-Service-Accounts-Group\" -ea:0 | out-null;\n    } catch {}\n    Write \"Adding Admin Account Group to Domain Admins\"\n    add-ADGroupMember  \"Domain Admins\" \"$($Customercode)-$($Tier)-Admin-Accounts-Group\" -ea:0 | out-null;\n    Write \"Enabling All $($AppLongCode) $Tier OU Users for customer $customerNameLong\"\n    Get-ADUser -Filter * -SearchBase \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | Enable-ADAccount -ea:0\n    Write \"Cleaning DNS Records\"\n    $hide = Get-DnsServerResourceRecord -ZoneName $($WindowsDomain) | where {$_.hostname -match \"^$($AppshortCode)-$($Tier)-$($CustomerCode)\"}  | Remove-DnsServerResourceRecord -ZoneName $($WindowsDomain) -confirm:0 -force -ea:0\n    $hide = Get-DnsServerResourceRecord -name \"SF-$($CustomerCode)-$($Tier).$($WindowsDomain)\" -ZoneName \"$($WindowsDomain)\" -ea:0 | Remove-DnsServerResourceRecord -ZoneName \"$($WindowsDomain)\" -confirm:0 -force -ea:0\n    $error.clear()\n    Get-ADUser -Filter * -SearchBase \"OU=Global,OU=$($AppLongCode),$($DomainPath)\" | Enable-ADAccount -ea:0\n    ##Write last VAR OU output here\n    write \"OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"\n \n  } -args $tier,$UserPassword,$servicePassword,$adminAccounts,$adminPassword,$customerNameLong,$DummyADContent,$serviceuser,$Customercode,$WindowsDomain,$AppshortCode,$AppLongCode\n  $output | out-file c:\\windows\\temp\\ADConfig.log \n  $output = $output -split \" \"\n  $ServerOU = $output | select -last 1\n  return $ServerOU\n}\n\n## Logic\n\nif ($WindowsDomain -ne \"Create New\"){\n  Write \"Using Existing Windows Domain $WindowsDomain\"\n  $ServerOU = Generate-DomainContent -UserPassword $UserPassword -WindowsDomain $WindowsDomain -domainPassword $domainPassword -servicePassword $servicePassword -adminAccounts $adminAccounts -adminPassword $adminPassword -domainInstallUser $domainInstallUser -tier $tier -customerNameLong $customerNameLong -DummyADContent $DummyADContent -customercode $customercode -AppshortCode $AppshortCode -AppLongCode $AppLongCode\n  $ServerOU = $ServerOU | select -last 1\n} else {\n  Write \"Creating a new domain is not supported yet.\"\n}\nwrite \"ServerOU=$($ServerOU)\"\n","eval_variables":["ServerOU"],"eval_scope":"local","script_type":"npsscript","type":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"5f9e4cab_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d2d318a8_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install Management Server"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Unregister SQL Server in ERA"},{"kind":"app_task","name":"Delete XenDesktop VMs"},{"kind":"app_task","name":"Purge AD"}],"name":"728c8c5c_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Unregister SQL Server in ERA","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$WindowsDomainUser          = \"@@{Domain_Service_Account.username}@@\"\n$WindowsDomainPass          = \"@@{Domain_Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n$EraIP                      = \"@@{ConfigMGT.ERAIP}@@\"\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n\nFunction REST-ERA-GetClusters {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP):8443\/era\/v0.8\/clusters\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-Get-Database-Servers {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/dbservers\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Instances {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Timemachines\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Snapshots {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $TMsID\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA TimeMachine $TMsID Capability\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($TMsID)\/capability?type=real&time-zone=Europe\/Amsterdam\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Remove-MSSQL-Server {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [object] $dbserver\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Deleting Database Server $($dbserver.id)\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($dbserver.id)\/?remove=true\";\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    write-log -message \"I did not exist boss\"\n    #$task = Invoke-RestMethod -Uri $URL -method \"POST\" -body $body -headers $headers;\n\n    $error.clear()\n  }  \n  Return $task\n} \n\n### Logic\n\nwrite-log -message \"Getting ERA Cluster\"\n\n$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nWrite-log -message \"Making sure the Database server is authorised for the timemachine\"\n\n$dbservers = REST-ERA-Get-Database-Servers -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin\n$dbserver = $dbservers | where {$_.name -eq \"$($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\"}\n\n  if (!$dbserver){\n\n    write-log -message \"The database server was not registered before.\"\n\n  } else {\n\n    $connect = REST-ERA-Remove-MSSQL-Server -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -dbserver $dbserver\n\n\n  }\n\n}\n\n\n$error.clear()\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Delete XenDesktop VMs","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Delete-VM {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $VMUUID\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Deleting VM $VMUUID\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMUUID)?delete_snapshots=true\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n  }\n\n  Return $task\n} \n### Logic\n\nwrite-log -message \"Getting All VMs\"\n\n[array]$Vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadmin\n\nWrite-log -message \"Filtering on XIA machines (XenDesktop Generated)\"\n\n[array]$vms = $Vms.entities | where {$_.vmname -match \"$($Appshortcode)-$($tier)-$($CustomerCode)-XAI.*\"}\n\nWrite-log -message \"We have $($vms.entities.count) XIA machines (XenDesktop Generated) after filtering\"\n\nif (!$vms){\n\n  write-log -message \"There are no XenDeskop Vms to be deleted in this build.\"\n\n} else {\n\n  foreach ($vm in $vms){\n\n    $hide = REST-Delete-VM -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadmin -VMUUID $vm.uuid\n\n  }\n\n}\n\n$error.clear()\n\n\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Purge AD","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n$AppshortCode     = \"@@{AC}@@\"\n$AppLongCode      = \"@@{AppLongCode}@@\"\n$WindowsDomain    = \"@@{WindowsDomain}@@\"\n$UserPassword     = \"@@{UserPassword}@@\"\n$AdminPassword    = \"@@{AdminPassword}@@\"\n$adminAccounts    = \"@@{AdminAccounts}@@\"\n$serviceuser      = \"@@{Service_Account.username}@@\"\n$servicePassword  = \"@@{Service_Account.secret}@@\"\n$domainPassword   = \"@@{DomainInstallUser.secret}@@\"\n$domainInstallUser= \"@@{DomainInstallUser.username}@@\"\n$Tier             = \"@@{Tier}@@\"\n$customerNameLong = \"@@{CustomerNameLong}@@\"\n$DummyADContent   = \"@@{DummyADContent}@@\"\n$customercode     = \"@@{CustomerName}@@\"\n\n\n\n## Functions \nFunction Remove-DomainContent{\n  param(\n    $UserPassword,\n    $WindowsDomain,\n    $servicePassword,\n    $serviceuser,\n    $domainPassword,\n    $adminAccounts,\n    $adminPassword,\n    $domainInstallUser,\n    $tier,\n    $customerNameLong,\n    $Customercode,\n    $DummyADContent,\n    $AppLongCode,\n    $AppshortCode,\n    $FirstdomaincontrollerIP = (Test-Connection $WindowsDomain -count 1).ipv4address.ipaddresstostring\n  )\n\n  $password = $domainPassword | ConvertTo-SecureString -asplaintext -force;\n  $domain = ((Get-WmiObject Win32_ComputerSystem).Domain)\n  $credential = New-Object System.Management.Automation.PsCredential(\"$($WindowsDomain)\\$($domainInstallUser)\",$password);\n\n  write \"Connecting to the first responding DC $FirstdomaincontrollerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$FirstdomaincontrollerIP\")).hostname \n\n  write \"Reconnecting to latest OS version Name $Dnsname\"\n\n  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $credential {\n    $allDCs = (Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }\n    ($allDCs | sort [version]OperatingSystemVErsion -Desc | select -first 1).IPv4Address\n  }\n\n  write \"Reconnecting to latest OS version DC $LatestDomainControllerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$LatestDomainControllerIP\")).hostname \n\n  write \"Reconnecting to latest OS version Name $Dnsname\"\n\n  [array]$output = invoke-command -computername $Dnsname -credential $credential {\n    start-transcript c:\\windows\\temp\\ADConfig.log \n    $DomainPath       = ((((Get-ADOrganizationalUnit -Filter *) | select -first 1).DistinguishedName).split(',') | where {$_ -match \"DC\"}) -join(',') \n    $tier             = $args[0]\n    $UserPassword     = $args[1]\n    $servicePassword  = $args[2]\n    $adminAccounts    = $args[3]\n    $adminPassword    = $args[4]\n    $customerNameLong = $args[5]\n    $DummyADContent   = $args[6]\n    $serviceuser      = $args[7]\n    $Customercode     = $args[8]\n    $WindowsDomain    = $args[9]\n    $AppshortCode     = $args[10]\n    $AppLongCode      = $args[11]\n    $DNSdomain        = (Get-ADDomain).dnsroot\n    $ServiceAccounts  = \"svc_$($AppLongCode)\",\"svc_sql\",\"svc_xas\",\"svc_xbs\",\"svc_mgt\";\n    $adminPassword    = $adminPassword | convertto-securestring -AsPlainText -Force\n    $UserPassword     = $UserPassword | convertto-securestring -AsPlainText -Force\n    $servicePassword  = $servicePassword | convertto-securestring -AsPlainText -Force\n    write \"Using Domain Path $DomainPath\"\n    write \"Deleting the Parent OUs\"\n    try {\n      Get-ADOrganizationalUnit -Identity \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | set-ADOrganizationalUnit -ProtectedFromAccidentalDeletion $false\n      Get-ADOrganizationalUnit -Identity \"OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\" | remove-ADOrganizationalUnit -Recursive -confirm:0\n    } catch{}\n\n  } -args $tier,$UserPassword,$servicePassword,$adminAccounts,$adminPassword,$customerNameLong,$DummyADContent,$serviceuser,$Customercode,$WindowsDomain,$AppshortCode,$AppLongCode\n  $output | out-file c:\\windows\\temp\\ADConfig.log \n  $output = $output -split \" \"\n  $ServerOU = $output | select -last 1\n  return $ServerOU\n}\n\n## Logic\n\n\nWrite \"Using Existing Windows Domain $WindowsDomain\"\nWrite \"Removing content on uninstall\"\nRemove-DomainContent -UserPassword $UserPassword -WindowsDomain $WindowsDomain -domainPassword $domainPassword -servicePassword $servicePassword -adminAccounts $adminAccounts -adminPassword $adminPassword -domainInstallUser $domainInstallUser -tier $tier -customerNameLong $customerNameLong -DummyADContent $DummyADContent -customercode $customercode -AppshortCode $AppshortCode -AppLongCode $AppLongCode\n$error.clear()\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"4d024299_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"728c8c5c_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"Windows 2019 STD","version":"","options":{"type":"","name":"Windows 2019 STD","resources":{"image_type":"DISK_IMAGE","checksum":{"checksum_algorithm":"","type":"","checksum_value":""},"source_uri":"https:\/\/dl.dropboxusercontent.com\/s\/bvwbf4gvmp9b59i\/Windows%202019V4.qcow2","version":{"product_version":"10.0","type":"","product_name":"Windows Servr 2019 Standard"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"APP"}],"name":"Install App Servers","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install App Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"OS Config "},{"kind":"app_task","name":"Install Choco"},{"kind":"app_task","name":"Wait for Login 1"},{"kind":"app_task","name":"Install APP Choco "},{"kind":"app_task","name":"Wait for Login 2"},{"kind":"app_task","name":"Change CD Drive to Z"},{"kind":"app_task","name":"Add Disk D"},{"kind":"app_task","name":"Download Hix"},{"kind":"app_task","name":"Install Hix Roles"}],"name":"d2d318a8_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Choco"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login 1"}},{"from_task_reference":{"kind":"app_task","name":"OS Config "},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login 1"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login 1"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install APP Choco "}},{"from_task_reference":{"kind":"app_task","name":"Change CD Drive to Z"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Add Disk D"}},{"from_task_reference":{"kind":"app_task","name":"Add Disk D"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Download Hix"}},{"from_task_reference":{"kind":"app_task","name":"Install APP Choco "},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login 2"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login 2"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Change CD Drive to Z"}},{"from_task_reference":{"kind":"app_task","name":"Download Hix"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Hix Roles"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"OS Config ","state":"ACTIVE","attrs":{"exit_status":[],"script":"##Vars First\n$AppshortCode   = \"@@{AC}@@\"\n$account        = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n$oupath         = \"@@{MGT.ServerOU}@@\"\n$secpass        = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\n$DomainUsername = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword = \"@@{DomainInstallUser.secret}@@\";\n$serviceaccuser = \"@@{Service_Account.username}@@\"\n$serviceaccpass = \"@@{Service_Account.secret}@@\"\n$NewName        = \"$($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@\"\n$WindowsDomain  = \"@@{WindowsDomain}@@\"\n\n\n##Functions Second\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultDomain,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            Set-ItemProperty $RegPath \"DefaultDomainName\" -Value \"$DefaultDomain\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n## Logic Last\nwrite \"Setting timezone\"\nset-timezone -id \"W. Europe Standard Time\"\n\nwrite \"Setting up powerscheme\"\npowercfg \/SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\npowercfg \/SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\n\nwrite \"Creating Local Service Account\"\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"$($env:computername)\\$($account)\"\n\nwrite \"Renaming Server\"\nrename-Computer -NewName $NewName -force -confirm:0\n\nwrite \"Joining Server\"\n$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;\n$credential = New-Object System.Management.Automation.PSCredential(\"$($WindowsDomain)\\$($DomainUsername)\",$Securepass);\nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupath\n\nwrite \"Setting Autologon to service account\"\n\n$username = ($serviceaccuser -split \"\\\\\")[1]\nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco","state":"ACTIVE","attrs":{"exit_status":[],"script":"sleep 20\n$ChocoPackagesURL      = \"@@{ChocoPackagesURL}@@\"\n$ChocoClientPackageURL = \"@@{ChocoClientPackageURL}@@\"\n\n$localChocolateyPackageFilePath = \"c:\\windows\\temp\"\n\n$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea:0\nif ($localChocolateyPackageFilePathExists){\n\n  write \"Removing Client dir\"\n\n  remove-item $localChocolateyPackageFilePath -recurse -force -confirm:0 -ea:0\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n} else {\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n}\n\n$PkgDir = \"C:\\Packages\"\n$PkgDirexists = get-item $PkgDir -ea:0\nif ($PkgDirexists){\n\n  write \"Removing Package dir\"\n\n  remove-item $PkgDir -recurse -force -confirm:0 -ea:0\n} \nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoClientPackageURL\"\n\n$filename = $ChocoClientPackageURL -split \"\/\" | select -last 1\n$output = \"$($localChocolateyPackageFilePath)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoClientPackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($localChocolateyPackageFilePath)\\$($filename)\" -DestinationPath $localChocolateyPackageFilePath\n\n$Toolspath = \"$($localChocolateyPackageFilePath)\\Tools\"\ncd $toolspath\n$PSFile = \"$($Toolspath)\\chocolateyInstall.ps1\"\n& $PSFile\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoPackagesURL\"\n\n$filename = $ChocoPackagesURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoPackagesURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\nchoco source remove --name='chocolatey'\nchoco source add --name='local' --source='c:\\packages'\nchoco upgrade chocolatey -y\nwrite \"Rebooting Server\"\nShutdown -r -t 15 -f","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login 1","state":"ACTIVE","attrs":{"type":"","interval_secs":180},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install APP Choco ","state":"ACTIVE","attrs":{"exit_status":[],"script":"try {\n  choco install googlechrome -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install googlechrome -y --ignore-checksums\n}\ntry {\n  choco install dotnet4.7.2 -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install dotnet4.7.2 -y --ignore-checksums\n}\ntry {\n  choco install 7zip.install -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install 7zip.install -y --ignore-checksums\n}\ntry {\n  choco install pswindowsupdate -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install pswindowsupdate -y --ignore-checksums\n}\ntry {\n  choco install bginfo -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install bginfo -y --ignore-checksums\n} \nsleep 20\n$bgInfoRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$bgInfoRegkey = \"BgInfo\"\n$bgInfoRegType = \"String\"\n$bgInfoRegkeyValue = \"C:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt\"\n\nNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValue\n\nC:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt \nwrite 'c:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\bginfo.cmd\" -Encoding ASCII\n \nwrite \"@@{SQL.InstanceName}@@\"\nShutdown -r -t 5","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login 2","state":"ACTIVE","attrs":{"type":"","interval_secs":90},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Change CD Drive to Z","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n# No variables required.\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Change CD Drive to Z\"\n\n$cd = $NULL\n$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $env:COMPUTERNAME -ErrorAction Stop\nSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter \"DriveLetter = '$($cd.drive)'\" ) -Arguments @{DriveLetter='Z:'}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Add Disk D","state":"ACTIVE","attrs":{"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$databaseserver         = \"@@{SQL.name[0]}@@\"\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction REST-Query-StorageContainers {\n  Param (\n    [string] $Cluster_IP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($Cluster_IP):9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Add-New-VMDisk {\n  Param (\n    [string] $Cluster_IP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $size,\n    [string] $ContainerUUID,\n    [string] $SCSIIndex,\n    [string] $VMUUID\n  )\n  if ($silent -eq 0){\n\n    write-log -message \"Debug level is $debug\";\n    write-log -message \"Building Credential object\"\n\n  } \n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -eq 0){\n\n    write-log -message \"Create New Disk JSON for Container $($ContainerUUID), with size $($Size) for VM $($VMUUID) on index $SCSIIndex\"\n\n  }\n  $URL = \"https:\/\/$($Cluster_IP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMUUID)\/disks\/attach\"\n  $json = @\"\n  {\n    \"vm_disks\": [{\n      \"is_cdrom\": false,\n      \"disk_address\": {\n        \"device_bus\": \"scsi\",\n        \"device_index\": $SCSIIndex\n      },\n      \"vm_disk_create\": {\n        \"storage_container_uuid\": \"$($ContainerUUID)\",\n        \"size\": $($Size)\n      }\n    }]\n  }\n\"@\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }catch{\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }\n  Return $task\n}\n## Logic \nwrite-log -message \"Finding VM\"\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\n[array]$vm = $VMS.entities | where {$_.vmname -eq $vmname}\n\nif ($VM){\n  write-log -message \"Using VM with UUID $($vm.uuid)\"  \n}\n\n$500GB = 536870912000\n\nwrite-log -message \"Adding Drive D\"\n$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 2\nsleep 10\n$driveletter = \"D:\"\n$driveletter = $driveletter.Substring(0,$driveletter.Length-1)\nGet-disk |where {$_.operationalstatus -ne \"Online\"} | select -first 1 | Initialize-Disk -PartitionStyle GPT -PassThru -ea:0 | New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName \"Hix Data\" | Format-Volume -FileSystem NTFS -NewFileSystemLabel \"Hix Data\" -Confirm:$false -ea:0\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Download Hix","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n$HixPackageURL = \"@@{HixPackageURL}@@\"\n\n\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \n$Maincount = 0\ndo {\n  $maincount ++\n  write-log -message \"Download Hix Sofware\"\n  \n  $PkgDir = \"D:\\Download\\Hix\"\n\n  mkdir $PkgDir\n  \n  write \"Downloading Hix\"\n  write \"Using URL $PackageURL\"\n  \n  $filename = $HixPackageURL -split \"\/\" | select -last 1\n  $output = \"$($PkgDir)\\$($filename)\"\n\n  $count = 0\n  do {\n    $count ++\n    try {\n      $wc = New-Object net.webclient\n      $wc.Downloadfile($HixPackageURL, $output)\n      $failed = 0\n    } catch {\n      sleep 15\n      $failed = 1\n    }\n  } until ($count -ge 4 -or $failed -eq 0)\n  \n  Expand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n  $item = get-item \"D:\\Download\\Hix\\*.msi\"\n} until ($maincount -ge 5 -or $item)\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"APP"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Hix Roles","state":"ACTIVE","attrs":{"exit_status":[],"script":"Function write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Creating HixBase\"\nmkdir \"D:\\HixBase\" -ea:0\nwrite-log -message \"Creating HixApps\"\nmkdir \"D:\\HixApps\" -ea:0\nwrite-log -message \"Creating HixEnv\"\nmkdir \"D:\\HixEnv\" -ea:0\n$error.clear()\n\nif ($env:computername -match \"APP0\"){\n  write-log \"$env:computername Installing HAS\"\n  msiexec \/i D:\\Download\\Hix\\ChipSoft.6.2.msi HIXFOLDER=D:\\HiXBase APPSRVFOLDER=D:\\HixApps HIXENVFOLDER=D:\\HixEnv ADDLOCAL=Base,HiX,HiXHelp,HAS,DatabaseUpdater,Routeer,MetingenDriver,ExchangeSynchronisatie,CcowServer \/qn \n} elseif ($env:computername -match \"APP1\"){\n  write-log \"$env:computername Installing COMEZ\" \n  msiexec \/i D:\\Download\\Hix\\ChipSoft.6.2.msi HIXFOLDER=D:\\HiXBase APPSRVFOLDER=D:\\HixApps HIXENVFOLDER=D:\\HixEnv ADDLOCAL=Base,HiX,HiXHelp,Comez \/qn\n} elseif ($env:computername -match \"APP2\"){\n  write-log \"$env:computername Installing Environment Services\"\n  msiexec \/i D:\\Download\\Hix\\ChipSoft.6.2.msi HIXFOLDER=D:\\HiXBase APPSRVFOLDER=D:\\HixApps HIXENVFOLDER=D:\\HixEnv ADDLOCAL=Base,HiX,HiXHelp,HiXEnvironments \/qn\n  \n}\nwrite-log -message \"Waiting for MSI Installer\"\nsleep 180\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5f9e4cab_runbook_cloned_1","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d2d318a8_dag_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install App Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"728c8c5c_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4d024299_runbook_cloned_1","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"728c8c5c_dag_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"Windows 2016 STD","version":"","options":{"type":"","name":"Windows 2016 STD","resources":{"image_type":"DISK_IMAGE","checksum":{"checksum_algorithm":"","type":"","checksum_value":""},"source_uri":"https:\/\/dl.dropboxusercontent.com\/s\/oxhzh5jfpav89r5\/Windows2016.qcow2","version":{"product_version":"2016","type":"","product_name":"Windows Servr 2016 Standard"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"SQL"}],"name":"Install SQL","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install Choco"},{"kind":"app_task","name":"OS Config"},{"kind":"app_task","name":"Wait for Login"},{"kind":"app_task","name":"Adding 4 Disks"},{"kind":"app_task","name":"Install SQL 2017"},{"kind":"app_task","name":"Install SQL Choco"},{"kind":"app_task","name":"Reboot Sleep 2"},{"kind":"app_task","name":"SQL Server Config"},{"kind":"app_task","name":"Change CDRom Drive to Z"},{"kind":"app_task","name":"Grab Instance Name"}],"name":"d2d318a8_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Choco"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install SQL 2017"}},{"from_task_reference":{"kind":"app_task","name":"OS Config"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"SQL Server Config"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Change CDRom Drive to Z"}},{"from_task_reference":{"kind":"app_task","name":"Change CDRom Drive to Z"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Grab Instance Name"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Adding 4 Disks"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL Choco"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Reboot Sleep 2"}},{"from_task_reference":{"kind":"app_task","name":"Reboot Sleep 2"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SQL Server Config"}},{"from_task_reference":{"kind":"app_task","name":"Install SQL 2017"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install SQL Choco"}},{"from_task_reference":{"kind":"app_task","name":"Adding 4 Disks"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install SQL Choco"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco","state":"ACTIVE","attrs":{"exit_status":[],"script":"sleep 20\n$ChocoPackagesURL      = \"@@{ChocoPackagesURL}@@\"\n$ChocoClientPackageURL = \"@@{ChocoClientPackageURL}@@\"\n\n$localChocolateyPackageFilePath = \"c:\\windows\\temp\"\n\n$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea:0\nif ($localChocolateyPackageFilePathExists){\n\n  write \"Removing Client dir\"\n\n  remove-item $localChocolateyPackageFilePath -recurse -force -confirm:0 -ea:0\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n} else {\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n}\n\n$PkgDir = \"C:\\Packages\"\n$PkgDirexists = get-item $PkgDir -ea:0\nif ($PkgDirexists){\n\n  write \"Removing Package dir\"\n\n  remove-item $PkgDir -recurse -force -confirm:0 -ea:0\n} \nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoClientPackageURL\"\n\n$filename = $ChocoClientPackageURL -split \"\/\" | select -last 1\n$output = \"$($localChocolateyPackageFilePath)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoClientPackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($localChocolateyPackageFilePath)\\$($filename)\" -DestinationPath $localChocolateyPackageFilePath\n\n$Toolspath = \"$($localChocolateyPackageFilePath)\\Tools\"\ncd $toolspath\n$PSFile = \"$($Toolspath)\\chocolateyInstall.ps1\"\n& $PSFile\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoPackagesURL\"\n\n$filename = $ChocoPackagesURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoPackagesURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\nchoco source remove --name='chocolatey'\nchoco source add --name='local' --source='c:\\packages'\nchoco upgrade chocolatey -y\nwrite \"Rebooting Server\"\nShutdown -r -t 15 -f","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"OS Config","state":"ACTIVE","attrs":{"exit_status":[],"script":"##Vars First\n$AppshortCode   = \"@@{AC}@@\"\n$account        = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n$oupath         = \"@@{MGT.ServerOU}@@\"\n$secpass        = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\n$DomainUsername = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword = \"@@{DomainInstallUser.secret}@@\";\n$serviceaccuser = \"@@{Service_Account.username}@@\"\n$serviceaccpass = \"@@{Service_Account.secret}@@\"\n$NewName        = \"$($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@\"\n$WindowsDomain  = \"@@{WindowsDomain}@@\"\n\n\n##Functions Second\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultDomain,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            Set-ItemProperty $RegPath \"DefaultDomainName\" -Value \"$DefaultDomain\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n## Logic Last\n\nwrite \"Setting timezone\"\nset-timezone -id \"W. Europe Standard Time\"\n\nwrite \"Setting up powerscheme\"\npowercfg \/SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\npowercfg \/SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\n\n\nwrite \"Creating Local Service Account\"\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"$($env:computername)\\$($account)\"\n\nwrite \"Renaming Server\"\nrename-Computer -NewName $NewName -force -confirm:0\n\nwrite \"Joining Server\"\n$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;\n$credential = New-Object System.Management.Automation.PSCredential(\"$($WindowsDomain)\\$($DomainUsername)\",$Securepass);\nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupath\n\nwrite \"Setting Autologon to service account\"\n\n$username = ($serviceaccuser -split \"\\\\\")[1]\nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login","state":"ACTIVE","attrs":{"type":"","interval_secs":180},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Adding 4 Disks","state":"ACTIVE","attrs":{"exit_status":[],"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction REST-Query-StorageContainers {\n  Param (\n    [string] $Cluster_IP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($Cluster_IP):9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Add-New-VMDisk {\n  Param (\n    [string] $Cluster_IP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $size,\n    [string] $ContainerUUID,\n    [string] $SCSIIndex,\n    [string] $VMUUID\n  )\n  if ($silent -eq 0){\n\n    write-log -message \"Debug level is $debug\";\n    write-log -message \"Building Credential object\"\n\n  } \n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -eq 0){\n\n    write-log -message \"Create New Disk JSON for Container $($ContainerUUID), with size $($Size) for VM $($VMUUID) on index $SCSIIndex\"\n\n  }\n  $URL = \"https:\/\/$($Cluster_IP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMUUID)\/disks\/attach\"\n  $json = @\"\n  {\n    \"vm_disks\": [{\n      \"is_cdrom\": false,\n      \"disk_address\": {\n        \"device_bus\": \"scsi\",\n        \"device_index\": $SCSIIndex\n      },\n      \"vm_disk_create\": {\n        \"storage_container_uuid\": \"$($ContainerUUID)\",\n        \"size\": $($Size)\n      }\n    }]\n  }\n\"@\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }catch{\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }\n  Return $task\n}\n## Logic \nwrite-log -message \"Finding VM\"\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\n[array]$vm = $VMS.entities | where {$_.vmname -eq $vmname}\n\nif ($VM){\n  write-log -message \"Using VM with UUID $($vm.uuid)\"  \n}\n\n$500GB = 536870912000\n\nsleep 10\nwrite-log -message \"Adding Drive M\"\n\n$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 2\n$driveletter = \"M:\"\n$driveletter = $driveletter.Substring(0,$driveletter.Length-1)\n$count = 0\ndo {\n  $count ++\n  sleep 20\n  $Disk = Get-disk |where {$_.operationalstatus -ne \"Online\"} \n} until ($Count -ge 5 -or $disk)\nif ($disk){\n  $delay = $count * 20\n\n  write-log -message \"Found Prism Disk after $delay seconds\"\n\n  $disk | select -first 1 | Initialize-Disk -PartitionStyle GPT -PassThru -ea:0 | New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName \"SQL Data\" | Format-Volume -FileSystem NTFS -NewFileSystemLabel \"SQL Data\" -Confirm:$false -ea:0\n} else {\n\n  write-log -message \"There is no disk after 1 minute\"\n\n}\nwrite-log -message \"Adding Drive N\"\n\n$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 3\n$driveletter = \"N:\"\n$driveletter = $driveletter.Substring(0,$driveletter.Length-1)\n$count = 0\ndo {\n  $count ++\n  sleep 20\n  $Disk = Get-disk |where {$_.operationalstatus -ne \"Online\"} \n} until ($Count -ge 5 -or $disk)\nif ($disk){\n  $delay = $count * 20\n\n  write-log -message \"Found Prism Disk after $delay seconds\"\n\n  $disk | select -first 1 | Initialize-Disk -PartitionStyle GPT -PassThru -ea:0 | New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName \"SQL Log\" | Format-Volume -FileSystem NTFS -NewFileSystemLabel \"SQL Log\" -Confirm:$false -ea:0\n} else {\n\n  write-log -message \"There is no disk after 1 minute\"\n\n}\n\nwrite-log -message \"Adding Drive T\"\n\n$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 4\n$driveletter = \"T:\"\n$driveletter = $driveletter.Substring(0,$driveletter.Length-1)\n$count = 0\ndo {\n  $count ++\n  sleep 20\n  $Disk = Get-disk |where {$_.operationalstatus -ne \"Online\"} \n} until ($Count -ge 5 -or $disk)\nif ($disk){\n  $delay = $count * 20\n\n  write-log -message \"Found Prism Disk after $delay seconds\"\n\n  $disk | select -first 1 | Initialize-Disk -PartitionStyle GPT -PassThru -ea:0 | New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName \"SQL Temp\" | Format-Volume -FileSystem NTFS -NewFileSystemLabel \"SQL Temp\" -Confirm:$false -ea:0\n} else {\n\n  write-log -message \"There is no disk after 1 minute\"\n\n}\n\nwrite-log -message \"Adding Drive R\"\n$task = REST-Add-New-VMDisk -Cluster_IP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent $silent -VMUUID $vm.uuid -containerUUID $vm.ContainerUUIDs[0] -size $500GB -SCSIIndex 5\n$driveletter = \"R:\"\n$driveletter = $driveletter.Substring(0,$driveletter.Length-1)\n$count = 0\ndo {\n  $count ++\n  sleep 20\n  $Disk = Get-disk |where {$_.operationalstatus -ne \"Online\"} \n} until ($Count -ge 5 -or $disk)\nif ($disk){\n  $delay = $count * 20\n\n  write-log -message \"Found Prism Disk after $delay seconds\"\n\n  $disk | select -first 1 | Initialize-Disk -PartitionStyle GPT -PassThru -ea:0 | New-Volume -FileSystem NTFS -DriveLetter $driveletter -FriendlyName \"SQL Backup\" | Format-Volume -FileSystem NTFS -NewFileSystemLabel \"SQL Backup\" -Confirm:$false -ea:0\n} else {\n\n  write-log -message \"There is no disk after 1 minute\"\n\n}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install SQL 2017","state":"ACTIVE","attrs":{"exit_status":[],"script":"$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$ServiceAccount         = \"@@{Service_Account.username}@@\"        \n$servicePassword        = \"@@{Service_Account.secret}@@\"\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n\n\nFunction PSR-Install-SQL {\n  param (\n    [string]$serviceaccount,\n    [string]$servicepassword,\n    [string]$WindowsDomain\n  )\n\n  write-log -message \"Creating script\";\n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript c:\\windows\\temp\\SQLNTNX.log'\n  [ARRAY]$OUTPUT += [STRING]'choco install sql-server-2017 --ignore-checksums -y --params=\"' + \"'\" + 'SQLSYSADMINACCOUNTS:@@{WindowsDomain}@@\\Domain Admins' + \"'\"+ '\"'\n  \n  write-log -message \"Creating Task\";\n\n  $OUTPUT | OUT-FILE C:\\windows\\temp\\SQL.ps1\n  $argumentList = \"-file C:\\Windows\\Temp\\SQL.ps1\"\n  $jobname = \"PowerShell SQL Install\";\n  $username = ($serviceaccount -split \"\\\\\")[1]\n  $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  $SecurePassword = $servicepassword | ConvertTo-SecureString -AsPlainText -Force\n  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePassword\n  $CredPassword = $Credentials.GetNetworkCredential().Password \n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User \"$($WindowsDomain)\\$($username)\" -Password $CredPassword\n  # \n  Get-ScheduledTask $jobname | start-scheduledtask\n  \n  do {\n    sleep 40\n    $count++\n    $state = (Get-ScheduledTask $jobname).state\n    write-log \"Task is $state\"\n  } until ($Count -ge 20 -or $state -eq \"ready\")\n  $status = \"Success\"\n\n  write-log -message \"All Done here, SQL Done\";\n  get-content c:\\windows\\temp\\SQLNTNX.log\n\n  $resultobject =@{\n    Result = $status\n  };\n  return $resultobject\n};\n\n###Logic\n\nwrite-log -message \"Installing SQL 2017 Through scheduled task.\"\n\nPSR-Install-SQL -serviceaccount $serviceaccount -servicepassword $servicepassword -WindowsDomain $WindowsDomain\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install SQL Choco","state":"ACTIVE","attrs":{"exit_status":[],"script":"start-transcript -path c:\\windows\\temp\\mgt.log\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n\n$jobname = \"Install_SQLMGT\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"choco install sql-server-management-studio -Y --force --ignore-checksums\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\n\n\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq $jobname})\n} Until ($state.state -eq 3)\n$task | unregister-scheduledtask -confirm:0\nchoco install dotnet-4.6.2 -Y --ignore-checksums\nchoco install KB2919355 -y --ignore-checksums\nchoco install KB2919442 -y --ignore-checksums\ntry {\n  choco install pswindowsupdate -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install pswindowsupdate -y --ignore-checksums\n}\ntry {\n  choco install bginfo -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install bginfo -y --ignore-checksums\n}\ntry {\n  choco install googlechrome -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install googlechrome -y --ignore-checksums\n}\ntry {\n  choco install 7zip.install -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install 7zip.install -y --ignore-checksums\n}\nsleep 20\n$bgInfoRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$bgInfoRegkey = \"BgInfo\"\n$bgInfoRegType = \"String\"\n$bgInfoRegkeyValue = \"C:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt\"\n\nNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValue\nwrite 'c:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\bginfo.cmd\" -Encoding ASCII\nC:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt \nwrite \"Rebooting after installs.\"\nshutdown -r -t 10\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Reboot Sleep 2","state":"ACTIVE","attrs":{"type":"","interval_secs":140},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"SQL Server Config","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \n\nwrite-log -message \"Installing SQL Assembly\"\n\nInstall-PackageProvider NuGet -Force\nImport-PackageProvider NuGet -Force\nInstall-Module -Name SqlServer -AllowClobber -confirm:0 -force -ea:0\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null\n[System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.Management.SMO.Wmi.ManagedComputer\") \n\nwrite-log -message \"Loading SQL Assembly\"\n\nImport-Module SqlServer\n$modulePath = Split-Path -Path (Get-Module SqlServer).Path -Parent\nImport-Module \"$modulePath\\Microsoft.SqlServer.SqlWmiManagement.dll\"\n\nwrite-log -message \"Open TCP SQL Connections\"\n\n$smo = 'Microsoft.SqlServer.Management.Smo.'  \n$wmi = new-object ($smo + 'Wmi.ManagedComputer').  \n \n$uri = \"ManagedComputer[@Name='$env:computername']\/ ServerInstance[@Name='MSSQLSERVER']\/ServerProtocol[@Name='Tcp']\"  \n$Tcp = $wmi.GetSmoObject($uri)  \n$Tcp.IsEnabled = $true  \n$Tcp.Alter()  \n\n$uri = \"ManagedComputer[@Name='$env:computername']\/ ServerInstance[@Name='MSSQLSERVER']\/ServerProtocol[@Name='Np']\"  \n$Np = $wmi.GetSmoObject($uri)  \n$Np.IsEnabled = $true  \n$Np.Alter()  \n\nwrite-log -message \"Change Temp DB\"\n\n$Dir = \"T:\\SQL-Temp\"\nwrite-log -message \"Creating $($Dir)\"\nmkdir $Dir\n\n$NewTempDBLoc = \"T:\\SQL-Temp\\tempdb.mdf\"\n$NewTemplogLoc = \"T:\\SQL-Temp\\templog.ldf\"\n# End Data entry section\n#\n$TempDB = \"N'\" + $NewTempDBLoc + \"'\" # This format is needed for Invoke-SQLCMD\n$TempLog = \"N'\" + $NewTempLogLoc + \"'\"\n$Loc = Get-Location\n$Date = Get-Date -format yyyyMMdd_hhmmsstt\n$logfile = $Loc.path + \"\\Move-Temp_\" + $Date + \".txt\"\n\n# Import-Module SQLPS # See notes..\n\nwrite-log -message \"Modifying Temp DB and Log location..\"\n\nInvoke-SQLCMD -Query \"USE [master]\"\nInvoke-SQLCMD -Query \"ALTER DATABASE TempDB MODIFY FILE (NAME = tempdev, FILENAME = $TempDB ) \"\nInvoke-SQLCMD -Query \"ALTER DATABASE TempDB MODIFY FILE (NAME = templog, FILENAME = $TempLog) \"\nSet-Location -Path ($logfile.Split(\":\")[0] + \":\")\n\nwrite-log -message \"Changing Default Database Locations\"\n\n$DataRegKeyPath = \"HKLM:\\Software\\Microsoft\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQLServer\"\n$DataRegKeyName = \"DefaultData\"\n$DataDirectory = \"M:\\SQL-Data\"\n\nNew-ItemProperty -Path $DataRegKeyPath -Name $DataRegKeyName -PropertyType String -Value $DataDirectory\n\n$Dir = \"M:\\SQL-Data\"\nwrite-log -message \"Creating $($Dir)\"\nmkdir $Dir\n \n$LogRegKeyPath = \"HKLM:\\Software\\Microsoft\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQLServer\"\n$LogRegKeyName = \"DefaultLog\"\n$LogDirectory = \"N:\\SQL-Log\"\n\nNew-ItemProperty -Path $LogRegKeyPath -Name $LogRegKeyName -PropertyType String -Value $LogDirectory\n\n$Dir = \"N:\\SQL-Log\"\nwrite-log -message \"Creating $($Dir)\"\nmkdir $Dir\n\n$BackupRegKeyPath = \"HKLM:\\Software\\Microsoft\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQLServer\"\n$BackupRegKeyName = \"BackupDirectory\"\n$BackupDirectory = \"R:\\SQL-Backup\"\nIf ((Get-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -ErrorAction SilentlyContinue) -eq $null) {\n  New-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -PropertyType String -Value $BackupDirectory\n} Else {\n  Set-ItemProperty -Path $BackupRegKeyPath -Name $BackupRegKeyName -Value $BackupDirectory\n}\n\n$Dir = \"R:\\SQL-Backup\"\nwrite-log -message \"Creating $($Dir)\"\nmkdir $Dir\n\nwrite-log -message \"Adding Domain Admins to Instance.\"\n\n$cn2= new-object System.Data.SqlClient.SqlConnection \"server=$($env:computername);database=master;Integrated Security=sspi\"\n$cn2.Open()\n$sql2 = $cn2.CreateCommand()\n$sql2.CommandText = @\"\n\n  EXEC master..sp_addsrvrolemember @loginame = N'$($env:userdomain)\\Domain Admins', @rolename = N'sysadmin'\n\n\"@\n\n $rdr2 = $sql2.ExecuteReader()\n $cn2.Close()\n\n\n\n\nwrite-log -message \"Restaring SQL Service..\" \n\nRestart-Service -Force MSSQLSERVER","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Change CDRom Drive to Z","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n# No variables required.\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Change CD Drive to Z\"\n\n$cd = $NULL\n$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $env:COMPUTERNAME -ErrorAction Stop\nSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter \"DriveLetter = '$($cd.drive)'\" ) -Arguments @{DriveLetter='Z:'}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Grab Instance Name","state":"ACTIVE","attrs":{"exit_status":[],"script":"$SQLInstances = (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Microsoft SQL Server').InstalledInstances\nforeach ($sql in $SQLInstances){\n  write \"InstanceName=$($env:ComputerName)\\$($sql)\"\n}\n\nget-service SQLBrowser | start-service -ea:0\n$error.clear()","eval_variables":["InstanceName"],"eval_scope":"local","script_type":"npsscript","type":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"5f9e4cab_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d2d318a8_dag_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install SQL"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"728c8c5c_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4d024299_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"728c8c5c_dag_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"XAS"}],"name":"Install XenApp Servers","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install XenApp Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"OS Config"},{"kind":"app_task","name":"Install Choco"},{"kind":"app_task","name":"Wait for Login"},{"kind":"app_task","name":"Install Choco XAS Apps"},{"kind":"app_task","name":"Install Citrix Prerequisites"},{"kind":"app_task","name":"Wait for reboot"},{"kind":"app_task","name":"Change CD Drive to Z"},{"kind":"app_task","name":"VCRedist"},{"kind":"app_task","name":"Wait for VCRedist Reboot"},{"kind":"app_task","name":"Download and Install Hix"}],"name":"d2d318a8_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Choco"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Choco XAS Apps"}},{"from_task_reference":{"kind":"app_task","name":"OS Config"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Install Citrix Prerequisites"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for reboot"}},{"from_task_reference":{"kind":"app_task","name":"Install Choco XAS Apps"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Citrix Prerequisites"}},{"from_task_reference":{"kind":"app_task","name":"VCRedist"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for VCRedist Reboot"}},{"from_task_reference":{"kind":"app_task","name":"Wait for reboot"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Change CD Drive to Z"}},{"from_task_reference":{"kind":"app_task","name":"Change CD Drive to Z"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"VCRedist"}},{"from_task_reference":{"kind":"app_task","name":"Wait for VCRedist Reboot"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Download and Install Hix"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"OS Config","state":"ACTIVE","attrs":{"exit_status":[],"script":"sleep 10\n##Vars First\n$AppshortCode   = \"@@{AC}@@\"\n$account        = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n$oupath         = \"@@{MGT.ServerOU}@@\"\n$secpass        = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\n$DomainUsername = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword = \"@@{DomainInstallUser.secret}@@\";\n$serviceaccuser = \"@@{Service_Account.username}@@\"\n$serviceaccpass = \"@@{Service_Account.secret}@@\"\n$NewName        = \"$($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@\"\n$WindowsDomain  = \"@@{WindowsDomain}@@\"\n\n\n##Functions Second\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultDomain,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            Set-ItemProperty $RegPath \"DefaultDomainName\" -Value \"$DefaultDomain\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n## Logic Last\nwrite \"Setting timezone\"\nset-timezone -id \"W. Europe Standard Time\"\n\nwrite \"Setting up Power Scheme\"\npowercfg \/SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\npowercfg \/SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\n\nwrite \"Creating Local Service Account\"\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"$($env:computername)\\$($account)\"\n\nwrite \"Renaming Server\"\nrename-Computer -NewName $NewName -force -confirm:0\n\nwrite \"Joining Server\"\n$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;\n$credential = New-Object System.Management.Automation.PSCredential(\"$($WindowsDomain)\\$($DomainUsername)\",$Securepass);\nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupath\n\nwrite \"Setting Autologon to service account\"\n\n$username = ($serviceaccuser -split \"\\\\\")[1]\nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco","state":"ACTIVE","attrs":{"exit_status":[],"script":"sleep 20\n$ChocoPackagesURL      = \"@@{ChocoPackagesURL}@@\"\n$ChocoClientPackageURL = \"@@{ChocoClientPackageURL}@@\"\n\n$localChocolateyPackageFilePath = \"c:\\windows\\temp\"\n\n$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea:0\nif ($localChocolateyPackageFilePathExists){\n\n  write \"Removing Client dir\"\n\n  remove-item $localChocolateyPackageFilePath -recurse -force -confirm:0 -ea:0\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n} else {\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n}\n\n$PkgDir = \"C:\\Packages\"\n$PkgDirexists = get-item $PkgDir -ea:0\nif ($PkgDirexists){\n\n  write \"Removing Package dir\"\n\n  remove-item $PkgDir -recurse -force -confirm:0 -ea:0\n} \nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoClientPackageURL\"\n\n$filename = $ChocoClientPackageURL -split \"\/\" | select -last 1\n$output = \"$($localChocolateyPackageFilePath)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoClientPackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($localChocolateyPackageFilePath)\\$($filename)\" -DestinationPath $localChocolateyPackageFilePath\n\n$Toolspath = \"$($localChocolateyPackageFilePath)\\Tools\"\ncd $toolspath\n$PSFile = \"$($Toolspath)\\chocolateyInstall.ps1\"\n& $PSFile\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoPackagesURL\"\n\n$filename = $ChocoPackagesURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoPackagesURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\nchoco source remove --name='chocolatey'\nchoco source add --name='local' --source='c:\\packages'\nchoco upgrade chocolatey -y\nwrite \"Rebooting Server\"\nShutdown -r -t 15 -f","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login","state":"ACTIVE","attrs":{"type":"","interval_secs":90},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco XAS Apps","state":"ACTIVE","attrs":{"exit_status":[],"script":"try {\n  choco install googlechrome -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install googlechrome -y --ignore-checksums\n}\ntry {\n  choco install 7zip.install -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install 7zip.install -y --ignore-checksums\n}\ntry {\n  choco install Office365Business -y -ignorechecksums\n} catch {\n  sleep (get-random 0,45)\n  choco install Office365Business -y -ignorechecksums\n}\ntry {\n  choco install adobereader -y  --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install adobereader -y --ignore-checksums\n}\ntry {\n  choco install pswindowsupdate -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install pswindowsupdate -y --ignore-checksums\n}\ntry {\n  choco install firefox -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install firefox -y --ignore-checksums\n}\ntry {\n  choco install dropbox -y --ignore-checksums \n} catch {\n  sleep (get-random 0,45)\n  choco install dropbox -y --ignore-checksums \n}\ntry {\n  choco install whatsapp -y --ignore-checksums \n} catch {\n  sleep (get-random 0,45)\n  choco install whatsapp -y --ignore-checksums \n}\ntry {\n  choco install dotnet4.7.2 -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install dotnet4.7.2 -y --ignore-checksums\n}\ntry {\n  choco install zoom -y --ignore-checksums \n} catch {\n  sleep (get-random 0,45)\n  choco install zoom -y --ignore-checksums \n}\ntry {\n  choco install slack -y --ignore-checksums \n} catch {\n  sleep (get-random 0,45)\n  choco install slack -y --ignore-checksums \n}\ntry {\n  choco install citrix-workspace -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install citrix-workspace -y --ignore-checksums \n}\ntry {\n  choco install bginfo -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install bginfo -y --ignore-checksums\n} \nsleep 20\n$bgInfoRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$bgInfoRegkey = \"BgInfo\"\n$bgInfoRegType = \"String\"\n$bgInfoRegkeyValue = \"C:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt\"\n\nNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValue\n\nC:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt \nwrite 'c:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\bginfo.cmd\" -Encoding ASCII\n ","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Citrix Prerequisites","state":"ACTIVE","attrs":{"exit_status":[],"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$ServiceAccount         = \"@@{Service_Account.username}@@\"        \n$servicePassword        = \"@@{Service_Account.secret}@@\"\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Unmount-CDRom {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid,\n    [object] $cdrom\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuid\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": true\n  }]\n}\n\"@ \n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM Unmounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n}\n\nFunction REST-Get-Image-Sizes {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v0.8\/images?includeVmDiskSizes=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Mount-CDRom-Image {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $VMuuid,\n    [object] $cdrom,\n    [object] $Image\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Mounting CD for VM with ID $VMuuid\"\n  write-log -message \"Using ISO $($Image.Name)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMuuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": false,\n    \"vm_disk_clone\": {\n      \"disk_address\": {\n        \"vmdisk_uuid\": \"$($Image.vmDiskId)\"\n      },\n      \"minimum_size\": \"$($Image.vmDiskSize)\"\n    }\n  }]\n}\n\"@\n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM mounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n} \n\n### Logic\n\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\n[array]$vm = $VMS.entities | where {$_.vmname -eq $vmname}\n\nif ($vm.count -gt 1){\n    write-log \"VMs are not clean, same machine exists twice\" -sev \"ERROR\"\n    break\n}\n\nwrite-log -message \"Getting VM Disk Detail for $($vm.uuid) using $VMIP\"\n\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n\nwrite-log -message \"Finding CDROM\"\n  \n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"CDROM is not Empty, eject captain.\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"Unmounting Whatever is in there now\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n\n$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1\n$imageobj = $images.entities | where {$_.name -eq $CitrixImageName}\n\nwrite-log -message \"Mounting Image $($imageobj.vmdiskid)\"\n\nREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobj\n\nWrite-log -message \"Setting Vars.\"\n\n$base = \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\n$target2 = \"c:\\Users\\Public\\Desktop\"\n\nWrite-log -message \"Copy Root Shortcuts to $target2\"\n\ncopy \"$($base)*.lnk\" $target2\n\n$items = get-childitem \"$base\\*.lnk\"\nforeach ($item in $items){\n  write $item.FullName\n  copy $item.FullName $target2\n   #Pin-Shortcut -target $item.FullName\n}\n\nWrite-log -message \"Copy 7Zip Shortcuts to $target2\"\n\ncopy \"$($base)\\7-Zip\\7-Zip File Manager.lnk\" $target2\n\nWrite-log -message \"Copy DropBox Shortcuts to $target2\"\n\ncopy \"$($base)\\Dropbox\\Dropbox.lnk\" $target2\n\nWrite-log -message \"Copy Slack Shortcuts to $target2\"\n\ncopy \"$($base)\\Slack Technologies\\Slack.lnk\" $target2\n\nWrite-log -message \"Copy Zoom Shortcuts to $target2\"\n\ncopy \"$($base)\\Zoom\\Zoom.lnk\" $target2\n\nwrite-log -message \"Installing Citrix Prerequisites\"\n\nwrite-log -message \"Install C++ libararies\"\n#\n#D:\\Support\\VcRedist_2013_RTM\\vcredist_x86.exe -quiet\n#D:\\Support\\VcRedist_2015\\vc_redist.x86.exe -quiet\n\nwrite-log -message \"Adding RDS Windows Features\"\n\nImport-Module ServerManager\nAdd-WindowsFeature -Name Remote-Assistance,Remote-Desktop-Services,RDS-RD-Server -Restart","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for reboot","state":"ACTIVE","attrs":{"type":"","interval_secs":180},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Change CD Drive to Z","state":"ACTIVE","attrs":{"script":"### Variables\n\n# No variables required.\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Change CD Drive to Z\"\n\n$cd = $NULL\n$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $env:COMPUTERNAME -ErrorAction Stop\nSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter \"DriveLetter = '$($cd.drive)'\" ) -Arguments @{DriveLetter='Z:'}\n","type":"","command_line_args":"","exit_status":[],"script_type":"npsscript"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"VCRedist","state":"ACTIVE","attrs":{"exit_status":[],"script":"D:\\Support\\VcRedist_2013_RTM\\vcredist_x86.exe -quiet\nD:\\Support\\VcRedist_2015\\vc_redist.x86.exe -quiet\nshutdown -r -t 10","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for VCRedist Reboot","state":"ACTIVE","attrs":{"type":"","interval_secs":180},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Download and Install Hix","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n$HixPackageURL    = \"@@{HixPackageURL}@@\"\n$AppshortCode     = \"@@{AC}@@\"\n$AppLongCode      = \"@@{AppLongCode}@@\"\n$Tier             = \"@@{Tier}@@\"\n$customercode     = \"@@{CustomerName}@@\"\n$HixDBServer      = \"$($AppshortCode)-$($tier)-$($CustomerCode)-SQL1\"           \n$HixTargetDBName  = \"$($AppLongCode)_$($Tier)\"\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \n$Maincount = 0\ndo {\n  $maincount ++\n  write-log -message \"Download Hix Sofware\"\n  \n  $PkgDir = \"c:\\Hix\"\n\n  mkdir $PkgDir\n  \n  write \"Downloading Hix\"\n  write \"Using URL $PackageURL\"\n  \n  $filename = $HixPackageURL -split \"\/\" | select -last 1\n  $output = \"$($PkgDir)\\$($filename)\"\n\n  $count = 0\n  do {\n    $count ++\n    try {\n      $wc = New-Object net.webclient\n      $wc.Downloadfile($HixPackageURL, $output)\n      $failed = 0\n    } catch {\n      sleep 15\n      $failed = 1\n    }\n  } until ($count -ge 4 -or $failed -eq 0)\n  \n  Expand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n  $item = get-item \"$($PkgDir)\\*.msi\"\n} until ($maincount -ge 5 -or $item)\n\n\nwrite-log -message \"Creating Hix\"\nmkdir \"C:\\HiX\" -ea:0\nwrite-log -message \"Creating HixBase\"\nmkdir \"C:\\HiX\\Base\" -ea:0\nwrite-log -message \"Creating HixApps\"\nmkdir \"C:\\HiX\\Apps\" -ea:0\nwrite-log -message \"Creating HixEnv\"\nmkdir \"C:\\HiX\\Env\" -ea:0\n$error.clear()\n\n\nmsiexec \/i c:\\Hix\\ChipSoft.6.2.msi HIXFOLDER=C:\\HiX\\Base APPSRVFOLDER=C:\\Hix\\Apps HIXENVFOLDER=C:\\Hix\\Env ADDLOCAL=Base,HiX,HiXHelp \/qn\n\nwrite-log -message \"Waiting for MSI Installer\"\nsleep 180\n\n$WshShell = New-Object -comObject WScript.Shell\n$Shortcut = $WshShell.CreateShortcut(\"c:\\Users\\Public\\Desktop\\ChipSoft.HiX.lnk\")\n$Shortcut.TargetPath = \"C:\\HiX\\Base\\ChipSoft.HiX.exe\"\n$Shortcut.Save()\n\n$Inifile = \"C:\\HiX\\Base\\dd.ini\"\nwrite '[Nutanix 1-click-Demo]' | out-file $Inifile\nwrite 'OMSCHRIJVING=Nutanix 1-click-Demo' | out-file $Inifile -append\nwrite 'TYPE=ADO' | out-file $Inifile -append\nwrite \"UDL=server=$($HixDBServer);database=$($HixTargetDBName);Integrated Security=SSPI\" | out-file $Inifile -append\n\n\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5f9e4cab_runbook_cloned_2","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d2d318a8_dag_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install XenApp Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"728c8c5c_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4d024299_runbook_cloned_2","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"728c8c5c_dag_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"XBS"}],"name":"Install Xen Backend Servers","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install Xen Backend Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install Choco and RSAT"},{"kind":"app_task","name":"OS Config"},{"kind":"app_task","name":"Wait for Login"},{"kind":"app_task","name":"Install Apps for XBS"},{"kind":"app_task","name":"Reboot Sleep"},{"kind":"app_task","name":"Install Citrix Roles"},{"kind":"app_task","name":"Wait For Citrix Install"},{"kind":"app_task","name":"Setup XenDesktop Core"},{"kind":"app_task","name":"Change CD Drive to Z"}],"name":"d2d318a8_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Choco and RSAT"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Install Citrix Roles"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait For Citrix Install"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Login"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Apps for XBS"}},{"from_task_reference":{"kind":"app_task","name":"OS Config"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Login"}},{"from_task_reference":{"kind":"app_task","name":"Wait For Citrix Install"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Setup XenDesktop Core"}},{"from_task_reference":{"kind":"app_task","name":"Wait For Citrix Install"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Setup XenDesktop Core"}},{"from_task_reference":{"kind":"app_task","name":"Wait For Citrix Install"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Change CD Drive to Z"}},{"from_task_reference":{"kind":"app_task","name":"Install Apps for XBS"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Reboot Sleep"}},{"from_task_reference":{"kind":"app_task","name":"Reboot Sleep"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Citrix Roles"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco and RSAT","state":"ACTIVE","attrs":{"exit_status":[],"script":"sleep 20\n$ChocoPackagesURL      = \"@@{ChocoPackagesURL}@@\"\n$ChocoClientPackageURL = \"@@{ChocoClientPackageURL}@@\"\n\n$localChocolateyPackageFilePath = \"c:\\windows\\temp\"\n\n$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea:0\nif ($localChocolateyPackageFilePathExists){\n\n  write \"Removing Client dir\"\n\n  remove-item $localChocolateyPackageFilePath -recurse -force -confirm:0 -ea:0\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n} else {\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n}\n\n$PkgDir = \"C:\\Packages\"\n$PkgDirexists = get-item $PkgDir -ea:0\nif ($PkgDirexists){\n\n  write \"Removing Package dir\"\n\n  remove-item $PkgDir -recurse -force -confirm:0 -ea:0\n} \nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoClientPackageURL\"\n\n$filename = $ChocoClientPackageURL -split \"\/\" | select -last 1\n$output = \"$($localChocolateyPackageFilePath)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoClientPackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($localChocolateyPackageFilePath)\\$($filename)\" -DestinationPath $localChocolateyPackageFilePath\n\n$Toolspath = \"$($localChocolateyPackageFilePath)\\Tools\"\ncd $toolspath\n$PSFile = \"$($Toolspath)\\chocolateyInstall.ps1\"\n& $PSFile\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoPackagesURL\"\n\n$filename = $ChocoPackagesURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoPackagesURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\nchoco source remove --name='chocolatey'\nchoco source add --name='local' --source='c:\\packages'\nchoco upgrade chocolatey -y\nwrite \"Rebooting Server\"\nInstall-WindowsFeature -IncludeAllSubFeature RSAT -confirm:0\n\n \nShutdown -r -t 15 -f","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"OS Config","state":"ACTIVE","attrs":{"exit_status":[],"script":"##Vars First\n$AppshortCode   = \"@@{AC}@@\"\n$account        = (\"@@{Service_Account.username}@@\" -split \"\\\\\")[1]\n$oupath         = \"@@{MGT.ServerOU}@@\"\n$secpass        = \"@@{Service_Account.secret}@@\" | ConvertTo-SecureString -AsPlainText -force\n$DomainUsername = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword = \"@@{DomainInstallUser.secret}@@\";\n$serviceaccuser = \"@@{Service_Account.username}@@\"\n$serviceaccpass = \"@@{Service_Account.secret}@@\"\n$NewName        = \"$($AppshortCode)-@@{Tier}@@-@@{CustomerName}@@-@@{MachineType}@@@@{calm_array_index}@@\"\n$WindowsDomain  = \"@@{WindowsDomain}@@\"\n\n\n##Functions Second\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultDomain,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            Set-ItemProperty $RegPath \"DefaultDomainName\" -Value \"$DefaultDomain\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n## Logic Last\nwrite \"Setting timezone\"\nset-timezone -id \"W. Europe Standard Time\"\n\nwrite \"Setting up Power Scheme\"\npowercfg \/SETDCVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\npowercfg \/SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO VIDEOCONLOCK 0\n\nwrite \"Creating Local Service Account\"\nNew-LocalUser $account -Password $secpass -FullName $account\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"$($env:computername)\\$($account)\"\n\nwrite \"Renaming Server\"\nrename-Computer -NewName $NewName -force -confirm:0\n\nwrite \"Joining Server\"\n$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;\n$credential = New-Object System.Management.Automation.PSCredential(\"$($WindowsDomain)\\$($DomainUsername)\",$Securepass);\nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options JoinWithNewName,AccountCreate -OUpath $oupath\n\nwrite \"Setting Autologon to service account\"\n\n$username = ($serviceaccuser -split \"\\\\\")[1]\nset-autologon -DefaultUsername $username -DefaultPassword $serviceaccpass -defaultdomain $WindowsDomain -AutoLogonCount 9999999\nNew-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value '*' -force","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Login","state":"ACTIVE","attrs":{"type":"","interval_secs":90},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Apps for XBS","state":"ACTIVE","attrs":{"exit_status":[],"script":"try {\n  choco install googlechrome -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install googlechrome -y --ignore-checksums\n}\ntry {\n  choco install pswindowsupdate -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install pswindowsupdate -y --ignore-checksums\n}\ntry {\n  choco install 7zip.install -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install 7zip.install -y --ignore-checksums\n}\nif ($env:computername.EndsWith(\"2\") -or $env:computername.EndsWith(\"3\") ){\n  try{\n    choco install dotnet4.7.2 -y --ignore-checksums\n  } catch {\n    sleep 20\n    choco install dotnet4.7.2 -y --ignore-checksums\n  }\n  try{\n    choco install vcredist-all -y --ignore-checksums\n  } catch {\n    sleep 20\n    choco install vcredist-all -y --ignore-checksums\n  }\n}\ntry {\n  choco install bginfo -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install bginfo -y --ignore-checksums\n} \nsleep 20\n$bgInfoRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$bgInfoRegkey = \"BgInfo\"\n$bgInfoRegType = \"String\"\n$bgInfoRegkeyValue = \"C:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt\"\n\nNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValue\n\nwrite 'c:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\bginfo.cmd\" -Encoding ASCII\nC:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt \n\n \n$error.clear()\nshutdown -r -t 10","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Reboot Sleep","state":"ACTIVE","attrs":{"type":"","interval_secs":120},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Citrix Roles","state":"ACTIVE","attrs":{"exit_status":[],"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$ServiceAccount         = \"@@{Service_Account.username}@@\"        \n$servicePassword        = \"@@{Service_Account.secret}@@\"\n\n\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Unmount-CDRom {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid,\n    [object] $cdrom\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuid\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": true\n  }]\n}\n\"@ \n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM Unmounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n}\n\nFunction REST-Get-Image-Sizes {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v0.8\/images?includeVmDiskSizes=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Mount-CDRom-Image {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $VMuuid,\n    [object] $cdrom,\n    [object] $Image\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Mounting CD for VM with ID $VMuuid\"\n  write-log -message \"Using ISO $($Image.Name)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMuuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": false,\n    \"vm_disk_clone\": {\n      \"disk_address\": {\n        \"vmdisk_uuid\": \"$($Image.vmDiskId)\"\n      },\n      \"minimum_size\": \"$($Image.vmDiskSize)\"\n    }\n  }]\n}\n\"@\n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM mounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction PSR-Install-Citrix {\n  param (\n    [string]$serviceaccount,\n    [string]$servicepassword,\n    [string]$WindowsDomain\n  )\n\n  write-log -message \"Creating script\";\n  \n  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid'\n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript c:\\windows\\temp\\CitrixNTNX.log'\n  if ($VMName.EndsWith(\"0\")){\n    [ARRAY]$OUTPUT += [STRING]'& \"$($driveletter)\\x64\\XenDesktop Setup\\XenDesktopServerSetup.exe\" \/components CONTROLLER,DESKTOPSTUDIO \/NOSQL \/quiet \/disableexperiencemetrics \/CONFIGURE_FIREWALL '\n  } elseif ($VMName.EndsWith(\"1\")){\n    [ARRAY]$OUTPUT += [STRING]'& \"$($driveletter)\\x64\\XenDesktop Setup\\XenDesktopServerSetup.exe\" \/components LICENSESERVER \/quiet \/disableexperiencemetrics \/CONFIGURE_FIREWALL'\n  }  elseif ($VMName.EndsWith(\"2\")){\n    [ARRAY]$OUTPUT += [STRING]'& \"$($driveletter)\\x64\\Storefront\\CitrixStoreFront-x64.exe\" -silent'  \n  } else {\n    [ARRAY]$OUTPUT += [STRING]'& \"$($driveletter)\\x64\\XenDesktop Setup\\XenDesktopServerSetup.exe\" \/components DESKTOPDIRECTOR \/CONFIGURE_FIREWALL'\n  }\n  write-log -message \"Creating Task\";\n  $username = ($serviceaccount -split \"\\\\\")[1]\n  $OUTPUT | OUT-FILE C:\\windows\\temp\\Citrix.ps1\n  $argumentList = \"-file C:\\Windows\\Temp\\Citrix.ps1\"\n  $jobname = \"PowerShell Citrix Install\";\n  $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  $SecurePassword = $servicepassword | ConvertTo-SecureString -AsPlainText -Force\n  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePassword\n  $CredPassword = $Credentials.GetNetworkCredential().Password \n  write \"Creating Task with User $($WindowsDomain)\\$($username)\"\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User \"$($WindowsDomain)\\$($username)\" -Password $CredPassword\n  sleep 10\n  Get-ScheduledTask $jobname -ea:0 | start-scheduledtask\n  \n};\n\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\n[array]$vm = $VMS.entities | where {$_.vmname -eq $vmname}\n\nif ($vm.count -gt 1){\n    write-log \"VMs are not clean, same machine exists twice\" -sev \"ERROR\"\n    break\n}\n\n\nwrite-log -message \"Getting VM Disk Detail for $($vm.uuid) using $VMIP\"\n\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n\nwrite-log -message \"Finding CDROM\"\n  \n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"CDROM is not Empty, eject captain.\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"Unmounting Whatever is in there now\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n\n$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1\n$imageobj = $images.entities | where {$_.name -eq $CitrixImageName}\n\nwrite-log -message \"Mounting Image $($imageobj.vmdiskid)\"\n\nREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobj\n\nwrite-log -message \"Installing Citrix Application Suite\"\n\n\nif ($VMName.EndsWith(\"2\")){\n\n  write-log -message \"Installing Storefront PreRequisites\"\n\n  #$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  #$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n  #$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n  #$script = \"C:\\windows\\temp\\IIS.ps1\"\n  #write 'start-transcript c:\\windows\\temp\\iis.log' | out-file $script\n  #write 'Get-NetAdapter | Get-NetAdapterBinding | Disable-NetAdapterBinding -ComponentID ms_tcpip6 -PassThru -ea:0' | out-file $script -append\n  #write 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -online -FeatureName WCF-TCP-PortSharing45' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Performance' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45' | out-file $script -append\n  #write 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASP' | out-file $script -append\n  #write '' | out-file $script -append\n  #write 'Write \"Webserver installed\"' | out-file $script -append\n  #$jobname = \"Setup IIS\";\n  #$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n  #$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n  #$task | start-scheduledtask\n  #do {\n  #  write \"Waiting for $jobname\"\n  #  sleep 60\n  #  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n  #} Until ($state.state -eq 3)\n  #try {\n  #  get-content 'c:\\windows\\temp\\iis.log'\n  #} catch {\n  #  $task | unregister-scheduledtask -confirm:0\n  #  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n  #  $task | start-scheduledtask\n  #}\n  #do {\n  #  write \"Waiting for $jobname\"\n  #  sleep 60\n  #  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n  #} Until ($state.state -eq 3)\n  \n  #$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid\n  \n  #write-log -message \"Installing CMDLets\"\n  #get-item \"$($driveletter)\\x64\\Citrix Desktop Delivery Controller\\*powershell*.msi\" | % {msiexec \/i $_.fullname \/qn;sleep 15}\n  sleep 60 \n} elseif ($VMName.EndsWith(\"0\")){\n  #$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid\n  \n  #write-log -message \"Installing CMDLets\"\n  #get-item \"$($driveletter)\\x64\\Citrix Desktop Delivery Controller\\*powershell*.msi\" | % {msiexec \/i $_.fullname \/qn;sleep 15}\n}\n\n\nPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomain\n\n#write-log -message \"Ejecting Drive\"\n\n#$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n#$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\n#if ($cdrom.is_empty -eq $false){\n#  \n#  write-log -message \"Unmounting Frame Agent\"\n#  \n#  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n#}\nwrite \"BrokerName=$env:computername\"","eval_variables":["BrokerName"],"eval_scope":"local","script_type":"npsscript","type":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait For Citrix Install","state":"ACTIVE","attrs":{"type":"","interval_secs":600},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Setup XenDesktop Core","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n\n\n\n\n\n\n$AppshortCode               = \"@@{AC}@@\"\n$AppLongCode                = \"@@{AppLongCode}@@\"\n$VMName                     = \"@@{platform.status.name}@@\"\n$WindowsDomain              = \"@@{WindowsDomain}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n$group                      = \"$($CustomerCode)-$($tier)-Admin-Accounts-Group\"\n$Service_account_User       = \"@@{Domain_Service_Account.username}@@\"\n$Service_account_Pass       = \"@@{Domain_Service_Account.secret}@@\"\n$XenDatabaseServer          = \"@@{SQL.name[0]}@@\"\n$XenLicenseServer           = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS1\"\n$VDA                        = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XAS0\"\n$PackageURL                 = \"@@{CitrixNutanixPackagesURL}@@\"\n$Sitename                   = \"XD_$($AppLongCode)LAB\"\n$SFBaseURL                  = \"https:\/\/SF-$($CustomerCode)-$($tier).$($WindowsDomain)\"                 \n$XDDeliveryController1      = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS0.$($WindowsDomain)\"\n$1CD                        = \"@@{OneCDPresent}@@\"\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nfunction New-DomainCertificate {\n  Param(  [Parameter(Position=0,Mandatory=$true)][string] $CA_HOSTFQDN,\n    [Parameter(Position=1,Mandatory=$true)][string] $CA_NAME,\n    [Parameter(Position=2,Mandatory=$true)][string] $CERT_NAME,\n    [Parameter(Position=3,Mandatory=$true)][string] $Common_NAME\n  )\n\n  Write-log -message \"Preparing Web Server Certificate request...\"\n\n  $myServer = $env:COMPUTERNAME + \".\" + $env:USERDNSDOMAIN\n  $TemplateName = \"WebServer\"\n  \n  Remove-Item webcert.inf -ErrorAction silentlycontinue | Out-Null\n  Remove-Item webcert.req -ErrorAction silentlycontinue | Out-Null\n  \n  Add-Content webcert.inf \"[NewRequest]`r\n  Subject = `\"CN=$Common_NAME`\"`r\n  Exportable = TRUE`r\n  RequestType = CMC`r\n  FriendlyName = `\"$CERT_NAME`\"`r  \n  [RequestAttributes]`r\n  CertificateTemplate = `\"$TemplateName`\"`r\"\n  \n  . certreq -new webcert.inf webcert.req | Out-Null\n\n  Write-log -message \"Sending Certificate Request...\"\n\n  . certreq -submit -config \"$CA_HOSTFQDN\\$CA_NAME\" webcert.req webcert.cer | Out-Null\n\n  Write-log -message \"Installing Certificate for IIS SSL...\"\n\n  . certreq -accept webcert.cer | Out-Null\n\n  Write-log -message \"Successfully installed the certificate.\"\n\n  #Cleanup Certificate Request Files\n  Remove-Item webcert.inf -ErrorAction silentlycontinue | Out-Null\n  Remove-Item webcert.req -ErrorAction silentlycontinue | Out-Null\n  Remove-Item webcert.cer -ErrorAction silentlycontinue | Out-Null\n  Remove-Item webcert.rsp -ErrorAction silentlycontinue | Out-Null\n\n}\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \n\nif ($env:Computername -eq \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS0\" ){\n\n  $secpass = $Service_account_Pass | ConvertTo-SecureString -asplaintext -force;\n  $username = ($Service_account_User -split \"\\\\\")[1]\n  write-log -message \"Using Domain Creds $($WindowsDomain)\\$($username)\"\n  $DomainCreds = New-Object System.Management.Automation.PsCredential(\"$($WindowsDomain)\\$($username)\",$secpass);\n\n  Add-PSSnapin Citrix* -ea:0\n\n  write-log -message \"Setting up Xen Desktop on $XenDatabaseServer \"\n\n  write-log -message \"New SiteConfig database\"\n  \n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName \"$($Sitename)_SiteConfig\" -DataStore Site -DatabaseCredentials $DomainCreds\n  \n  write-log -message \"New Logging database\"\n  \n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName \"$($Sitename)_Logging\" -DataStore Logging -DatabaseCredentials $DomainCreds\n  \n  write-log -message \"New Monitoring database\"\n  \n  New-XDDatabase -SiteName $Sitename -DatabaseServer $XenDatabaseServer -DatabaseName \"$($Sitename)_Monitoring\" -DataStore Monitor -DatabaseCredentials $DomainCreds\n\n  write-log -message  \"Creating new XenDesktop Site\"\n\n  New-XDSite -SiteName $Sitename -SiteDatabaseServer $XenDatabaseServer -SiteDatabaseName \"$($Sitename)_SiteConfig\" -LoggingDatabaseServer $XenDatabaseServer -LoggingDatabaseName \"$($Sitename)_Logging\" -MonitorDatabaseServer $XenDatabaseServer -MonitorDatabaseName \"$($Sitename)_Monitoring\"\n\n  write-log -message  \"Adding Admins group $group in $($WindowsDomain)\"\n\n  New-AdminAdministrator \"$($WindowsDomain)\\$($group)\"\n\n  Add-AdminRight -Administrator \"$($WindowsDomain)\\$($group)\" -Role \"Full Administrator\" -Scope All\n\n  write-log -message  \"Setup Licensing server\"\n\n  Set-XDLicensing -LicenseServerAddress $XenLicenseServer -LicenseServerPort 27000 -ProductCode \"XDT\" -ProductEdition \"PLT\" -Force\n\n  write-log -message  \"Config Licensing server\" \n\n  $CertHash = (Get-LicCertificate -AdminAddress \"https:\/\/$($XenLicenseServer).$($WindowsDomain):8083\").CertHash\n\n  Set-ConfigSiteMetadata -Name CertificateHash -Value $CertHash\n\n  write-log -message  \"Disable Analytics\"\n\n  Set-AnalyticsSite -Enabled $false\n\n  write-log -message  \"Enable XML Port\"\n\n  Set-BrokerSite -TrustRequestsSentToTheXmlServicePort $true\n\n  #write-log -message \"Setup Broker Catalog\"\n\n  #New-BrokerCatalog  -Name \"HIX 2016\" -Description \"OS: W2K16\" -AllocationType \"Random\" -IsRemotePC $False -MachinesArePhysical $False -MinimumFunctionalLevel \"L7_9\"  -PersistUserChanges \"OnLocal\" -ProvisioningType \"MCS\"  -SessionSupport \"MultiSession\" \n\n  write-log -message \"Install Nutanix Connector\"\n\n  $PkgDir = \"C:\\Nutanix\"\n\n  mkdir $PkgDir\n  \n  write \"Downloading Packages\"\n  write \"Using URL $PackageURL\"\n  \n  $filename = $PackageURL -split \"\/\" | select -last 1\n  $output = \"$($PkgDir)\\$($filename)\"\n  \n  $count = 0\n  do {\n    $count ++\n    try {\n      $wc = New-Object net.webclient\n      $wc.Downloadfile($PackageURL, $output)\n      $failed = 0\n    } catch {\n      sleep 15\n      $failed = 1\n    }\n  } until ($count -ge 4 -or $failed -eq 0)\n\n  Expand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n\n  $items = get-item c:\\nutanix\\*.msi\n\n #msiexec.exe NutanixAHV_Citrix_Director_Plugin_Installer.msi \/qn\n #sleep 90\n msiexec.exe \/i c:\\nutanix\\NutanixAHV_Citrix_Plugin.msi ALLUSERS=1 ISCITRIXMCSINSTALL=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ PLUGININSTALLPATH=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ INSTALLFOLDER=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\NutanixAcropolis\\ PVSINSTALLFOLDER=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\NutanixAHV\\ REGISTERPLUGINSTOREPATH=C:\\Progra~!\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ ADDLOCAL=F7_9_INSTALLFOLDER \/qn\n\n sleep 90\n} elseif ($env:Computername -eq \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS2\" ){\n  write-log -message \"Setting up IIS_IUSRS rights for storefront ASP error\"\n  $path = \"C:\\Windows\\Temp\\\"\n  $acl = Get-Acl $path\n\n  $rules = $acl.access | Where-Object { \n    \n    $_.IdentityReference -eq \"BUILTIN\\IIS_IUSRS\" \n  }\n  ForEach($rule in $rules) {\n    $acl.RemoveAccessRule($rule) | Out-Null\n  }\n  Set-ACL -Path $path -AclObject $acl\n\n  $permission = \"Everyone\",\"FullControl\",\"Allow\"\n  $rule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n  $acl.SetAccessRule($rule)  \n  $acl | Set-Acl $path\n\n  $StoreFriendlyName = $Sitename\n  $XDFarmName = $Sitename\n  \n  write-log -message \"Installing CMDLets\"\n  \n  #get-item \"Z:\\x64\\Citrix Desktop Delivery Controller\\*powershell*.msi\" | % {msiexec \/i $_.fullname \/qn;sleep 15}\n  \n# Pre-defined variables\n  . \"C:\\Program Files\\Citrix\\Receiver StoreFront\\Scripts\\ImportModules.ps1\" \n  \n  write-log -message \"Setting Vars\"\n  $SiteID = 1\n  $AuthenticationVirtualPath = \"\/Citrix\/Authentication\"\n  $StoreFriendlyNameWithoutSpaces = $StoreFriendlyName -replace '\\s',''\n  $StoreFriendlyNameWithoutSpacesWeb = $StoreFriendlyNameWithoutSpaces + \"Web\"\n  $StoreVirtualPath = \"\/Citrix\/\" + $StoreFriendlyName -replace '\\s',''\n  $StoreVirtualPathWeb = $StoreVirtualPath + \"Web\"\n  $StoreURL = $SFBaseURL + \"\/Citrix\/\" + $StoreFriendlyNameWithoutSpaces\n  $FarmType = \"XenDesktop\"\n  $Port = \"80\"\n  $TransportType = \"HTTP\"\n  $ServicePort = \"80\"\n  $SslRelayPort = \"443\"\n  $RedirectFile = \"SFRedirect.html\"\n  $RedirectPath = \"C:\\inetpub\\wwwroot\\\"\n  $RedirectPage = $RedirectPath + $Redirectfile\n  \n  write-log -message \"Create initial store (will be deleted after creation of the definitive store)\"\n\n  set-dsinitialconfiguration -hostbaseurl $SFBaseURL `\n    -farmname $XDFarmName `\n    -port 80 `\n    -transporttype HTTP `\n    -sslrelayport 443 `\n    -Servers @($XDDeliveryController1) `\n    -loadbalance $false `\n    -farmtype \"XenDesktop\" `\n    -storevirtualpath \/Citrix\/TEMP `\n    -webreceivervirtualpath \/Citrix\/TEMPWeb\n\n  write-log -message \"Create StoreFront store with one defined XenDesktop Delivery Controller\"\n  \n  $AuthSummary = Get-DSAuthenticationServicesSummary -SiteID $SiteID\n  \n  Install-DSStoreServiceAndConfigure -SiteID $SiteID `\n    -FriendlyName $StoreFriendlyName `\n    -VirtualPath $StoreVirtualPath `\n    -AuthSummary $AuthSummary `\n    -FarmName $XDFarmName `\n    -FarmType $FarmType `\n    -Servers @($XDDeliveryController1) `\n    -TransportType $TransportType `\n    -ServicePort $ServicePort `\n    -SslRelayPort $SslRelayPort\n  \n  Install-DSWebReceiver -FriendlyName $StoreFriendlyName `\n    -SiteID 1 `\n    -StoreURL $StoreURL `\n    -useHttps $false `\n    -VirtualPath $StoreVirtualPathWeb\n  \n  \n\n  if ($SFBaseURL -like \"*https*\") {\n\n\n    $SFBaseURLShort = ($SFBaseURL -replace \"https:\/\/\",\"\")\n    \n    write-log -message \"Using URL Stripped : $SFBaseURLShort\"\n \n    if ($1CD -eq 1){\n      \n      write-log -message \"We love 1CD, Lets Create a Domain signed certificate\"\n      write-log -message \"This has to run in console\"\n      $output = $null\n      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n      $principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n      $script = \"C:\\windows\\temp\\DomainCert.ps1\"\n      $jobname = \"Setup DomainCert\";\n      $item = get-item $script -ea:0\n      $error.clear()\n      if ($item){\n        remove-item $script\n      }\n      $item = get-item \"c:\\windows\\temp\\DomainCert.log\" -ea:0\n      $error.clear()\n      if ($item){\n        remove-item \"c:\\windows\\temp\\DomainCert.log\"\n      }\n      $task = Get-ScheduledTask -TaskName $jobname\n      if ( $task  ){\n        $task | unregister-scheduledtask -confirm:0\n      }\n      [array]$output += 'start-transcript c:\\windows\\temp\\DomainCert.log'\n      [array]$output += '$AppshortCode = \"' + $AppshortCode + '\"'\n      [array]$output += '$tier = \"' + $tier + '\"'\n      [array]$output += '$WindowsDomain = \"' + $WindowsDomain + '\"'\n      [array]$output += '$CustomerCode = \"' + $CustomerCode + '\"'\n      [array]$output += '$SFBaseURLShort = \"' + $SFBaseURLShort + '\"'\n      [array]$output += 'function New-DomainCertificate {'\n      [array]$output += '  Param(  [Parameter(Position=0,Mandatory=$true)][string] $CA_HOSTFQDN,'\n      [array]$output += '    [Parameter(Position=1,Mandatory=$true)][string] $CA_NAME,'\n      [array]$output += '    [Parameter(Position=2,Mandatory=$true)][string] $CERT_NAME,'\n      [array]$output += '    [Parameter(Position=3,Mandatory=$true)][string] $Common_NAME'\n      [array]$output += '  )'\n      [array]$output += '  Write-log -message \"Preparing Web Server Certificate request...\"'\n      [array]$output += '  $myServer = $env:COMPUTERNAME + \".\" + $env:USERDNSDOMAIN'\n      [array]$output += '  $TemplateName = \"WebServer\"'\n      [array]$output += '  Remove-Item webcert.inf -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '  Remove-Item webcert.req -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '  Add-Content webcert.inf \"[NewRequest]`r'\n      [array]$output += '  Subject = `\"CN=$Common_NAME`\"`r'\n      [array]$output += '  Exportable = TRUE`r'\n      [array]$output += '  RequestType = CMC`r'\n      [array]$output += '  FriendlyName = `\"$CERT_NAME`\"`r  '\n      [array]$output += '  [RequestAttributes]`r'\n      [array]$output += '  CertificateTemplate = `\"$TemplateName`\"`r\"'\n      [array]$output += '  . certreq -new webcert.inf webcert.req | Out-Null'\n      [array]$output += '  Write-log -message \"Sending Certificate Request...\"'\n      [array]$output += '  . certreq -submit -config \"$CA_HOSTFQDN\\$CA_NAME\" webcert.req webcert.cer | Out-Null'\n      [array]$output += '  Write-log -message \"Installing Certificate for IIS SSL...\"'\n      [array]$output += '  . certreq -accept webcert.cer | Out-Null'\n      [array]$output += '  Write-log -message \"Successfully installed the certificate.\"'\n      [array]$output += '  #Cleanup Certificate Request Files'\n      [array]$output += '  Remove-Item webcert.inf -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '  Remove-Item webcert.req -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '  Remove-Item webcert.cer -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '  Remove-Item webcert.rsp -ErrorAction silentlycontinue | Out-Null'\n      [array]$output += '}'\n      [array]$output += 'Function write-log {'\n      [array]$output += '  param ('\n      [array]$output += '  $message,'\n      [array]$output += '  $sev = \"INFO\",'\n      [array]$output += '  $slacklevel = 0'\n      [array]$output += '  )'\n      [array]$output += '  if ($sev -eq \"INFO\"){'\n      [array]$output += '    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"'\n      [array]$output += '  } elseif ($sev -eq \"WARN\"){'\n      [array]$output += '    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"'\n      [array]$output += '  } elseif ($sev -eq \"ERROR\"){'\n      [array]$output += '    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"'\n      [array]$output += '  } elseif ($sev -eq \"CHAPTER\"){'\n      [array]$output += '    write-host \"`n`n### $message`n`n\"'\n      [array]$output += '  }'\n      [array]$output += '}'\n      [array]$output += 'write-log -message \"Installing Domain Cert\"'\n      [array]$output += 'New-DomainCertificate -CA_HOSTFQDN \"DC1-$($Env:userdomain).$($WindowsDomain)\" -CA_NAME \"$($Env:userdomain)\" -CERT_NAME $SFBaseURLShort -Common_NAME $SFBaseURLShort'\n      [array]$output += ''\n      [array]$output += 'sleep 10'\n      [array]$output += 'write-log -message \"Installing CName Record\"'\n      [array]$output += ''\n      [array]$output += 'Add-DnsServerResourceRecordCName -Name $SFBaseURLShort -HostNameAlias \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain)\" -ZoneName \"$($WindowsDomain)\" -computer \"DC1-$($Env:userdomain).$($WindowsDomain)\"'\n      [array]$output += ''\n      [array]$output += 'sleep 10'      \n      [array]$output += 'write-log -message \"Query CName Record for $tier\"'\n      [array]$output += ''      \n      [array]$output += 'Get-DnsServerResourceRecord -ZoneName \"$($env:userdomain).nutanix.local\" -ComputerName DC1-$($Env:userdomain).$($Env:userdomain).nutanix.local| where {$_.hostname -match $Tier}'\n      [array]$output += 'sleep 30'\n\n      $script = \"C:\\windows\\temp\\DomainCert.ps1\"\n      $OUTPUT | OUT-FILE $script\n      \n      $action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n      try {\n        $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;\n      } catch {\n        $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;\n      }\n      $task | start-scheduledtask\n      do {\n        write \"Waiting for $jobname\"\n        sleep 20\n        $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n      } Until ($state.state -eq 3)\n      try {\n        get-content 'c:\\windows\\temp\\DomainCert.log'\n      } catch {\n        write \"No log file....\" -sev \"WARN\"\n      }\n      do {\n        write \"Waiting for $jobname\"\n        sleep 20\n        $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n      } Until ($state.state -eq 3)\n    \n    } else {\n\n      write-log -message \"Create self signed certificate\"\n  \n      $cert = New-SelfSignedCertificate -certstorelocation cert:\\localmachine\\my -dnsname $SFBaseURLShort\n\n      write-log -message \"Trusting self...\"\n\n      $rootStore = New-Object System.Security.Cryptography.X509Certificates.X509Store -ArgumentList Root, LocalMachine\n      $rootStore.Open(\"MaxAllowed\")\n      $rootStore.Add($cert)\n      $rootStore.Close()\n\n      write-log -message \"This is lame and there is almost no point as the Receiver will never work on non trusted certs...\"\n\n      \n    }\n    write-log -message \"Adding DNS CName for $SFBaseURLShort\"\n    write-log -message \" Using Alias $($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain)\"\n    write-log -message \" On DC DC1-$($Env:userdomain).$($WindowsDomain)\"\n    \n    #Add-DnsServerResourceRecordCName -Name $SFBaseURLShort -HostNameAlias \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS2.$($WindowsDomain)\" -ZoneName \"$($WindowsDomain)\" -computer \"DC1-$($Env:userdomain).$($WindowsDomain)\"\n\n    write-log -message \"Get certificate thumbprint\"\n\n    $Thumbprint = (Get-ChildItem -Path Cert:\\LocalMachine\\My | Where-Object {$_.Subject -match \"$SFBaseURLShort\"}).Thumbprint\n\n    write-log -message \"Create new IIS binding\"\n\n    New-WebBinding -Name \"Default Web Site\" -IP \"*\" -Port 443 -Protocol https\n\n    write-log -message \"Add certiticate to IIS binding\"\n\n    $Binding = Get-WebBinding -IPAddress \"*\" -Port 443 -Protocol https\n    $Binding.AddSslCertificate($Thumbprint, \"my\")\n\n    write-log -message \"Creating CName for XBS2\"\n\n\n  }\n  \n  \n\n\n  write-log -message \"Create redirect to StoreFront site\"\n\n  Add-Content $RedirectPage \"<script type=\"\"text\/javascript\"\">\"\n  Add-Content $RedirectPage \"<!--\"\n  Add-Content $RedirectPage \"window.location=\"\"\/Citrix\/$StoreFriendlyNameWithoutSpacesWeb\"\";\"\n  Add-Content $RedirectPage \"\/\/ -->\"\n  Add-Content $RedirectPage \"<\/script>\"\n  Add-WebConfiguration \"system.webserver\/defaultdocument\/files\" -atIndex 0 -Value $RedirectFile\n\n  write-log -message \"Remove initial store ----------\"\n  #Remove-DSStore2 -SiteID 1 -VirtualPath \"\/Citrix\/TEMP\"\n  $error.clear()\n  \n} elseif ($env:Computername -eq \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS3\" ){\n\n  write-log -message \"Setting up IIS_IUSRS rights for Director ASP error\"\n  $path = \"C:\\Windows\\Temp\\\"\n  $acl = Get-Acl $path\n\n  $rules = $acl.access | Where-Object { \n    \n    $_.IdentityReference -eq \"BUILTIN\\IIS_IUSRS\" \n  }\n  ForEach($rule in $rules) {\n    $acl.RemoveAccessRule($rule) | Out-Null\n  }\n  Set-ACL -Path $path -AclObject $acl\n  \n  write-log -message \"Install Director Plugin\"\n\n  $PkgDir = \"C:\\Nutanix\"\n\n  mkdir $PkgDir\n  \n  write \"Downloading Packages\"\n  write \"Using URL $PackageURL\"\n  \n  $filename = $PackageURL -split \"\/\" | select -last 1\n  $output = \"$($PkgDir)\\$($filename)\"\n  \n  $count = 0\n  do {\n    $count ++\n    try {\n      $wc = New-Object net.webclient\n      $wc.Downloadfile($PackageURL, $output)\n      $failed = 0\n    } catch {\n      sleep 15\n      $failed = 1\n    }\n  } until ($count -ge 4 -or $failed -eq 0)\n\n  Expand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n\n  $items = get-item c:\\nutanix\\*.msi\n\n  msiexec.exe c:\\nutanix\\NutanixAHV_Citrix_Director_Plugin_Installer.msi \/qn\n  sleep 90\n  #msiexec.exe \/i c:\\nutanix\\NutanixAHV_Citrix_Plugin.msi ALLUSERS=1 ISCITRIXMCSINSTALL=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ PLUGININSTALLPATH=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ INSTALLFOLDER=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\NutanixAcropolis\\ PVSINSTALLFOLDER=C:\\Progra~1\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\NutanixAHV\\ REGISTERPLUGINSTOREPATH=C:\\Progra~!\\Common~1\\Citrix\\HCLPlugins\\CitrixMachineCreation\\v1.0.0.0\\ ADDLOCAL=F7_9_INSTALLFOLDER \/qn\n\n sleep 90\n  \n} else {\n\n  write-log -message  \"Xen Desktop roles do not require any configuration on this node\"\n\n} ","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"XBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Change CD Drive to Z","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n# No variables required.\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Change CD Drive to Z\"\n\n$cd = $NULL\n$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $env:COMPUTERNAME -ErrorAction Stop\nSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter \"DriveLetter = '$($cd.drive)'\" ) -Arguments @{DriveLetter='Z:'}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5f9e4cab_runbook_cloned_2_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d2d318a8_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Install Xen Backend Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"728c8c5c_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4d024299_runbook_cloned_2_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"728c8c5c_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"Citrix_1912_ISO","version":"","options":{"type":"","name":"Citrix_1912_ISO","resources":{"image_type":"ISO_IMAGE","checksum":{"checksum_algorithm":"SHA_1","type":"","checksum_value":"921E7BA91C5C2873D618C41B918F97ED92CA4CF6"},"source_uri":"https:\/\/dl.dropboxusercontent.com\/s\/a0b0x99xd0k2poq\/Citrix_Virtual_Apps_and_Desktops_7_1912.iso","version":{"product_version":"1912","type":"","product_name":"Citrix"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"ConfigXBS"}],"name":"Config XenDesktop Backend Servers","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Config XenDesktop Backend Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Configure XD Final"}],"name":"4e2145cc_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigXBS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Configure XD Final","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n# kees@nutanix.com \/ mgrauwmans@nutanix.com\n# @kbaggerman on Twitter\n# http:\/\/blog.myvirtualvision.com\n# Created on March, 2019\n\n# Setting parameters for the connection\n\n$PEAdmin                                               = \"@@{PC_CRED.username}@@\"\n$PEPass                                                = \"@@{PC_CRED.secret}@@\"\n$AppshortCode                                          = \"@@{AC}@@\"\n$AppLongCode                                           = \"@@{AppLongCode}@@\"\n$PEClusterIP                                           = \"@@{PEIP}@@\" \n$machineCount                                          = @@{XenAppServerCount}@@ \n$ConnectionName                                        = \"Nutanix AHV\" # Name of the Connector\n$VlanName                                              = \"@@{VLanName}@@\" # AutoSelect, sort alfabet (1st) Or specify the VLAN Name\n$storagecontainerName                                  = \"@@{StorageContainerName}@@\" # Name of the container to use for MCS\n$Tier                                                  = \"@@{Tier}@@\"\n$customercode                                          = \"@@{CustomerName}@@\"\n$customerNameLong                                      = \"@@{CustomerNameLong}@@\"\n$WindowsDomain                                         = \"@@{WindowsDomain}@@\"\n$DomainPath                                            = \"DC=\" + (($env:USERDNSDOMAIN).split(\".\") -join \",DC=\")\n$adContainerDN                                         = \"OU=MCS,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"\n$vCPU                                                  = 2\n$RAM                                                   = 16384\n$coresPerCPU                                           = 4\n$hypConnName                                           = \"Nutanix AHV\"\n$adAccountNameSpecification                            = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XAI#\"\n$baseImage                                             = \"@@{ConfigXAS.SnapshotName}@@\" # Snapshot Name\n$OSChoise                                              = \"@@{WindowsEdition}@@\"\n$idPoolName                                            = \"$($OSChoise) $($AppshortCode)\"\n$provSchemeName                                        = \"$($OSChoise) $($AppshortCode)\"\n$CVADController                                        = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XBS0\" # Delivery Controller Host\n$allocType                                             = \"Random\"\n$sessionSupport                                        = \"MultiSession\"\n$persistChanges                                        = \"Discard\"\n$DeliveryGroupName                                     = \"$($AppLongCode)-DG\"\n\n$mgmtPasswordSec = ConvertTo-SecureString $PEPass -AsPlainText -Force # Converting the Nutanix Prism password to a secure string to connect to the cluster\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n## Functions\n\nFunction write-log {\n  <#\n   .Synopsis\n   Write logs for debugging purposes\n   \n   .Description\n   This function writes logs based on the message including a time stamp for debugging purposes.\n  #>\n  param (\n  $message,\n  $sev = \"INFO\"\n  )\n  if ($sev -eq \"INFO\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | INFO | $message\"\n  } elseif ($sev -eq \"WARN\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | WARN | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n  write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-Subnets {\n  Param (\n    [string] $PEClusterIP,\n    [string] $PEPass,\n    [string] $PEUser,\n    [string] $networkname\n  )\n\n  write-log -message \"Debug level is $debug\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($PEUser):$($PEPass)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Building Subnet Query JSON\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v3\/subnets\/list\"\n  $Payload= @{\n    kind=\"subnet\"\n    offset=0\n    length=999\n  } \n\n  $JSON = $Payload | convertto-json\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $JSON -ContentType 'application\/json' -headers $headers;  \n  } catch {\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $JSON -ContentType 'application\/json' -headers $headers;\n    \n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-StorageContainers {\n  Param (\n    [string]  $PEClusterIP,\n    [string]  $PEPass,\n    [string]  $PEUser\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($PEUser):$($PEPass)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Getting all Storage Containers\"\n\n  $containerURL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers\"\n\n  try {\n\n    $StorageContainer = Invoke-RestMethod -Uri $containerURL -method \"get\" -headers $headers\n\n    write-log -message \"VMCreated, getting uuid\"\n\n\n  } catch {\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    sleep 60\n   \n    $StorageContainer = Invoke-RestMethod -Uri $containerURL -method \"get\" -headers $headers\n\n\n  }\n  return $StorageContainer\n} \n\n### Logic \n\nif ($env:Computername -eq \"HX-$($tier)-$($CustomerCode)-XBS0\" ){\n  start-transcript -path \"C:\\windows\\temp\\XDFinal.log\"\n  $subnets = REST-Get-Subnets -PEClusterIP $PEClusterIP -PEPass $PEPass -PEUser $PEAdmin\n  if ($VlanName -eq \"AutoSelect\"){\n\n    $network = $subnets.entities.spec.name | sort | select -first 1\n\n  } else {\n\n    $network = $subnets.entities.spec.name | where {$_ -eq $VlanName}\n\n  }\n\n\n  $hostingUnitName = $network                                            # Reusing the VLAN Name as ResourceName to avoid multiple connections with the same resource definition\n   # Setting the OU for the desktops\n  \n  # Grabbing the containerID from the parameter Container using REST (NO MORE CMDLETS PEOPLE)\n  $containers = REST-Get-StorageContainers -PEClusterIP $PEClusterIP -PEPass $PEPass -PEUser $PEadmin\n  $containerinfo = $containers.entities | where {$_.name -eq $storagecontainerName }\n  $ContainerId = ($Containerinfo.id.split(\":\"))[2]\n \n  \n  $connectionCustomProperties = \"<CustomProperties><\/CustomProperties>\"\n  $hostingCustomProperties = \"<CustomProperties><\/CustomProperties>\"\n  \n  $provcustomProperties = @\"\n\n<CustomProperties xmlns=\"http:\/\/schemas.citrix.com\/2014\/xd\/machinecreation\">\n\n  <StringProperty Name=\"ContainerPath\" Value=\"$containerID.container\"\/>\n\n  <StringProperty Name=\"vCPU\" Value=\"$vCPU\"\/>\n\n  <StringProperty Name=\"RAM\" Value=\"$RAM\"\/>\n\n  <StringProperty Name=\"CPUCores\" Value=\"$coresPerCPU\"\/>            \n\n<\/CustomProperties>\n\n\"@\n\n  # Setting variables for the hosting connection(s)\n  \n  $hypRootPath = \"xdhyp:\\Connections\\\"+$hypConnName+\"\\\"\n  $baseImagePath = \"xdhyp:\\HostingUnits\\\" + $hostingUnitName +\"\\\"+ $baseImage+\".template\"\n  $networkPath1 = $hypRootPath+$network+\".network\"\n  $networkMap = @{ \"0\" = \"XDHyp:\\HostingUnits\\\" + $hostingUnitName +\"\\\"+ $network+\".network\" }\n  $storagePath = $hypRootPath+$storage+\".storage\"\n  \n  \n  # Adding PS cmdlets for Citrix\n  $loadedsnapins=(Get-PSSnapin -Registered | Select-Object name).name\n  if(!($loadedsnapins.Contains(\"Citrix\"))){\n   Add-PSSnapin -Name Citrix* \n   write-log -message \"Citrix cmdlets are loaded, commencing the script\"\n  }\n  \n  if ($null -eq (Get-PSSnapin -Name Citrix* -ErrorAction SilentlyContinue)){\n  \n    write-log -message \"Citrix cmdlets are not loaded, aborting the script\"\n  \n    break\n  }\n  \n  \n  #region Setting up the hosting connection\n  \n  $ExistinghostingConnection = Test-Path -EA Stop -Path @(\"XDHyp:\\Connections\\$ConnectionName\") -AdminAddress $CVADController\n  write-log -message \"Checking if the hosting connection already exists\"\n  \n  #region Setting up the hosting connection for AHV\n  \n  \n  if ($ExistinghostingConnection -eq $False){\n    $Connectionuid = New-Item -ConnectionType \"Custom\" -CustomProperties \"\" -HypervisorAddress @(\"$PEClusterIP\") -Path @(\"XDHyp:\\Connections\\$ConnectionName\") -PluginId \"AcropolisFactory\" -Scope @() -SecurePassword $mgmtPasswordSec -UserName $PEAdmin -persist | Select-Object HypervisorConnectionUid\n    New-BrokerHypervisorConnection -AdminAddress $CVADController -HypHypervisorConnectionUid $connectionuid.HypervisorConnectionUid | Out-Null\n      \n    write-log -message \"Creating the hosting connection $ConnectionName\"\n    \n    Set-HypAdminConnection -AdminAddress $CVADController\n  \n    $ExistinghostingResource = Test-Path -EA Stop -Path @(\"XDHyp:\\HostingUnits\\$network\") -AdminAddress $CVADController\n  \n    if ($ExistinghostingResource -eq $False){\n  \n      New-Item -HypervisorConnectionName $ConnectionName -NetworkPath @(\"XDHyp:\\Connections\\$ConnectionName\\$($network).network\") -Path @(\"XDHyp:\\HostingUnits\\$network\") -PersonalvDiskStoragePath @() -RootPath \"XDHyp:\\Connections\\$ConnectionName\" -StoragePath @() | Out-Null\n        \n      write-log -message \"Creating the resources $network for $ConnectionName\"\n  \n    } Else {\n  \n      Write-log -message \"This VLAN is already assigned as a resource to the hosting connection, terminating the script\"\n      break\n    }\n  \n  } Else {\n  \n    write-log -message \"This hosting connection already exists\" -sev \"WARN\"\n  \n  }\n  \n  #endregion Setting up the hosting connection for ESXi\n  \n  $hypHc = get-Item -Path xdhyp:\\Connections\\$ConnectionName \n  \n  #endregion Setting up the hosting connection\n  \n  #endregion Setting up the hosting connection\n  \n  # Create the AdIdentity Pool \n  if (!(Get-AcctIdentityPool).IdentityPoolName -eq $idPoolName){\n    Try{\n    \n      $adAccountPool = New-AcctIdentityPool -IdentityPoolName $idPoolName -NamingScheme $adAccountNameSpecification -NamingSchemeType Numeric -Domain $WindowsDomain -OU $adContainerDN\n    \n      write-log -message \"Creating the AD account pool\"\n    \n    } Catch {\n    \n      write-log -message \"Unable to create the AD account pool\" -sev \"WARN\"\n    \n      break\n    }\n  } else {\n\n      write-log -message \"ID Pool Already exists\" -sev \"WARN\"\n\n  }  \n  \n  # Create the Provisioning Scheme\n  if (!(Get-ProvScheme).ProvisioningSchemeName -eq $idPoolName){\n    Try{\n    \n      $provScheme = New-ProvScheme -ProvisioningSchemeName $provSchemeName -HostingUnitName $hostingUnitName -MasterImageVM $baseImagePath -IdentityPoolName $idPoolName -CleanOnBoot -NetworkMapping $networkMap -CustomProperties $provcustomProperties\n    \n      write-log -message \"Creating the prov scheme\"\n    \n    } Catch {\n      \n      write-log -message \"Unable to create the prov scheme\" -sev \"WARN\"\n    \n      break\n    }\n  } else {\n\n      write-log -message \"Prov Scheme Already exists\" -sev \"WARN\"\n\n  }  \n  \n  \n  ## Create AD accounts does not work due to double hopp, Task is required.\n  \n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n  $principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n  $script = \"C:\\windows\\temp\\AdAccount.ps1\"\n  [array]$output += 'start-transcript c:\\windows\\temp\\AdAccount.log'\n  [array]$output += 'Write \"Creating ' + $machineCount  + ' AD Accounts using single hop console trick' + '\"'\n  [array]$output += '$adAccounts = New-AcctADAccount -IdentityPoolName '+ '\"' + $idPoolName + '\"' + ' -Count ' + '\"' + $machineCount + '\"' \n  [array]$output += 'sleep 30' \n  [array]$output += '$adaccounts = get-AcctADAccount ' \n  [array]$output += 'write \"We have $($adaccounts.count) created\"'\n  [array]$output += 'sleep 30'\n  $script = \"C:\\windows\\temp\\AdAccount.ps1\"\n  $OUTPUT | OUT-FILE $script\n  $jobname = \"Setup ADaccount\";\n  $action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;\n  $task | start-scheduledtask\n  do {\n    write \"Waiting for $jobname\"\n    sleep 20\n    $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n  } Until ($state.state -eq 3)\n  try {\n    get-content 'c:\\windows\\temp\\AdAccount.log'\n  } catch {\n    $task | unregister-scheduledtask -confirm:0\n    $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings;\n    $task | start-scheduledtask\n  }\n  do {\n    write \"Waiting for $jobname\"\n    sleep 20\n    $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n  } Until ($state.state -eq 3)\n  #$task | unregister-scheduledtask -confirm:0\n\n\n  # Create the AD accounts and VMs\n\n\n  [array]$adaccounts = get-AcctADAccount  \n  write-log \"We have $($adaccounts.count)\"\n  \n  if ($adaccounts.count -ne $machinecount){\n    write \"did we run at al?\"\n    $task | start-scheduledtask\n    sleep 20\n    do {\n      write \"Waiting for $jobname\"\n      sleep 20\n      $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n    } Until ($state.state -eq 3)\n  }\n  # Integrate With Broker\n  \n  Try{\n     write-log -message \"Creating Vms\"\n  \n     $adAccounts = get-AcctADAccount\n     $vms = New-ProvVm -ProvisioningSchemeName $provSchemeName -ADAccountName $adAccounts.ADAccountName\n     \n  } Catch {\n  \n    write-log -message \"Unable to create the VMs\"\n    \n    Break\n  }\n\n  $provScheme = Get-ProvScheme -ProvisioningSchemeName $provSchemeName\n  $bhc = get-BrokerHypervisorConnection -HypHypervisorConnectionUid $hypHc.HypervisorConnectionUid\n  \n  # Wait for the broker's hypervisor connection to be ready before trying to use it.\n  \n  while (-not $bhc.IsReady) {\n  \n      Start-Sleep -s 5\n  \n      $bhc = Get-BrokerHypervisorConnection -HypHypervisorConnectionUid $hypHc.HypervisorConnectionUid\n       write-log -message \"Waiting for the hypervisor connection to be ready\"\n  \n  }\n  \n\n  Try {\n    $bdc = New-BrokerCatalog -Name $provSchemeName -AllocationType $allocType -ProvisioningType MCS -ProvisioningSchemeId $provScheme.ProvisioningSchemeUid -PersistUserChanges $persistChanges -SessionSupport $sessionSupport\n  \n    write-log -message \"Creating the broker catalog\"\n  \n  } Catch {\n  \n    write-log -message \"Unable to create the broker catalog\" -sev \"WARN\"\n  \n    break\n  }\n  \n  # Clone the VMs and make sure they're available under the machine catalog\n  \n  $machineCreatedCount = 0\n  \n  foreach ($provVm in $vms.CreatedVirtualMachines){\n  \n    $bpm = New-BrokerMachine -CatalogUid $bdc.Uid -HypervisorConnectionUid $bhc.Uid -HostedMachineId $provVm.VMId -MachineName $provVm.AdAccountSid\n    $machineCreatedCount++\n  \n  }\n  \n  write-log -message \"Creating $($machineCount) VMs\"\n  \n  if($machineCreatedCount -gt 0){\n  \n    write-log -message \"Setup and Machine Catalog creation completed successfully\"\n  \n  }\n  \n  if ($OSChoise -match \"2016|2019\"){\n    $kind = \"Shared\"\n  } else {\n    $kind = \"Private\"\n  }\n\n  write-log -message \"Creating the delivery group $DeliveryGroupName mode $Kind\"\n\n  New-BrokerDesktopGroup -AdminAddress $CVADController -ColorDepth \"TwentyFourBit\" -DeliveryType \"DesktopsAndApps\" -DesktopKind \"Shared\" -InMaintenanceMode $False -IsRemotePC $False -MinimumFunctionalLevel \"L7_9\" -Name $DeliveryGroupName -OffPeakBufferSizePercent 10 -OffPeakDisconnectAction \"Nothing\" -OffPeakDisconnectTimeout 0 -OffPeakExtendedDisconnectAction \"Nothing\" -OffPeakExtendedDisconnectTimeout 0 -OffPeakLogOffAction \"Nothing\" -OffPeakLogOffTimeout 0 -PeakBufferSizePercent 10 -PeakDisconnectAction \"Nothing\" -PeakDisconnectTimeout 0 -PeakExtendedDisconnectAction \"Nothing\" -PeakExtendedDisconnectTimeout 0 -PeakLogOffAction \"Nothing\" -PeakLogOffTimeout 0 -PublishedName $DeliveryGroupName -Scope @() -SecureIcaRequired $False -SessionSupport $sessionSupport -ShutdownDesktopsAfterUse $True -TimeZone \"W. Europe Standard Time\" | Out-Null\n  \n  write-log -message \"Grabbing all available VMs\"\n  $AvailableVMs = Get-BrokerMachine -AdminAddress $CVADController | Where-Object {$_.DesktopGroupName -eq $null}\n\n  Foreach ($vm in $AvailableVMs) {\n    Add-BrokerMachine -AdminAddress $CVADController -DesktopGroup $DeliveryGroupName -InputObject $vm.UID\n  }\n  \n  write-log -message \"Adding $($AvailableVMs.count) VMs to the Delivery Group $DeliveryGroupName\"\n  \n  $DesktopBrokerGroup = Get-BrokerDesktopGroup | Where-Object {$_.Name -eq $DeliveryGroupName}\n\n  write-log -message \"Creating Access Rule for connections NOT traversing Access Gateway\" \n  \n  New-BrokerAccessPolicyRule -AdminAddress $CVADController -AllowedConnections \"NotViaAG\" -AllowedProtocols @(\"HDX\",\"RDP\") -AllowedUsers \"AnyAuthenticated\" -AllowRestart $True -DesktopGroupUid $DesktopBrokerGroup.Uid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedUserFilterEnabled $True -IncludedUsers @() -Name $DeliveryGroupName+\"_Direct\" | Out-Null\n    \n  write-log -message \"Creating Access Rule for connections traversing Access Gateway\"\n  \n  New-BrokerAccessPolicyRule -AdminAddress $CVADController -AllowedConnections \"ViaAG\" -AllowedProtocols @(\"HDX\",\"RDP\") -AllowedUsers \"AnyAuthenticated\" -AllowRestart $True -DesktopGroupUid $DesktopBrokerGroup.Uid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedSmartAccessTags @() -IncludedUserFilterEnabled $True -IncludedUsers @() -Name $DeliveryGroupName+\"_AG\" | Out-Null\n  \n  write-log -message \"Testing Broker Access Policies for Direct connections\"\n\n  Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+\"_Direct\") | Out-Null\n\n  write-log -message \"Testing if the access rule for connections NOT traversing Access Gateway was created\"\n\n  Test-BrokerAccessPolicyRuleNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+\"_AG\") | Out-Null\n  \n  write-log -message \"Testing if there's a power schedule available during weekdays\"\n\n  Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+\"_Weekdays\") | Out-Null\n  \n  if ($kind -eq \"Private\"){\n    write-log -message \"Creating a new power schedule during weekdays for the delivery group\"\n\n    New-BrokerPowerTimeScheme -AdminAddress $CVADController -DaysOfWeek \"Weekdays\" -DesktopGroupUid $DesktopBrokerGroup.Uid -DisplayName \"Weekdays\" -Name $DeliveryGroupName+\"_Weekdays\" -PeakHours @($True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) | Out-Null\n  }\n\n  write-log -message \"Testing if there's a power schedule available during weekends\"\n\n  Test-BrokerPowerTimeSchemeNameAvailable -AdminAddress $CVADController -Name @($DeliveryGroupName+\"_Weekend\") | Out-Null\n  \n  if ($kind -eq \"Private\"){\n\n    write-log -message \"Creating a new power schedule during weekends for the delivery group\"\n\n    New-BrokerPowerTimeScheme -AdminAddress $CVADController -DaysOfWeek \"Weekend\" -DesktopGroupUid $DesktopBrokerGroup.Uid -DisplayName \"Weekend\" -Name $DeliveryGroupName+\"_Weekend\" -PeakHours @($True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)  | Out-Null\n  }\n  \n  write-log -message \"Adding Desktop To DG\"\n  $DesktopGroupName = \"*\"\n\n  $vda = (Get-BrokerMachine -SessionSupport MultiSession -DesktopGroupName $DesktopGroupName) | select -first 1\n\n  New-BrokerEntitlementPolicyRule \"$($OSChoise) $($AppLongCode)\" -DesktopGroupUid $VDA.DesktopGroupUid -PublishedName \"$($OSChoise) $($AppLongCode)\" -IncludedUserFilterEnabled $false\n\n\n\n} else {\n\n  write-log -message \"This step is not meant to be executed on $($env:computername)\"\n\n}\n\n$error.clear()","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"0be9c34d_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"4e2145cc_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Config XenDesktop Backend Servers"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"a101dae2_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"91a77973_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"a101dae2_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"ConfigMGT"}],"name":"Configure MGT Part 2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure MGT Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install Choco Client"},{"kind":"app_task","name":"Join Reboot"},{"kind":"app_task","name":"Join Reboot Wait"},{"kind":"app_task","name":"Install Apps MGT"},{"kind":"app_task","name":"Configure Nutanix Files"},{"kind":"app_task","name":"Create Dummy Content"},{"kind":"app_task","name":"IIS Install"},{"kind":"app_task","name":"Change CDROM drive to Z"},{"kind":"app_task","name":"SetVar ERA IP"},{"kind":"app_task","name":"Install Workspace App"}],"name":"9ed4ee76_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Apps MGT"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"IIS Install"}},{"from_task_reference":{"kind":"app_task","name":"IIS Install"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Change CDROM drive to Z"}},{"from_task_reference":{"kind":"app_task","name":"Configure Nutanix Files"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Dummy Content"}},{"from_task_reference":{"kind":"app_task","name":"Install Choco Client"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Join Reboot"}},{"from_task_reference":{"kind":"app_task","name":"Join Reboot"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Join Reboot Wait"}},{"from_task_reference":{"kind":"app_task","name":"Join Reboot Wait"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Apps MGT"}},{"from_task_reference":{"kind":"app_task","name":"Join Reboot Wait"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Configure Nutanix Files"}},{"from_task_reference":{"kind":"app_task","name":"Change CDROM drive to Z"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetVar ERA IP"}},{"from_task_reference":{"kind":"app_task","name":"SetVar ERA IP"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Install Workspace App"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Choco Client","state":"ACTIVE","attrs":{"exit_status":[],"script":"$ChocoPackagesURL      = \"@@{ChocoPackagesURL}@@\"\n$ChocoClientPackageURL = \"@@{ChocoClientPackageURL}@@\"\n\n$localChocolateyPackageFilePath = \"c:\\windows\\temp\"\n\n$localChocolateyPackageFilePathExists = get-item $localChocolateyPackageFilePath -ea:0\nif ($localChocolateyPackageFilePathExists){\n\n  write \"Removing Client dir\"\n\n  remove-item $localChocolateyPackageFilePath -recurse -force -confirm:0 -ea:0\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n} else {\n  mkdir $localChocolateyPackageFilePath -force -confirm:0 -ea:0\n}\n\n$PkgDir = \"C:\\Packages\"\n$PkgDirexists = get-item $PkgDir -ea:0\nif ($PkgDirexists){\n\n  write \"Removing Package dir\"\n\n  remove-item $PkgDir -recurse -force -confirm:0 -ea:0\n} \nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoClientPackageURL\"\n\n$filename = $ChocoClientPackageURL -split \"\/\" | select -last 1\n$output = \"$($localChocolateyPackageFilePath)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoClientPackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($localChocolateyPackageFilePath)\\$($filename)\" -DestinationPath $localChocolateyPackageFilePath\n\n$Toolspath = \"$($localChocolateyPackageFilePath)\\Tools\"\ncd $toolspath\n$PSFile = \"$($Toolspath)\\chocolateyInstall.ps1\"\n& $PSFile\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $ChocoPackagesURL\"\n\n$filename = $ChocoPackagesURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($ChocoPackagesURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\nchoco source remove --name='chocolatey'\nchoco source add --name='local' --source='c:\\packages'\nchoco upgrade chocolatey -y","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Join Reboot","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n$AppshortCode     = \"@@{AC}@@\"\n$AppLongCode      = \"@@{AppLongCode}@@\"\n$ServiceAccount   = \"@@{Service_Account.username}@@\"        \n$servicePassword  = \"@@{Service_Account.secret}@@\"\n$DomainUsername   = \"@@{DomainInstallUser.username}@@\";\n$DomainPassword   = \"@@{DomainInstallUser.secret}@@\";\n$WindowsDomain    = \"@@{WindowsDomain}@@\"\n$tier             = \"@@{Tier}@@\"\n$customerNameLong = \"@@{CustomerNameLong}@@\"\n\nFunction Set-AutoLogon{\n    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultUsername,\n        [Parameter(Mandatory=$True,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [String[]]$DefaultPassword,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$AutoLogonCount,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$DefaultDomain,\n        [Parameter(Mandatory=$False,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)]\n        [AllowEmptyString()]\n        [String[]]$Script            \n    )\n    Begin\n    {\n        #Registry path declaration\n        $RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n        $RegROPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\n    }\n    Process\n    {\n        try\n        {\n            #setting registry values\n            Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String  \n            Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"$DefaultUsername\" -type String  \n            Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$DefaultPassword\" -type String\n            Set-ItemProperty $RegPath \"DefaultDomainName\" -Value \"$DefaultDomain\" -type String\n            if($AutoLogonCount)\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"$AutoLogonCount\" -type DWord\n            }\n            else\n            {\n                Set-ItemProperty $RegPath \"AutoLogonCount\" -Value \"1\" -type DWord\n            }\n            if($Script)\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"$Script\" -type String\n            }\n            else\n            {\n                Set-ItemProperty $RegROPath \"(Default)\" -Value \"\" -type String\n            }        \n        }\n\n        catch\n        {\n\n            Write-Output \"An error had occured $Error\"\n            \n        }\n    }\n    End\n    {\n        \n        #End\n\n    }\n}\n\n\n\n$Securepass = ConvertTo-SecureString -asPlainText -Force -String $DomainPassword;\n$credential = New-Object System.Management.Automation.PSCredential(\"$($WindowsDomain)\\$($DomainUsername)\",$Securepass);\n$array = $WindowsDomain.Split(\".\")\n$DomainPath = \"DC=$($array -join (\",DC=\"))\"\n$ou =  \"OU=Servers,OU=$tier,OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"\n\nAdd-computer -DomainName $WindowsDomain -Credential $credential -force -Options AccountCreate -oupath $ou\n\nwrite \"Setting Autologon to domain service account\"\n\n$username = ($serviceaccount -split \"\\\\\")[1]\nset-autologon -DefaultUsername $username -DefaultPassword $servicepassword -defaultdomain $WindowsDomain -AutoLogonCount 9999999\nshutdown -r -t 5","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Join Reboot Wait","state":"ACTIVE","attrs":{"type":"","interval_secs":90},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Apps MGT","state":"ACTIVE","attrs":{"exit_status":[],"script":"try {\n  choco install googlechrome -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install googlechrome -y --ignore-checksums\n}\ntry {\n  choco install 7zip.install -y --ignore-checksums\n} catch {\n  sleep (get-random 0,45)\n  choco install 7zip.install -y --ignore-checksums\n}\ntry {\n  choco install pswindowsupdate -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install pswindowsupdate -y --ignore-checksums\n}\ntry {\n  choco install bginfo -y --ignore-checksums\n} catch {\n  sleep 20\n  choco install bginfo -y --ignore-checksums\n} \n\nsleep 20\n$bgInfoRegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"\n$bgInfoRegkey = \"BgInfo\"\n$bgInfoRegType = \"String\"\n$bgInfoRegkeyValue = \"C:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt\"\n\nNew-ItemProperty -Path $bgInfoRegPath -Name $bgInfoRegkey -PropertyType $bgInfoRegType -Value $bgInfoRegkeyValue\n\nC:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt \nwrite 'c:\\ProgramData\\chocolatey\\lib\\bginfo\\Tools\\Bginfo64.exe C:\\Packages\\Hix.bgi \/timer:0 \/nolicprompt' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\bginfo.cmd\" -Encoding ASCII\n ","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Configure Nutanix Files","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$serviceuser                = \"@@{Service_Account.username}@@\"\n$servicePassword            = \"@@{Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Add-FileServerShares {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [object] $vfiler,\n    [string] $nodecount = 3,\n    [String] $WindowsAdDomainName,\n    [string] $tier,\n    [string] $CustomerCode\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Adding Fileserver Shares\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/$($vfiler.uuid)\/shares\/?force=true\"\n\n  write-log -message \"Using URL $URL\"\n\n$Userhomejson1= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Userhome\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": true,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"User Home Data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"HOMES\"\n}\n\"@\n$Userhomejson2= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Userhome\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": true,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"User Home Data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"GENERAL\"\n}\n\"@\n$Departmentjson= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Department\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": false,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"Department data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"GENERAL\"\n}\n\"@\n\n  if ($nodecount -le 2){\n    $Userhomejson = $Userhomejson2\n  } else {\n    $Userhomejson = $Userhomejson1\n  }\n  $shares = REST-Query-Shares -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername\n  [array]$Delete += $shares.entities | where {$_.name -match \"$($CustomerCode)-$($Tier)\"}\n  if ($delete){\n\n    write-log -message \"We found $($delete.count) shares to clean first.\"\n\n    foreach ($share in $delete){\n      sleep 20  \n      write-log -message \"Deleting $($share.uuid)\"\n\n      REST-Delete-Share -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername -vfilerUUID $vfiler.uuid -shareUUID $share.uuid\n      sleep 60\n    }\n  }\n  try{\n\n    write-log -message \"Creating Userhome\"\n      \n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Userhomejson -ContentType 'application\/json' -headers $headers;\n    sleep 40\n  } catch {\n\n    write-log -message \"Creating Userhome again\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Userhomejson -ContentType 'application\/json' -headers $headers;\n    sleep 40\n\n  }\n  try{\n    write-log -message \"Creating Department\"\n\n    sleep 40\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Departmentjson -ContentType 'application\/json' -headers $headers;     \n  } catch {\n\n    write-log -message \"Creating Department again\"\n\n    sleep 40\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Departmentjson -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"Department Created\"\n  }\n    \n  write-log -message \"All Shares Created\"\n\n\n  Return $task\n} \n\nFunction REST-Query-FileServer {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"File Server Query\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Query-Shares {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"File Share Query\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/shares\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  Return $task\n} \n\nFunction REST-Delete-Share {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $vfilerUUID,\n    [string] $shareUUID\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Delete Share $($shareUUID) on vFiler $($vfilerUUID)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/$($vfilerUUID)\/shares\/$($shareUUID)?force=true\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  Return $task\n} \n\nFunction PSR-Generate-FilesContent {\n  param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $username,\n    [string] $password,\n    [string] $domainname,\n    [string] $fsname,\n    [string] $customerNameLong,\n    [string] $customerCode,\n    [string] $tier\n  )\n  write-log -message \"Debug level is $debug\";\n  write-log -message \"Building credential object\";\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  $secpass = $password | ConvertTo-SecureString -asplaintext -force;\n  $username = ($username -split \"\\\\\")[1]\n  write-log -message \"Using Domain Creds $($domainname)\\$($username)\"\n  $DomainCreds = New-Object System.Management.Automation.PsCredential(\"$($domainname)\\$($username)\",$secpass);\n\n  $FirstdomaincontrollerIP = (Test-Connection $domainname -count 1).ipv4address.ipaddresstostring\n\n  write-log -message  \"Connecting to the first responding DC $FirstdomaincontrollerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$FirstdomaincontrollerIP\")).hostname \n\n  write-log -message  \"Reconnecting to latest OS version Name $Dnsname\"\n\n  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $DomainCreds {\n    $allDCs = (Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }\n    ($allDCs | sort [version]OperatingSystemVErsion -Desc | select -first 1).IPv4Address\n  }\n\n  write-log -message  \"Reconnecting to latest OS version DC $LatestDomainControllerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$LatestDomainControllerIP\")).hostname \n\n  write-log -message \"Reconnecting to latest OS version Name $Dnsname\"\n  write-log -message \"Executing Files Content Generation.\";\n  write-log -message \"This will take a while.\";\n  write-log -message \"Using File Server $fsname\";\n\n    invoke-command -computername $Dnsname -credential $DomainCreds {\n\n      $fsname               = $args[0]\n      $username             = $args[1]\n      $password             = $args[2]\n      $domainname           = $args[3]\n      $tier                 = $args[4]\n      $customerNameLong     = $args[5]\n      $CustomerCode         = $args[6]\n      $AppLongCode          = $args[7]\n      $array = $domainname.Split(\".\")\n      $DomainPath = \"DC=$($array -join (\",DC=\"))\"\n      $jobname = \"Content $($Tier)-$($CustomerCode) $($AppLongCode) Generate\";\n      Get-ScheduledTask $jobname -ea:0 | stop-scheduledtask\n      Get-ScheduledTask $jobname -ea:0 | Unregister-scheduledtask -confirm:0\n      [ARRAY]$OUTPUT += [STRING]'start-transcript c:\\windows\\temp\\ContentApp.log'\n      [ARRAY]$OUTPUT += [STRING]'$Username = ' + '\"' + $username + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$password = ' + '\"' + $password + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$domainname = ' + '\"' + $domainname + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$fsname = ' + '\"' + $fsname + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$tier = ' + '\"' + $Tier + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$CustomerCode = ' + '\"' + $CustomerCode + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$customerNameLong = ' + '\"' + $customerNameLong + '\"' \n      [ARRAY]$OUTPUT += [STRING]'$DomainPath = ' + '\"' + $DomainPath + '\"' \n      [ARRAY]$OUTPUT += [STRING]'$AppLongCode = ' + '\"' + $AppLongCode + '\"' \n      [ARRAY]$OUTPUT += [STRING]'$secpassword = $password | ConvertTo-SecureString -asplaintext -force;'\n      [ARRAY]$OUTPUT += [STRING]'$DomainCreds = New-Object System.Management.Automation.PsCredential($Username,$secpassword);'\n      [ARRAY]$OUTPUT += [STRING]'write \"Content Indexing Starting\"'\n      [ARRAY]$OUTPUT += [STRING]'$Wavfiles = get-childitem -recurse \"c:\\*.wav\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Wav Files $($Wavfiles.count) Done, doing doc\"'\n      [ARRAY]$OUTPUT += [STRING]'$docfiles = get-childitem -recurse \"c:\\*.doc\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"doc Files $($docfiles.count) Done, doing jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'$jpgfiles = get-childitem -recurse \"c:\\*.jpg\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"JPG Files $($jpgfiles.count) Done, doing cab\"'\n      [ARRAY]$OUTPUT += [STRING]'$Cabfiles = get-childitem -recurse \"c:\\*.cab\" -ea:0 | select -first 20'\n      [ARRAY]$OUTPUT += [STRING]'write \"CAB Files $($Cabfiles.count) Done, doing zip\"'\n      [ARRAY]$OUTPUT += [STRING]'$zipfiles = get-childitem -recurse \"c:\\*.zip\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Zip Files $($zipfiles.count) Done, doing Txt\"'\n      [ARRAY]$OUTPUT += [STRING]'$txtfiles = get-childitem -recurse \"c:\\*.txt\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"TXT Files $($txtfiles.count) Done, doing AVI\"'\n      [ARRAY]$OUTPUT += [STRING]'$avifiles = get-childitem -recurse \"c:\\*.avi\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Content Indexing Completed, $($avifiles.count)\"'\n      [ARRAY]$OUTPUT += [STRING]'write \"Using Path OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"'\n      [ARRAY]$OUTPUT += [STRING]'Get-ADUser -Filter * -SearchBase \"OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"| Foreach-Object{'\n      [ARRAY]$OUTPUT += [STRING]'  $user = $_'\n      [ARRAY]$OUTPUT += [STRING]'  $sam = $_.SamAccountName'\n      [ARRAY]$OUTPUT += [STRING]'  write \"Working on $sam\"'\n      [ARRAY]$OUTPUT += [STRING]'  Set-ADuser -Identity $_ -HomeDrive \"H:\" -HomeDirectory \"\\\\$($fsname)\\$sam\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  $homeShare = new-item -path \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$sam\" -ItemType Directory -force'\n      [ARRAY]$OUTPUT += [STRING]'  $acl = Get-Acl $homeShare -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  $FileSystemRights = [System.Security.AccessControl.FileSystemRights]\"Modify\"'\n      [ARRAY]$OUTPUT += [STRING]'  $AccessControlType = [System.Security.AccessControl.AccessControlType]::Allow'\n      [ARRAY]$OUTPUT += [STRING]'  $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]\"ContainerInherit, ObjectInherit\"'\n      [ARRAY]$OUTPUT += [STRING]'  $PropagationFlags = [System.Security.AccessControl.PropagationFlags]\"InheritOnly\"'\n      [ARRAY]$OUTPUT += [STRING]'  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule ($User.SID, $FileSystemRights, $InheritanceFlags, $PropagationFlags, $AccessControlType)'\n      [ARRAY]$OUTPUT += [STRING]'  $acl.AddAccessRule($AccessRule)'\n      [ARRAY]$OUTPUT += [STRING]'  Set-Acl -Path $homeShare -AclObject $acl -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 3'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).wav\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $cabfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 10'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).cab\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 50'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).doc\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 19'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).zip\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).txt\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 30'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).avi\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'}'\n      [ARRAY]$OUTPUT += [STRING]''\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Finance\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"IT\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"HR\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Factory\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"RnD\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Management\"'\n      [ARRAY]$OUTPUT += [STRING]'foreach ($item in $array){'\n      [ARRAY]$OUTPUT += [STRING]'  copy-item -type \"Directory\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\"'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).wav\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  $count =0'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).doc\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Cabfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).cab\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).zip\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).txt\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).avi\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'}'\n      $scriptfile = \"C:\\windows\\temp\\Content-$($AppLongCode)-$($tier)-$($customerCode).ps1\"\n      $OUTPUT | OUT-FILE $scriptfile\n      $argumentList = \"-file $scriptfile\"\n      $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n      $SecurePassword = $password | ConvertTo-SecureString -AsPlainText -Force\n      $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User $username -Password $password\n      sleep 5\n      Get-ScheduledTask $jobname | start-scheduledtask\n      sleep 60\n      Get-ScheduledTask $jobname | start-scheduledtask\n    } -args $FSname,$username,$password,$domainname,$tier,$customerNameLong,$CustomerCode,$AppLongCode\n  $counter = 0\n\n  write-log -message \"Tailing the log from the remote session to capture success\"\n\n  $status = \"Success\"\n \n  write-log -message \"All Done here, full of File Content\";\n  write-log -message \"Please play with me.\";\n\n  $resultobject =@{\n    Result = $status\n  };\n  return $resultobject\n};\n\n\n\n$vfilers = REST-Query-FileServer -PEClusterIP $PEClusterIP -clusername $PEadmin -clpassword $PEpass\n$vfiler =  $vfilers.entities | where {$_.name -eq $VFilername}\n\nwrite-log -message \"Working with VFiler UUID: $($VFiler.uuid)\"\n\nREST-Add-FileServerShares -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -vfiler $vfiler -windowsAdDomainName $windowsAdDomainName -tier $tier -CustomerCode $CustomerCode\n\n\n#write-log -message \"Generating File Content:$DummyADContent\"\n\n#if ($DummyADContent -eq 1){\n  #PSR-Generate-FilesContent -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -username $serviceuser -password $servicePassword -tier $tier -customercode $CustomerCode -fsname $vfiler.name -domainname $WindowsAdDomainName -customerNameLong $customerNameLong\n#}\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Create Dummy Content","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n$AppshortCode               = \"@@{AC}@@\"\n$AppLongCode                = \"@@{AppLongCode}@@\"\n$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$serviceuser                = \"@@{Service_Account.username}@@\"\n$servicePassword            = \"@@{Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Add-FileServerShares {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [object] $vfiler,\n    [string] $nodecount = 3,\n    [String] $WindowsAdDomainName,\n    [string] $tier,\n    [string] $CustomerCode\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Adding Fileserver Shares\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/$($vfiler.uuid)\/shares\/?force=true\"\n\n  write-log -message \"Using URL $URL\"\n\n$Userhomejson1= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Userhome\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": true,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"User Home Data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"HOMES\"\n}\n\"@\n$Userhomejson2= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Userhome\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": true,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"User Home Data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"GENERAL\"\n}\n\"@\n$Departmentjson= @\"\n{\n  \"name\": \"$($CustomerCode)-$($Tier)-Department\",\n  \"fileServerUuid\": \"$($vfiler.uuid)\",\n  \"enablePreviousVersion\": false,\n  \"windowsAdDomainName\": \"$($WindowsAdDomainName)\",\n  \"description\": \"Department data\",\n  \"maxSizeGiB\": 0,\n  \"protocolType\": \"SMB\",\n  \"secondaryProtocolType\": \"NONE\",\n  \"sharePath\": \"\",\n  \"isNestedShare\": false,\n  \"enableAccessBasedEnumeration\": true,\n  \"shareType\": \"GENERAL\"\n}\n\"@\n\n  if ($nodecount -le 2){\n    $Userhomejson = $Userhomejson2\n  } else {\n    $Userhomejson = $Userhomejson1\n  }\n  $shares = REST-Query-Shares -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername\n  [array]$Delete += $shares.entities | where {$_.name -match \"$($CustomerCode)-$($Tier)\"}\n  if ($delete){\n\n    write-log -message \"We found $($delete.count) shares to clean first.\"\n\n    foreach ($share in $delete){\n      sleep 20  \n      write-log -message \"Deleting $($share.uuid)\"\n\n      REST-Delete-Share -PEClusterIP $PEClusterIP -clpassword $clpassword -clusername $clusername -vfilerUUID $vfiler.uuid -shareUUID $share.uuid\n      sleep 60\n    }\n  }\n  try{\n\n    write-log -message \"Creating Userhome\"\n      \n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Userhomejson -ContentType 'application\/json' -headers $headers;\n    sleep 40\n  } catch {\n\n    write-log -message \"Creating Userhome again\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Userhomejson -ContentType 'application\/json' -headers $headers;\n    sleep 40\n\n  }\n  try{\n    write-log -message \"Creating Department\"\n\n    sleep 40\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Departmentjson -ContentType 'application\/json' -headers $headers;     \n  } catch {\n\n    write-log -message \"Creating Department again\"\n\n    sleep 40\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $Departmentjson -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"Department Created\"\n  }\n    \n  write-log -message \"All Shares Created\"\n\n\n  Return $task\n} \n\nFunction REST-Query-FileServer {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"File Server Query\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n  } catch {\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  Return $task\n} \n\nFunction REST-Query-Shares {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"File Share Query\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/shares\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n  } catch {\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"get\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  Return $task\n} \n\nFunction REST-Delete-Share {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $vfilerUUID,\n    [string] $shareUUID\n  )\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Delete Share $($shareUUID) on vFiler $($vfilerUUID)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vfilers\/$($vfilerUUID)\/shares\/$($shareUUID)?force=true\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n  } catch {\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"DELETE\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n  }\n\n  Return $task\n} \n\nFunction PSR-Generate-FilesContent {\n  param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $username,\n    [string] $password,\n    [string] $domainname,\n    [string] $fsname,\n    [string] $customerNameLong,\n    [string] $customerCode,\n    [string] $tier,\n    [string] $AppshortCode,\n    [string] $AppLongCode   \n  )\n  write-log -message \"Debug level is $debug\";\n  write-log -message \"Building credential object\";\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  $secpass = $password | ConvertTo-SecureString -asplaintext -force;\n  $username = ($username -split \"\\\\\")[1]\n  write-log -message \"Using Domain Creds $($domainname)\\$($username)\"\n  $DomainCreds = New-Object System.Management.Automation.PsCredential(\"$($domainname)\\$($username)\",$secpass);\n\n  $FirstdomaincontrollerIP = (Test-Connection $domainname -count 1).ipv4address.ipaddresstostring\n\n  write-log -message  \"Connecting to the first responding DC $FirstdomaincontrollerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$FirstdomaincontrollerIP\")).hostname \n\n  write-log -message  \"Reconnecting to latest OS version Name $Dnsname\"\n\n  $LatestDomainControllerIP = invoke-command -computername $Dnsname -credential $DomainCreds {\n    $allDCs = (Get-ADForest).Domains | %{ Get-ADDomainController -Filter * -Server $_ }\n    ($allDCs | sort [version]OperatingSystemVErsion -Desc | select -first 1).IPv4Address\n  }\n\n  write-log -message  \"Reconnecting to latest OS version DC $LatestDomainControllerIP\"\n\n  $Dnsname = ([System.Net.Dns]::GetHostbyAddress(\"$LatestDomainControllerIP\")).hostname \n\n  write-log -message \"Reconnecting to latest OS version Name $Dnsname\"\n  write-log -message \"Executing Files Content Generation.\";\n  write-log -message \"This will take a while.\";\n  write-log -message \"Using File Server $fsname\";\n\n    invoke-command -computername $Dnsname -credential $DomainCreds {\n\n      $fsname               = $args[0]\n      $username             = $args[1]\n      $password             = $args[2]\n      $domainname           = $args[3]\n      $tier                 = $args[4]\n      $customerNameLong     = $args[5]\n      $CustomerCode         = $args[6]\n      $AppshortCode         = $args[7]\n      $AppLongCode          = $args[8]\n      $array = $domainname.Split(\".\")\n      $DomainPath = \"DC=$($array -join (\",DC=\"))\"\n      $jobname = \"Content $($Tier)-$($CustomerCode) $($AppLongCode) Generate\";\n      Get-ScheduledTask $jobname -ea:0 | stop-scheduledtask\n      Get-ScheduledTask $jobname -ea:0 | Unregister-scheduledtask -confirm:0\n      [ARRAY]$OUTPUT += [STRING]'start-transcript c:\\windows\\temp\\ContentApp.log'\n      [ARRAY]$OUTPUT += [STRING]'$Username = ' + '\"' + $username + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$password = ' + '\"' + $password + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$domainname = ' + '\"' + $domainname + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$fsname = ' + '\"' + $fsname + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$tier = ' + '\"' + $Tier + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$CustomerCode = ' + '\"' + $CustomerCode + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$customerNameLong = ' + '\"' + $customerNameLong + '\"' \n      [ARRAY]$OUTPUT += [STRING]'$DomainPath = ' + '\"' + $DomainPath + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$AppLongCode = ' + '\"' + $AppLongCode + '\"'\n      [ARRAY]$OUTPUT += [STRING]'$secpassword = $password | ConvertTo-SecureString -asplaintext -force;'\n      [ARRAY]$OUTPUT += [STRING]'$DomainCreds = New-Object System.Management.Automation.PsCredential($Username,$secpassword);'\n      [ARRAY]$OUTPUT += [STRING]'write \"Content Indexing Starting\"'\n      [ARRAY]$OUTPUT += [STRING]'$Wavfiles = get-childitem -recurse \"c:\\*.wav\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Wav Files $($Wavfiles.count) Done, doing doc\"'\n      [ARRAY]$OUTPUT += [STRING]'$docfiles = get-childitem -recurse \"c:\\*.doc\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"doc Files $($docfiles.count) Done, doing jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'$jpgfiles = get-childitem -recurse \"c:\\*.jpg\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"JPG Files $($jpgfiles.count) Done, doing cab\"'\n      [ARRAY]$OUTPUT += [STRING]'$Cabfiles = get-childitem -recurse \"c:\\*.cab\" -ea:0 | select -first 20'\n      [ARRAY]$OUTPUT += [STRING]'write \"CAB Files $($Cabfiles.count) Done, doing zip\"'\n      [ARRAY]$OUTPUT += [STRING]'$zipfiles = get-childitem -recurse \"c:\\*.zip\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Zip Files $($zipfiles.count) Done, doing Txt\"'\n      [ARRAY]$OUTPUT += [STRING]'$txtfiles = get-childitem -recurse \"c:\\*.txt\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"TXT Files $($txtfiles.count) Done, doing AVI\"'\n      [ARRAY]$OUTPUT += [STRING]'$avifiles = get-childitem -recurse \"c:\\*.avi\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'write \"Content Indexing Completed, $($avifiles.count)\"'\n      [ARRAY]$OUTPUT += [STRING]'write \"Using Path OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"'\n      [ARRAY]$OUTPUT += [STRING]'Get-ADUser -Filter * -SearchBase \"OU=$($tier),OU=$($customerNameLong),OU=$($AppLongCode),$($DomainPath)\"| Foreach-Object{'\n      [ARRAY]$OUTPUT += [STRING]'  $user = $_'\n      [ARRAY]$OUTPUT += [STRING]'  $sam = $_.SamAccountName'\n      [ARRAY]$OUTPUT += [STRING]'  write \"Working on $sam\"'\n      [ARRAY]$OUTPUT += [STRING]'  Set-ADuser -Identity $_ -HomeDrive \"H:\" -HomeDirectory \"\\\\$($fsname)\\$sam\" -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  $homeShare = new-item -path \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$sam\" -ItemType Directory -force'\n      [ARRAY]$OUTPUT += [STRING]'  $acl = Get-Acl $homeShare -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  $FileSystemRights = [System.Security.AccessControl.FileSystemRights]\"Modify\"'\n      [ARRAY]$OUTPUT += [STRING]'  $AccessControlType = [System.Security.AccessControl.AccessControlType]::Allow'\n      [ARRAY]$OUTPUT += [STRING]'  $InheritanceFlags = [System.Security.AccessControl.InheritanceFlags]\"ContainerInherit, ObjectInherit\"'\n      [ARRAY]$OUTPUT += [STRING]'  $PropagationFlags = [System.Security.AccessControl.PropagationFlags]\"InheritOnly\"'\n      [ARRAY]$OUTPUT += [STRING]'  $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule ($User.SID, $FileSystemRights, $InheritanceFlags, $PropagationFlags, $AccessControlType)'\n      [ARRAY]$OUTPUT += [STRING]'  $acl.AddAccessRule($AccessRule)'\n      [ARRAY]$OUTPUT += [STRING]'  Set-Acl -Path $homeShare -AclObject $acl -ea:0'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 3'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).wav\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $cabfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 10'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).cab\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 50'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).doc\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 19'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).zip\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 20'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).txt\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$number =get-random -max 30'\n      [ARRAY]$OUTPUT += [STRING]'    [int]$count = 0'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      [int]$count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Userhome\\$($sam)\\$($targetfilename).avi\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ([int]$count -ge [int]$number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'}'\n      [ARRAY]$OUTPUT += [STRING]''\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Finance\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"IT\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"HR\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Factory\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"RnD\"'\n      [ARRAY]$OUTPUT += [STRING]'[array]$array += \"Management\"'\n      [ARRAY]$OUTPUT += [STRING]'foreach ($item in $array){'\n      [ARRAY]$OUTPUT += [STRING]'  copy-item -type \"Directory\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\"'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Wavfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).wav\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  $count =0'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $docfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).doc\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $jpgfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).jpg\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $Cabfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).cab\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $zipfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      write $targetfilename'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).zip\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $txtfiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).txt\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'  foreach ($file in $avifiles){'\n      [ARRAY]$OUTPUT += [STRING]'    $count =0'\n      [ARRAY]$OUTPUT += [STRING]'    $number =get-random -max 100'\n      [ARRAY]$OUTPUT += [STRING]'    do {'\n      [ARRAY]$OUTPUT += [STRING]'      $count++'\n      [ARRAY]$OUTPUT += [STRING]'      $targetfilename = Get-Random'\n      [ARRAY]$OUTPUT += [STRING]'      copy-item \"$($file.fullname)\" \"\\\\$($fsname)\\$($CustomerCode)-$($Tier)-Department\\$item\\$($targetfilename).avi\"'\n      [ARRAY]$OUTPUT += [STRING]'    } until ($count -ge $number)'\n      [ARRAY]$OUTPUT += [STRING]'  }'\n      [ARRAY]$OUTPUT += [STRING]'}'\n\n      $scriptfile = \"C:\\windows\\temp\\Content-$($AppLongCode)-$($tier)-$($customerCode).ps1\"\n      $OUTPUT | OUT-FILE $scriptfile\n      $argumentList = \"-file $scriptfile\"\n      $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n      $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n      $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n      $SecurePassword = $password | ConvertTo-SecureString -AsPlainText -Force\n      $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User $username -Password $password\n      sleep 5\n      Get-ScheduledTask $jobname | start-scheduledtask\n      sleep 60\n      Get-ScheduledTask $jobname | start-scheduledtask\n    } -args $FSname,$username,$password,$domainname,$tier,$customerNameLong,$CustomerCode,$AppshortCode,$AppLongCode\n  $counter = 0\n\n  write-log -message \"Tailing the log from the remote session to capture success\"\n\n  $status = \"Success\"\n \n  write-log -message \"All Done here, full of File Content\";\n  write-log -message \"Please play with me.\";\n\n  $resultobject =@{\n    Result = $status\n  };\n  return $resultobject\n};\n\n\n\n$vfilers = REST-Query-FileServer -PEClusterIP $PEClusterIP -clusername $PEadmin -clpassword $PEpass\n$vfiler =  $vfilers.entities | where {$_.name -eq $VFilername}\n\nwrite-log -message \"Working with VFiler UUID: $($VFiler.uuid)\"\n\n#REST-Add-FileServerShares -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -vfiler $vfiler -windowsAdDomainName $windowsAdDomainName -tier $tier -CustomerCode $CustomerCode\n\n\nwrite-log -message \"Generating File Content:$DummyADContent\"\n\nif ($DummyADContent -eq 1){\n  PSR-Generate-FilesContent -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $peadmin -username $serviceuser -password $servicePassword -tier $tier -customercode $CustomerCode -fsname $vfiler.name -domainname $WindowsAdDomainName -customerNameLong $customerNameLong -AppshortCode $AppshortCode -AppLongCode $AppLongCode\n}\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"IIS Install","state":"ACTIVE","attrs":{"exit_status":[],"script":"\n$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n$trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).date\n$principal = New-ScheduledTaskPrincipal -UserId \"$env:USERDOMAIN\\$env:USERNAME\" -LogonType \"S4U\" -RunLevel Highest\n$script = \"C:\\windows\\temp\\IIS.ps1\"\nwrite 'start-transcript c:\\windows\\temp\\iis.log' | out-file $script\nwrite 'Get-NetAdapter | Get-NetAdapterBinding | Disable-NetAdapterBinding -ComponentID ms_tcpip6 -PassThru -ea:0' | out-file $script -append\nwrite 'Install-WindowsFeature -name Web-Server -IncludeManagementTools' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServer' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-CommonHttpFeatures' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpErrors' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpRedirect' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationDevelopment' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -online -FeatureName NetFx4Extended-ASPNET45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-NetFxExtensibility45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HealthAndDiagnostics' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpLogging' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-LoggingLibraries' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestMonitor' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpTracing' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Security' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-RequestFiltering' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Performance' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerManagementTools' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-IIS6ManagementCompatibility' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-Metabase' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-BasicAuthentication' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WindowsAuthentication' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-StaticContent' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-DefaultDocument' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebSockets' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ApplicationInit' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIExtensions' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ISAPIFilter' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-HttpCompressionStatic' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45' | out-file $script -append\nwrite 'Enable-WindowsOptionalFeature -Online -FeatureName IIS-ASP' | out-file $script -append\nwrite '' | out-file $script -append\nwrite 'Write \"Webserver installed\"' | out-file $script -append\n$jobname = \"Setup IIS\";\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$script\"\n$task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n$task | start-scheduledtask\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n} Until ($state.state -eq 3)\ntry {\n  get-content 'c:\\windows\\temp\\iis.log'\n} catch {\n  $task | unregister-scheduledtask -confirm:0\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -Principal $principal -Force\n  $task | start-scheduledtask\n}\ndo {\n  write \"Waiting for $jobname\"\n  sleep 60\n  $state = (Get-ScheduledTask | where {$_.taskname -eq \"$jobname\"})\n} Until ($state.state -eq 3)","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Change CDROM drive to Z","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n\n# No variables required.\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nwrite-log -message \"Change CD Drive to Z\"\n\n$cd = $NULL\n$cd = Get-WMIObject -Class Win32_CDROMDrive -ComputerName $env:COMPUTERNAME -ErrorAction Stop\nSet-WmiInstance -InputObject ( Get-WmiObject -Class Win32_volume -Filter \"DriveLetter = '$($cd.drive)'\" ) -Arguments @{DriveLetter='Z:'}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"SetVar ERA IP","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$WindowsDomainUser          = \"@@{Domain_Service_Account.username}@@\"\n$WindowsDomainPass          = \"@@{Domain_Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n\nFunction REST-ERA-GetClusters {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP):8443\/era\/v0.8\/clusters\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nWrite-log -message \"Query All VMs\"\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadmin\n\nWrite-log -message \"Filter ERA VM\"\n\n$ERAIP = ($vms.entities | where {$_.VMName -match \"^ERA\"}).ipaddresses | select -first 1\n\nWrite-log -message \"Query ERA Cluster\"\n\n$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nif ($ERACluster){\n\n  write-log -message \"We detected $($ERACluster.id) ERA Cluster, storing the IP as CALM variable.\"\n\n  write \"ERAIP=$($ERAIP)\"\n\n} else {\n\n  write-log -message \"We failed boss, is this a 1CD based block?\" -sev \"WARN\"\n\n}\n","eval_variables":["ERAIP"],"eval_scope":"local","script_type":"npsscript","type":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigMGT"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Workspace App","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$ServiceAccount         = \"@@{Service_Account.username}@@\"        \n$servicePassword        = \"@@{Service_Account.secret}@@\"\n$tier                   = \"@@{Tier}@@\"\n$CustomerCode           = \"@@{CustomerName}@@\"\n$vmname                 = $env:computername\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Unmount-CDRom {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid,\n    [object] $cdrom\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuid\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": true\n  }]\n}\n\"@ \n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM Unmounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n}\n\nFunction REST-Get-Image-Sizes {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v0.8\/images?includeVmDiskSizes=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Mount-CDRom-Image {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $VMuuid,\n    [object] $cdrom,\n    [object] $Image\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Mounting CD for VM with ID $VMuuid\"\n  write-log -message \"Using ISO $($Image.Name)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMuuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": false,\n    \"vm_disk_clone\": {\n      \"disk_address\": {\n        \"vmdisk_uuid\": \"$($Image.vmDiskId)\"\n      },\n      \"minimum_size\": \"$($Image.vmDiskSize)\"\n    }\n  }]\n}\n\"@\n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM mounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction PSR-Install-Citrix {\n  param (\n    [string]$serviceaccount,\n    [string]$servicepassword,\n    [string]$WindowsDomain,\n    [string]$tier,\n    [string]$CustomerCode\n  )\n$tier                \n$CustomerCode        \n  write-log -message \"Creating script\";\n  [ARRAY]$OUTPUT += [STRING]'$tier = \"' + $tier + '\"'\n  [ARRAY]$OUTPUT += [STRING]'$CustomerCode = \"' + $CustomerCode + '\"'\n  [ARRAY]$OUTPUT += [STRING]'$WindowsDomain = \"' + $WindowsDomain + '\"'\n  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid'\n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript c:\\windows\\temp\\CitrixNTNX.log'\n  $OUTPUT += [STRING]'& \"$($driveletter)\\Citrix Receiver and Plug-ins\\Windows\\Receiver\\CitrixWorkspaceApp.exe\" \/silent STORE0=SF-$($CustomerCode)-$($tier);https:\/\/SF-$($CustomerCode)-$($tier).$($WindowsDomain)#SF-$($CustomerCode)-$($tier);On;Store'\n  write-log -message \"Creating Task\";\n  $username = ($serviceaccount -split \"\\\\\")[1]\n  $OUTPUT | OUT-FILE C:\\windows\\temp\\Citrix.ps1\n  $argumentList = \"-file C:\\Windows\\Temp\\Citrix.ps1\"\n  $jobname = \"PowerShell Citrix Install\";\n  $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  $SecurePassword = $servicepassword | ConvertTo-SecureString -AsPlainText -Force\n  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePassword\n  $CredPassword = $Credentials.GetNetworkCredential().Password \n  write \"Creating Task with User $($WindowsDomain)\\$($username)\"\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User \"$($WindowsDomain)\\$($username)\" -Password $CredPassword\n  sleep 10\n  Get-ScheduledTask $jobname -ea:0 | start-scheduledtask\n  \n};\n\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\n[array]$vm = $VMS.entities | where {$_.vmname -eq $vmname}\n\nif ($vm.count -gt 1){\n    write-log \"VMs are not clean, same machine exists twice\" -sev \"ERROR\"\n    break\n}\n\n\nwrite-log -message \"Getting VM Disk Detail for $($vm.uuid) using $VMIP\"\n\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n\nwrite-log -message \"Finding CDROM\"\n  \n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"CDROM is not Empty, eject captain.\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\nif ($cdrom.is_empty -eq $false){\n\n  write-log -message \"Unmounting Whatever is in there now\"\n\n  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n}\n\n$images = REST-Get-Image-Sizes -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -silent 1\n$imageobj = $images.entities | where {$_.name -eq $CitrixImageName}\n\nwrite-log -message \"Mounting Image $($imageobj.vmdiskid)\"\n\nREST-Mount-CDRom-Image -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -VMuuid $vm.uuid -cdrom $cdrom -image $imageobj\n\nwrite-log -message \"Installing Citrix Application Suite\"\n\nPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomain -tier $tier -CustomerCode $CustomerCode\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"03aaea22_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"9ed4ee76_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure MGT Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"d69d1f47_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9ed117f4_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d69d1f47_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"ConfigXAS"}],"name":"Configure XAS Part 2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure XAS Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install Citrix Roles"},{"kind":"app_task","name":"Wait for Install and Reboot"},{"kind":"app_task","name":"Download and Run Optimizer"},{"kind":"app_task","name":"Snap Me"}],"name":"9ed4ee76_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Install Citrix Roles"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Wait for Install and Reboot"}},{"from_task_reference":{"kind":"app_task","name":"Wait for Install and Reboot"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Download and Run Optimizer"}},{"from_task_reference":{"kind":"app_task","name":"Download and Run Optimizer"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Snap Me"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install Citrix Roles","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$CitrixImageName        = \"@@{CitrixImageName}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$ServiceAccount         = \"@@{Service_Account.username}@@\"        \n$servicePassword        = \"@@{Service_Account.secret}@@\"\n$brokername             = \"@@{XBS.BrokerName[0]}@@.$($windowsdomain)\"\n\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\nfunction Set-TargetResource {\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)] [ValidateNotNullOrEmpty()]\n        [System.String] $Name,\n        \n        [Parameter()] [ValidateSet('Present','Absent')]\n        [System.String] $Ensure = 'Present'\n    )\n    process {\n        $listOfDDCs = GetRegistryValue -Key 'HKLM:\\SOFTWARE\\Citrix\\VirtualDesktopAgent' -Name 'ListOfDDCs';\n        $ddcs = New-Object -TypeName 'System.Collections.ArrayList' -ArgumentList @();\n        if (-not [System.String]::IsNullOrEmpty($listOfDDCs)) {\n            $ddcs.AddRange($listOfDDCs.Split(' '));\n        }\n\n        ## Ensure that the controller is in the list\n        if ($Ensure -eq 'Present') {\n            Write-Verbose ($localizedData.AddingDeliveryController -f $Name);\n            [ref] $null = $ddcs.Add($Name);\n        }\n        ## Ensure that the controller is NOT in the list\n        if ($Ensure -eq 'Absent') {\n            Write-Verbose ($localizedData.RemovingDeliveryController -f $Name);    \n            [ref] $null = $ddcs.Remove($Name);\n        }\n        $listOfDDCs = [System.String]::Join(' ', $ddcs.ToArray());\n        Write-Verbose ($localizedData.SettingRegSZValue -f 'ListOfDDCs', $listOfDDCs);\n        Set-ItemProperty -Path 'HKLM:\\SOFTWARE\\Citrix\\VirtualDesktopAgent' -Name 'ListOfDDCs' -Value $listOfDDCs;\n        Write-Verbose ($localizedData.RestartingService -f 'BrokerAgent');\n        Restart-Service -Name 'BrokerAgent' -Force;\n    } #end process\n} #end Set-TargetResource\nFunction REST-Unmount-CDRom {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid,\n    [object] $cdrom\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Unmounting CD UUID $($cdrom.disk_address.vmdisk_uuid) for VM with UUID $uuid\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": true\n  }]\n}\n\"@ \n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM Unmounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n}\n\nFunction REST-Get-Image-Sizes {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $silent =0\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n  if ($silent -ne 1){\n\n    write-log -message \"Executing Images List Query With Size\"\n\n  }\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v0.8\/images?includeVmDiskSizes=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction REST-Mount-CDRom-Image {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $VMuuid,\n    [object] $cdrom,\n    [object] $Image\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Mounting CD for VM with ID $VMuuid\"\n  write-log -message \"Using ISO $($Image.Name)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($VMuuid)\/disks\/update\"\n\n  write-log -message \"Using URL $URL\"\n\n$Payload= @\"\n{\n  \"vm_disks\": [{\n    \"disk_address\": {\n      \"vmdisk_uuid\": \"$($cdrom.disk_address.vmdisk_uuid)\",\n      \"device_index\": $($cdrom.disk_address.device_index),\n      \"device_bus\": \"$($cdrom.disk_address.device_bus)\"\n    },\n    \"flash_mode_enabled\": false,\n    \"is_cdrom\": true,\n    \"is_empty\": false,\n    \"vm_disk_clone\": {\n      \"disk_address\": {\n        \"vmdisk_uuid\": \"$($Image.vmDiskId)\"\n      },\n      \"minimum_size\": \"$($Image.vmDiskSize)\"\n    }\n  }]\n}\n\"@\n  if ($debug -ge 2){\n    $Payload\n  }\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n\n    write-log -message \"CDROM mounted\" \n\n  } catch {\n    sleep 10\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"PUT\" -body $Payload -ContentType 'application\/json' -headers $headers;\n  }\n\n  Return $task\n} \n\nFunction PSR-Install-Citrix {\n  param (\n    [string]$serviceaccount,\n    [string]$servicepassword,\n    [string]$WindowsDomain,\n    [string]$brokername\n  )\n\n  write-log -message \"Creating script\";\n  write-log -message \"Using broker @@{XBS.BrokerName[0]}@@.$($windowsdomain)\"\n\n  [ARRAY]$OUTPUT += [STRING]'$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid'\n  [ARRAY]$OUTPUT += [STRING]'Start-Transcript c:\\windows\\temp\\CitrixNTNX.log'\n  [ARRAY]$OUTPUT += [STRING]'& \"$($driveletter)\\x64\\XenDesktop Setup\\XenDesktopVDASetup.exe\" \/components VDA \/noreboot \/quiet \/disableexperiencemetrics \/CONTROLLERS \"@@{XBS.BrokerName[0]}@@.@@{WindowsDomain}@@\" \/ENABLE_HDX_PORTS \/ENABLE_REAL_TIME_TRANSPORT \/ENABLE_FRAMEHAWK_PORT \/ENABLE_HDX_UDP_PORTS \/ENABLE_REMOTE_ASSISTANCE \/OPTIMIZE'\n\n  write-log -message \"Creating Task\";\n  $username = ($serviceaccount -split \"\\\\\")[1]\n  $OUTPUT | OUT-FILE C:\\windows\\temp\\Citrix.ps1\n  $argumentList = \"-file C:\\Windows\\Temp\\Citrix.ps1\"\n  $jobname = \"PowerShell Citrix Install\";\n  $action = New-ScheduledTaskAction -Execute \"$pshome\\powershell.exe\" -Argument  \"$argumentList\";\n  $trigger =New-ScheduledTaskTrigger -Once -At (Get-Date).Date\n  $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable -DontStopOnIdleEnd;\n  $SecurePassword = $servicepassword | ConvertTo-SecureString -AsPlainText -Force\n  $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $serviceaccount, $SecurePassword\n  $CredPassword = $Credentials.GetNetworkCredential().Password \n  write \"Creating Task with User $($WindowsDomain)\\$($username)\"\n  $task = Register-ScheduledTask -TaskName $jobname -Action $action -Trigger $trigger -Settings $settings -runlevel \"Highest\" -User \"$($WindowsDomain)\\$($username)\" -Password $CredPassword\n  # \n  Get-ScheduledTask $jobname | start-scheduledtask\n  \n  do {\n    sleep 40\n    $count++\n    $state = (Get-ScheduledTask $jobname).state\n    write-log \"Task is $state\"\n  } until ($Count -ge 20 -or $state -eq \"Running\")\n  $status = \"Success\"\n\n  write-log -message \"All Done here, Citrix Done\";\n  get-content c:\\windows\\temp\\CitrixNTNX.log\n  $resultobject =@{\n    Result = $status\n  };\n  return $resultobject\n};\n\nwrite-log -message \"Creating VDA Selfreg solution\"\n\nwrite 'SET _prefix=%username:~0,3%' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\VDAreg.cmd\" -Encoding ASCII\nwrite 'IF %_prefix%==svc powershell.exe -file c:\\windows\\temp\\VDAreg.ps1' | out-file \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\VDAreg.cmd\" -Encoding ASCII -append\n[array]$output += 'set-itemproperty -path \"HKLM:\\SOFTWARE\\Citrix\\VirtualDesktopAgent\\\" -name \"ListOfDDCs\" -Value \"'  + $brokername + '\"'\n[array]$output += 'restart-service BrokerAgent -force'\n$output | out-file c:\\windows\\temp\\VDAreg.ps1 -Encoding ASCII\n\nwrite-log -message \"Installing Citrix Application Suite\"\n\n$driveletter = (Get-CimInstance Win32_LogicalDisk | ?{ $_.DriveType -eq 5} | select DeviceID).deviceid\nget-item \"$($driveletter)\\x64\\Citrix Desktop Delivery Controller\\*powershell*.msi\" | % {msiexec \/i $_.fullname \/qn;sleep 15}\nsleep 60\n\nPSR-Install-Citrix -serviceaccount $($serviceaccount) -servicepassword $servicepassword -WindowsDomain $WindowsDomain\n\nsleep 200\n\n\n\nwrite-log -message \"Shutdown for clean snap\"\n\nShutdown -r -t 10\n#write-log -message \"Ejecting Drive\"\n\n#$VMdetail = REST-Get-VM-Detail -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid\n#$CDrom = $VMdetail.vm_disk_info | where {$_.is_cdrom -eq $true}\n#if ($cdrom.is_empty -eq $false){\n#  \n#  write-log -message \"Unmounting Frame Agent\"\n#  \n#  REST-Unmount-CDRom -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -uuid $vm.uuid -cdrom $cdrom\n#}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Wait for Install and Reboot","state":"ACTIVE","attrs":{"type":"","interval_secs":100},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Download and Run Optimizer","state":"ACTIVE","attrs":{"exit_status":[],"script":"$PackageURL                 = \"@@{CitrixOptimizerPackageURL}@@\"\n$OSChoise                   = \"@@{WindowsEdition}@@\"\n\n### SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \nwrite-log -message \"Disable Shutdown Tracker\"\n\nif ( -Not (Test-Path 'registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Reliability')){\n  New-Item -Path 'registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT' -Name Reliability -Force\n}\nSet-ItemProperty -Path 'registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Reliability' -Name ShutdownReasonOn -Value 0\n\nwrite-log -message \"Install Citrix Optimizer\"\n\n$PkgDir = \"C:\\CTXOptimizer\"\n\nmkdir $PkgDir\n\nwrite \"Downloading Packages\"\nwrite \"Using URL $PackageURL\"\n\n$filename = $PackageURL -split \"\/\" | select -last 1\n$output = \"$($PkgDir)\\$($filename)\"\n\n$count = 0\ndo {\n  $count ++\n  try {\n    $wc = New-Object net.webclient\n    $wc.Downloadfile($PackageURL, $output)\n    $failed = 0\n  } catch {\n    sleep 15\n    $failed = 1\n  }\n} until ($count -ge 4 -or $failed -eq 0)\n\nExpand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n\nif ($OSChoise -match \"2019\"){\n  $template = \"$($PkgDir)\\Templates\\Citrix_Windows_Server_2019_1809.xml\" \n} elseif ($OSChoise -match \"2016\"){\n  $template = \"$($PkgDir)\\Templates\\Citrix_Windows_Server_2016_1607.xml\" \n} elseif ($OSChoise -match \"10\"){  \n  $template = \"$($PkgDir)\\Templates\\Citrix_Windows_10_1903.xml\"\n}\n\n& \"$($PkgDir)\\CtxOptimizerEngine.ps1\" -Source $template -Mode Execute\n\nshutdown -s -t 300","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigXAS"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Snap Me","state":"ACTIVE","attrs":{"exit_status":[],"script":"$AppshortCode                                          = \"@@{AC}@@\"\n$AppLongCode                                           = \"@@{AppLongCode}@@\"\n$customercode                                          = \"@@{CustomerName}@@\"\n$customerNameLong                                      = \"@@{CustomerNameLong}@@\"\n$tier                                                  = \"@@{Tier}@@\"\n$WindowsDomain                                         = \"@@{WindowsDomain}@@\"\n$target                                                = \"$($AppshortCode)-$($tier)-$($CustomerCode)-XAS0\"\n$PEAdmin                                               = \"@@{PC_CRED.username}@@\"\n$PEPass                                                = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP                                           = \"@@{PEIP}@@\"\n\n# SSL Ignore\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n## Functions\n\nFunction write-log {\n  <#\n   .Synopsis\n   Write logs for debugging purposes\n   \n   .Description\n   This function writes logs based on the message including a time stamp for debugging purposes.\n  #>\n  param (\n  $message,\n  $sev = \"INFO\"\n  )\n  if ($sev -eq \"INFO\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | INFO | $message\"\n  } elseif ($sev -eq \"WARN\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | WARN | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n  write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n  write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Create-SnapShot {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $vmId,\n    [string] $snapname = \"CitrixBase\"\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing SnapShot Create on $($vm.vmid)\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/api\/nutanix\/v0.8\/snapshots\"\n\n  $json = @\"\n{\n  \"snapshotSpecs\": [{\n    \"vmUuid\": \"$($vmId)\",\n    \"snapshotName\": \"$($snapname)\"\n  }]\n}\n\"@\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }catch{\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    sleep 10\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $json -ContentType 'application\/json' -headers $headers;\n  }\n  Return $task\n} \n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n### Logic\n\n$vms = rest-get-vms -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\nwrite-log -message \"Searching for $target\"\n\n$vm = $vms.entities | where {$_.vmname -eq \"$target\"}\n\nwrite-log -message \"Using VM ID $($vm.vmid)\"\n$Guid = (new-guid).guid\n$snap = REST-Create-SnapShot -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin -vmId $vm.vmid -snapname $Guid\nwrite \"SnapshotName=$($Guid)\"","eval_variables":["SnapshotName"],"eval_scope":"local","script_type":"npsscript","type":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"03aaea22_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"9ed4ee76_dag_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure XAS Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"d69d1f47_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9ed117f4_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d69d1f47_dag_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"ConfigSQL1"}],"name":"Configure SQL1 Part 2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure SQL1 Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install 6 Hix Empty DB"}],"name":"9ed4ee76_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"ConfigSQL1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install 6 Hix Empty DB","state":"ACTIVE","attrs":{"exit_status":[],"script":"### Variables\n$WindowsDomain    = \"@@{WindowsDomain}@@\"\n$AppshortCode     = \"@@{AC}@@\"\n$AppLongCode      = \"@@{AppLongCode}@@\"\n$Tier             = \"@@{Tier}@@\"\n$customercode     = \"@@{CustomerName}@@\"\n$HixEmptyDBURL    = \"@@{HixEmptyDBURL}@@\"\n$HixDBServer      = \"$($AppshortCode)-$($tier)-$($CustomerCode)-SQL1\"           \n$HixTargetDBName  = \"$($AppLongCode)-$($tier)-$($CustomerCode)\"\n\n                        \n### Assemblies\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n### Functions\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n## Logic \n\nif ($env:computername -eq $HixDBServer ){\n  $Maincount = 0\n  do {\n    $maincount ++\n    write-log -message \"Download $AppLongCode Database\"\n    \n    $PkgDir = \"R:\\Temp\"\n  \n    mkdir $PkgDir\n    \n    write \"Using URL $HixEmptyDBURL\"\n  \n    $filename = $hixEmptyDBURL -split \"\/\" | select -last 1\n    $output = \"$($PkgDir)\\$($filename)\"\n  \n    $count = 0\n    do {\n      $count ++\n      try {\n        $wc = New-Object net.webclient\n        $wc.Downloadfile($hixEmptyDBURL, $output)\n        $failed = 0\n      } catch {\n        sleep 15\n        $failed = 1\n      }\n    } until ($count -ge 4 -or $failed -eq 0)\n    \n    Expand-Archive -Path \"$($PkgDir)\\$($filename)\" -DestinationPath $PkgDir\n    $item = get-item \"$($PkgDir)\\*.bak\"\n  } until ($maincount -ge 5 -or $item)\n\n  write-log \"Restoring $AppLongCode Database(s)\"\n  $count = 0\n  do {\n    if ($count -eq 0){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)_ENVIRONMENTS\"\n      $bakfile = \"$($PkgDir)\\HiX_ENVIRONMENTS.bak\"\n    } elseif ($count -eq 1){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)_ENVSETTINGS\"\n      $bakfile = \"$($PkgDir)\\HiX_ENVSETTINGS.bak\"\n    } elseif ($count -eq 2){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)_MM\"\n      $bakfile = \"$($PkgDir)\\HiX_MM.bak\"\n    } elseif ($count -eq 3){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)\"\n      $bakfile = \"$($PkgDir)\\HiX_DEV.bak\"\n    } elseif ($count -eq 4){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)_AUDITLOG\"\n      $bakfile = \"$($PkgDir)\\HiX_PROD_AUDITLOG.bak\"\n    } elseif ($count -eq 5){\n      $HixTargetDBName = \"$($AppLongCode)_$($Tier)_UXIPLOG\"\n      $bakfile = \"$($PkgDir)\\HiX_UXIPLOG.bak\"\n    }\n    \"Restoring $AppLongCode Database $HixTargetDBName\"\n    Restore-SqlDatabase -ServerInstance $HixDBServer -Database $HixTargetDBName -BackupFile $bakfile -ReplaceDatabase\n    $count++\n  } until ($count -ge 6)\n  Set-Location SQLSERVER:\\SQL\\$($HixDBServer)\\MSSQLSERVER\n  Invoke-Sqlcmd -Query \"UPDATE dbo.ziscon_domain SET name = $($WindowsDomain) WHERE id='chipsoft02'\" -Database \"$($AppLongCode)_$($Tier)\"\n  $error.clear()\n}\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"03aaea22_runbook_cloned_0_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"9ed4ee76_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Configure SQL1 Part 2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"d69d1f47_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"9ed117f4_runbook_cloned_0_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"d69d1f47_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"9827a25e_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Install Management Server"}],"substrate_local_reference":{"kind":"app_substrate","name":"Mgt Box"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"00a6305e_deployment","min_replicas":"2","default_replicas":"2","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"2","package_local_reference_list":[{"kind":"app_package","name":"Install SQL"}],"substrate_local_reference":{"kind":"app_substrate","name":"MSSQL 2017 Single Instances"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"828ac615_deployment","min_replicas":"3","default_replicas":"3","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"3","package_local_reference_list":[{"kind":"app_package","name":"Install App Servers"}],"substrate_local_reference":{"kind":"app_substrate","name":"Hix App Servers"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"d54122c2_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Install XenApp Servers"}],"substrate_local_reference":{"kind":"app_substrate","name":"Xen App Servers"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"da2599c7_deployment","min_replicas":"4","default_replicas":"4","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"4","package_local_reference_list":[{"kind":"app_package","name":"Install Xen Backend Servers"}],"substrate_local_reference":{"kind":"app_substrate","name":"Xen App Backend Servers"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"a7eb873b_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Config XenDesktop Backend Servers"}],"substrate_local_reference":{"kind":"app_substrate","name":"Execute on XBS0"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"343f5662_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Configure MGT Part 2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Execute on MGT0"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"658658dc_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Configure XAS Part 2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Execute on XAS0"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"b2b237cc_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Configure SQL1 Part 2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Execute on SQL1"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Generate Report For all Servers"}],"name":"6d1aee83_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Generate Report For all Servers","attrs":{"exit_status":[],"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$domainServicePassword  = \"@@{Domain_Service_Account.secret}@@\"\n$domainServiceUser      = \"@@{Domain_Service_Account.username}@@\"\n$Tier                   = \"@@{Tier}@@\"\n$customerNameLong       = \"@@{CustomerNameLong}@@\"\n$customercode           = \"@@{CustomerName}@@\"\n$AppshortCode           = \"@@{AC}@@\"\n$AppLongCode            = \"@@{AppLongCode}@@\"\n\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n\n##Logic\n\n$password = $domainServicePassword | ConvertTo-SecureString -asplaintext -force;\n$domain = ((Get-WmiObject Win32_ComputerSystem).Domain)\n$credential = New-Object System.Management.Automation.PsCredential(\"$($domainServiceUser)\",$password);\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\nwrite-log -message \"Filtering VMs\"\n\n$vms = $vms.entities | where {$_.vmname -match \"^$($AppshortCode)-$($Tier)-$($customercode).*\"}\n\nwrite-log -message \"We have $($Vms.count) Vms after filtering for tier $Tier and customer $customercode\"\n\nForeach ($VM in $vms){\n#write $vms\n  $Target = \"$($vm.vmname).$($WindowsDomain)\"\n  if ($Vm.vmname -eq $VMName){\n    $hotfixoutput += Get-HotFix -ComputerName $Target\n  }\n  write \"Connecting to $Target\"\n  $hotfixoutput += Get-HotFix -ComputerName $Target -credential $credential\n}\n## HTML settings\n$Header = @\"\n<style>\nTABLE {border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;}\nTH {border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color: white;font-size:100%;}\nTD {border-width: 1px;padding: 3px;border-style: solid;border-color: black;width: 330px;font-size:85%}\n<\/style>\n\"@\n\n$hotfixoutput | select PsComputername,Description,HotFixID,InstalledBy,InstalledOn  | convertto-html -title \"Patching Report\" -head $Header | out-file c:\\inetpub\\wwwroot\\PatchingReport.html  \n$IP = (Get-NetIPAddress |where {$_.interfacealias -eq \"Ethernet\" -and $_.ipaddress -notmatch \"::\"}).IPAddress\nwrite \"Please open the report at http:\/\/$($ip)\/PatchingReport.html\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"0443dcbb_runbook","main_task_local_reference":{"kind":"app_task","name":"6d1aee83_dag"},"variable_list":[]},"name":"Windows Patching Generate Report"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Install Updates"}],"name":"78fca311_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Install Updates","attrs":{"exit_status":[],"script":"$VMName                 = \"@@{platform.status.name}@@\"\n$PEAdmin                = \"@@{PC_CRED.username}@@\"\n$PEPass                 = \"@@{PC_CRED.secret}@@\"\n$PEClusterIP            = \"@@{PEIP}@@\"\n$WindowsDomain          = \"@@{WindowsDomain}@@\"\n$domainServicePassword  = \"@@{Domain_Service_Account.secret}@@\"\n$domainServiceUser      = \"@@{Domain_Service_Account.username}@@\"\n$Tier                   = \"@@{Tier}@@\"\n$customerNameLong       = \"@@{CustomerNameLong}@@\"\n$customercode           = \"@@{CustomerName}@@\"\n$AppshortCode           = \"@@{AC}@@\"\n$AppLongCode            = \"@@{AppLongCode}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\nFunction REST-Get-VM-Detail {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $uuid\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v2.0\/vms\/$($uuid)?include_vm_disk_config=true&include_vm_nic_config=true&includeVMDiskSizes=true&includeAddressAssignments=true\"\n\n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found a VM called $($task.name)\"\n\n  Return $task\n} \n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\n\n##Logic\n\n$password = $domainServicePassword | ConvertTo-SecureString -asplaintext -force;\n$domain = ((Get-WmiObject Win32_ComputerSystem).Domain)\n$credential = New-Object System.Management.Automation.PsCredential(\"$($domainServiceUser)\",$password);\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEPass -clusername $PEAdmin\n\nwrite-log -message \"Filtering VMs\"\n\n$vms = $vms.entities | where {$_.vmname -match \"^$($AppshortCode)-$($Tier)-$($customercode).*\"}\n\nwrite-log -message \"We have $($Vms.count) Vms after filtering for tier $Tier and customer $customercode\"\n[array]$vms = $vms.vmname\n$string = $vms -join \",\"\n\nInvoke-WUInstall -ComputerName $string -Script {ipmo PSWindowsUpdate; Add-WUServiceManager -ServiceID 7971f918-a847-4430-9279-4a52d1efe18d -confirm:0;Get-WUInstall -MicrosoftUpdate -AcceptAll -AutoReboot -confirm:0 | Out-File C:\\PSWindowsUpdate.log } -Confirm:$false -Verbose\n\nget-content C:\\PSWindowsUpdate.log | out-file c:\\inetpub\\wwwroot\\InstallReport.html\n\n$IP = (Get-NetIPAddress |where {$_.interfacealias -eq \"Ethernet\" -and $_.ipaddress -notmatch \"::\"}).IPAddress\n\nwrite \"Please open the report at http:\/\/$($ip)\/InstallReport.html\"\n\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d2ec012f_runbook","main_task_local_reference":{"kind":"app_task","name":"78fca311_dag"},"variable_list":[]},"name":"Windows Patching Install Patches"},{"description":"Clones the ERA HIX Prod Database Into this instance.","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Clone Prod Database"}],"name":"769b1dc4_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Clone Prod Database","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$WindowsDomainUser          = \"@@{Domain_Service_Account.username}@@\"\n$WindowsDomainPass          = \"@@{Domain_Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n$targetTierDB               = \"@@{ERAProdDB}@@\"\n$SourceProdDB               = \"@@{ERATargetDB}@@\"\n$EraIP                      = \"@@{ConfigMGT.ERAIP}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n\nFunction REST-ERA-GetClusters {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP):8443\/era\/v0.8\/clusters\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-Get-Database-Servers {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/dbservers\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Instances {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Timemachines\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Snapshots {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $TMsID\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA TimeMachine $TMsID Capability\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($TMsID)\/capability?type=real&time-zone=Europe\/Amsterdam\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Accociate-TMS-With-MSSQL-Server {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $TmsID,\n    [object] $dbserver\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Associating Database Server $($dbserver.id) with TMS $($TmsID)\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($TmsID)\/dbservers?action=associate\";\n\n$body = @\"\n[\n  \"$($dbserver.id)\"\n]\n\"@\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"POST\" -body $body -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    write-log -message \"Already done boss\"\n    #$task = Invoke-RestMethod -Uri $URL -method \"POST\" -body $body -headers $headers;\n\n    $error.clear()\n  }  \n  Return $task\n} \n\n### Logic\n\nwrite-log -message \"Getting ERA Cluster\"\n\n$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nwrite-log -message \"We found the era cluster $($ERACluster.id)\"\nwrite-log -message \"Getting ERA TimeMachines\"\n\n$timemachines = REST-ERA-Get-TimeMachine-Instances -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nwrite-log -message \"We found $($TimeMachines.count) Timemachines\"\nwrite-log -message \"Searching for $SourceProdDB TimeMachine\"\n\n$timemachine = $timemachines | where {$_.name -eq $SourceProdDB }\n\nif ($timemachine){\n\n  write-log -message \"We found $SourceProdDB with ID $($TimeMachine.id)\"\n  write-log -message \"Getting the latest Snapshot, its ID.\"\n\n  $snapshots = REST-ERA-Get-TimeMachine-Snapshots -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMID\n  $snapshot = $snapshots.capability.Snapshots |sort dateCreated |select -last 1\n\n  write-log -message \"We are using snapshot $($snapshot.id) created on $($snapshot.dateCreated) with name $($snapshot.name)\"\n  Write-log -message \"Making sure the Database server is authorised for the timemachine\"\n\n  $dbservers = REST-ERA-Get-Database-Servers -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin\n  $dbserver = $dbservers | where {$_.name -eq \"$($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\"}\n\n  if (!$dbserver){\n\n    write-log -message \"This $applongcode SQL server is not registered, please register the server first.\"\n    write-log -message \"Please use Calm Day 2 actions to Register this database server first.\"\n\n  } else {\n\n    $connect = REST-ERA-Accociate-TMS-With-MSSQL-Server -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMID -dbserver $dbserver\n\n\n  }\n\n}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"6d843c2a_runbook","main_task_local_reference":{"kind":"app_task","name":"769b1dc4_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"ERAProdDB","value":"","label":"Select the ERA Hix Production Time Machine","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/@@{ConfigMGT.ERAIP}@@\/era\/v0.8\/tms'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nr = urlreq(api_url, verb='GET', auth=\"BASIC\", user='@@{PC_CRED.username}@@', passwd='@@{PC_CRED.secret}@@', headers=headers, verify=False)\n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nDatabases = []\nfor i in resp:\n    Databases.append(str(i['name']))\n#print (authProv)\nprint(','.join(Databases))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ERATargetDB","value":"Change Me","label":"Enter the Target Database Name for this instance","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"ERA Clone Prod DB"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Register SQL Server"}],"name":"a6f35a80_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Register SQL Server","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$WindowsDomainUser          = \"@@{Domain_Service_Account.username}@@\"\n$WindowsDomainPass          = \"@@{Domain_Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n$EraIP                      = \"@@{ConfigMGT.ERAIP}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n\nFunction REST-ERA-GetClusters {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP):8443\/era\/v0.8\/clusters\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-GET-MSSQL-Servers {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Database Servers\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/dbservers\";\n\n  write-log -message \"Using URL $url\"\n\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-Regoister-MSSQL-Server {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $WindowsDomain,\n    [string] $WindowsDomainUser, \n    [string] $WindowsDomainPass,\n    [string] $MSSQLVMIP,\n    [string] $MSSQLVMName,\n    [object] $ERACluster\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Registering HIX Database Server\"\n\n  $URL = \"https:\/$($EraIP)\/era\/v0.8\/dbservers\";\n\n  $body = @\"\n{\n  \"status\": \"8\",\n  \"timeMachineId\": null,\n  \"forcedInstall\": true,\n  \"ownerId\": \"1\",\n  \"type\": \"register_host\",\n  \"actionArguments\": [],\n  \"vmInfo\": [\n    {\n      \"name\": \"application_type\",\n      \"value\": \"sqlserver_database\"\n    },\n    {\n      \"name\": \"working_dir\",\n      \"value\": \"C:\\\\temp\"\n    },\n    {\n      \"name\": \"era_deploy_base\",\n      \"value\": \"C:\\\\NTNX\\\\ERA_BASE\"\n    },\n    {\n      \"name\": \"same_as_admin\",\n      \"value\": true\n    },\n    {\n      \"name\": \"create_era_drive\",\n      \"value\": true\n    },\n    {\n      \"name\": \"sql_login_used\",\n      \"value\": false\n    },\n    {\n      \"name\": \"sysadmin_username_win\",\n      \"value\": \"$($WindowsDomainUser)\"\n    },\n    {\n      \"name\": \"sysadmin_password_win\",\n      \"value\": \"$($WindowsDomainPass)\"\n    },\n    {\n      \"name\": \"instance_name\",\n      \"value\": \"MSSQLSERVER\"\n    }\n  ],\n  \"actionHeader\": [\n    {\n      \"name\": \"cloudId\",\n      \"value\": \"$($ERACluster.id)\"\n    },\n    {\n      \"name\": \"cloudName\",\n      \"value\": null\n    },\n    {\n      \"name\": \"host_ip\",\n      \"value\": \"$($MSSQLVMIP)\"\n    },\n    {\n      \"name\": \"vm_name\",\n      \"value\": \"$($MSSQLVMName)\"\n    },\n    {\n      \"name\": \"host_username\",\n      \"value\": \"$($WindowsDomainUser)\"\n    },\n    {\n      \"name\": \"host_password\",\n      \"value\": \"$($WindowsDomainPass)\"\n    }\n  ]\n}\n\"@\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"POST\" -body $body -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n\n    $task = Invoke-RestMethod -Uri $URL -method \"POST\" -body $body -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nWrite-log -message \"Query ERA Cluster\"\n\n$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nWrite-log -message \"Using ERA Cluster $($ERACluster.id)\"\n\n$vms = REST-Get-VMs -PEClusterIP $PEClusterIP -clpassword $PEpass -clusername $PEadmin\n\n$vm = $vms.entities | where {$_.vmname -eq \"$($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\"}\n\n$VMIP = $vm.ipAddresses | where { $_ -notmatch \"^169\"}\n\nWrite-log -message \"Getting existing MSSQL database servers, searching for $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\"\n\n$existingERAServers = REST-ERA-GET-MSSQL-Servers -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n$register = 1\nForeach ($server in $existingERAServers.name){\n  if ($server -eq \"$($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\"){\n\n    write-log -message \"Server  $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1 is already registered.\"\n\n    $register = 0\n  } \n}\nif ($register -eq 1){\n  \n  write-log -message \"Server $($Appshortcode)-$($tier)-$($CustomerCode)-SQL1 has NOT been registered, executing ERA Registration.\"\n\n  $register = REST-ERA-Regoister-MSSQL-Server -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin -WindowsDomain $WindowsDomain -WindowsDomainUser $WindowsDomainUser -WindowsDomainPass $WindowsDomainPass -MSSQLVMIP $VMIP -MSSQLVMName \"$($Appshortcode)-$($tier)-$($CustomerCode)-SQL1\" -ERACluster $ERACluster\n  \n\n  \n}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"84f1735c_runbook","main_task_local_reference":{"kind":"app_task","name":"a6f35a80_dag"},"variable_list":[]},"name":"ERA Register HIX Database Server"},{"description":"Clones the ERA HIX Prod Database Into this instance.","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Snapshot"}],"name":"769b1dc4_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Snapshot","attrs":{"exit_status":[],"script":"$PEClusterIP                = \"@@{PEIP}@@\"\n$PEadmin                    = \"@@{PC_CRED.username}@@\"\n$PEpass                     = \"@@{PC_CRED.secret}@@\"\n$VFilername                 = \"@@{FileServer}@@\"\n$WindowsAdDomainName        = \"@@{WindowsDomain}@@\"\n$WindowsDomainUser          = \"@@{Domain_Service_Account.username}@@\"\n$WindowsDomainPass          = \"@@{Domain_Service_Account.secret}@@\"\n$tier                       = \"@@{Tier}@@\"\n$CustomerCode               = \"@@{CustomerName}@@\"\n$Appshortcode               = \"@@{AC}@@\"\n$AppLongcode                = \"@@{AppLongCode}@@\"\n$DummyADContent             = \"@@{DummyADContent}@@\"\n$customerNameLong           = \"@@{CustomerNameLong}@@\"\n$targetTierDB               = \"@@{ERAProdDB}@@\"\n$SourceProdDB               = \"@@{ERATargetDB}@@\"\n$snapshotName               = \"@@{SnapShotName}@@\"\n$EraIP                      = \"@@{ConfigMGT.ERAIP}@@\"\n\nadd-type @\"\n  using System.Net;\n  using System.Security.Cryptography.X509Certificates;\n  public class TrustAllCertsPolicy : ICertificatePolicy {\n      public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate,\n                                        WebRequest request, int certificateProblem) {\n          return true;\n      }\n   }\n\"@\n\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Ssl3, [Net.SecurityProtocolType]::Tls, [Net.SecurityProtocolType]::Tls11, [Net.SecurityProtocolType]::Tls12\n\nFunction write-log {\n  param (\n  $message,\n  $sev = \"INFO\",\n  $slacklevel = 0\n  )\n  if ($sev -eq \"INFO\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | INFO  | $message\"\n  } elseif ($sev -eq \"WARN\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | WARN  | $message\"\n  } elseif ($sev -eq \"ERROR\"){\n    write-host \"$(get-date -format \"hh:mm:ss\") | ERROR | $message\"\n  } elseif ($sev -eq \"CHAPTER\"){\n    write-host \"`n`n### $message`n`n\"\n  }\n} \n\nfunction Get-FunctionName {\n  param (\n    [int]$StackNumber = 1\n  ) \n  return [string]$(Get-PSCallStack)[$StackNumber].FunctionName\n}\n\nFunction REST-Get-VMs {\n  Param (\n    [string] $PEClusterIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Executing VM List\"\n\n  $URL = \"https:\/\/$($PEClusterIP):9440\/PrismGateway\/services\/rest\/v1\/vms\"\n \n  try{\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  }\n  write-log -message \"We found $($task.entities.count) items.\"\n\n  Return $task\n} \n\n\nFunction REST-ERA-GetClusters {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP):8443\/era\/v0.8\/clusters\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-Get-Database-Servers {\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Clusters\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/dbservers\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Instances {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA Timemachines\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\nFunction REST-ERA-Get-TimeMachine-Snapshots {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $TMsID\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA TimeMachine $TMsID Capability\"\n\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($TMsID)\/capability?type=real&time-zone=Europe\/Amsterdam\"\n\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"GET\" -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n\nFunction REST-ERA-Create-TimeMachine-Snapshot {\n\n  Param (\n    [string] $EraIP,\n    [string] $clpassword,\n    [string] $clusername,\n    [string] $TMsID,\n    [string] $snapshotname\n  )\n\n  write-log -message \"Debug level is $($debug)\";\n  write-log -message \"Building Credential object\"\n  $credPair = \"$($clusername):$($clpassword)\"\n  $encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($credPair))\n  $headers = @{ Authorization = \"Basic $encodedCredentials\" }\n\n  write-log -message \"Query ERA TimeMachine $TMsID Capability\"\nhttps:\/\/10.42.75.39\/era\/v0.8\/tms\/c1b29f99-6236-4d9d-bb2c-4086a4344e23\/snapshots\n  $URL = \"https:\/\/$($EraIP)\/era\/v0.8\/tms\/$($TMsID)\/snapshots\"\n  $BODY = @\"\n{\n  \"actionHeader\": [{\n    \"name\": \"snapshotName\",\n    \"value\": \"$($snapshotname)\"\n  }]\n}\n\"@\n  write-log -message \"Using URL $URL\"\n  write-log -message \"Using IP $($EraIP)\"\n\n  try {\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $body -headers $headers;\n  } catch {\n    sleep 10\n    $error.clear()\n    $task = Invoke-RestMethod -Uri $URL -method \"post\" -body $body -headers $headers;\n\n    $FName = Get-FunctionName;write-log -message \"Error Caught on function $FName\" -sev \"WARN\"\n  }  \n  Return $task\n} \n\n### Logic\n\nwrite-log -message \"Getting ERA Cluster\"\n\n$ERACluster = REST-ERA-GetClusters -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nwrite-log -message \"We found the era cluster $($ERACluster.id)\"\nwrite-log -message \"Getting ERA TimeMachines\"\n\n$timemachines = REST-ERA-Get-TimeMachine-Instances -EraIP $ERAIP -clpassword $PEpass -clusername $PEadmin\n\nwrite-log -message \"We found $($TimeMachines.count) Timemachines\"\nwrite-log -message \"Searching for $SourceProdDB TimeMachine\"\n\n$timemachine = $timemachines | where {$_.name -eq $SourceProdDB }\n\nif ($timemachine){\n\n  write-log -message \"We found $SourceProdDB with ID $($TimeMachine.id)\"\n  write-log -message \"Creating a new shapshot\"\n\n  $snapshot = REST-ERA-Create-TimeMachine-Snapshot -EraIP $EraIP -clpassword $PEpass -clusername $PEadmin -TMsID $TMID -snapshotname $snapshotname\n \n  write-log -message \"a new shapshot has been created\"\n  write $snapshot\n\n}\n","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"6d843c2a_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"769b1dc4_dag_cloned_1"},"variable_list":[{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"ERAProdDB","value":"","label":"Select the ERA Hix Production Time Machine","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/@@{ConfigMGT.ERAIP}@@\/era\/v0.8\/tms'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nr = urlreq(api_url, verb='GET', auth=\"BASIC\", user='@@{PC_CRED.username}@@', passwd='@@{PC_CRED.secret}@@', headers=headers, verify=False)\n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nDatabases = []\nfor i in resp:\n    Databases.append(str(i['name']))\n#print (authProv)\nprint(','.join(Databases))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ERATargetDB","value":"Change Me","label":"Enter the Target Database Name for this instance","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"SnapShotName","value":"","label":"Enter the name for the snapshot","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"name":"ERA Create Prod Snapshot"},{"description":"Only use for non prod instances. Source DB is selected in ERA, Target DB is as per running tier instance of this app. ","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Not Implemented"}],"name":"404f6c88_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"MGT"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Not Implemented","attrs":{"exit_status":[],"script":"write \"TBD\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Domain_Service_Account"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"20786e2c_runbook","main_task_local_reference":{"kind":"app_task","name":"404f6c88_dag"},"variable_list":[]},"name":"ERA Refresh Prod To Tier"}],"name":"XenDesktopV1110","variable_list":[{"regex":{"should_validate":true,"value":"^[A-Za-z0-9-_]{1,3}$"},"val_type":"STRING","is_mandatory":false,"description":"Short Customer Code for naming convention\n3 Chars Short, Upper, Lower, Nrs - and _ are allowed","data_type":"BASE","type":"LOCAL","name":"CustomerName","value":"NTX","label":"Enter Customer Short Code (3 Chars)","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Tier","value":"DEV","label":"Select the Tier for this deployment","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["DEV","PRD","ACC","TST"]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"WindowsDomain","value":"","label":"Select Domain Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/localhost:9440\/PrismGateway\/services\/rest\/v1\/authconfig'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nr = urlreq(api_url, verb='GET', auth=\"BASIC\", user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)\n#r = urlreq(api_url, verb='GET', headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nauthProv = []\nfor i in resp['directoryList']:\n    authProv.append(str(i['domain']))\nauthProv.append(\"Create New\")\n#print (authProv)\nprint(','.join(authProv))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":true,"description":"Password for all DevTest Users, the same password is used when generating 100s of test users, needs to comply to AD password policy","data_type":"BASE","type":"SECRET","name":"UserPassword","value":"","label":"Enter the Password for user accounts","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Long Customer Name, Can contain spaces etc.","data_type":"BASE","type":"LOCAL","name":"CustomerNameLong","value":"Nutanix","label":"Enter Customer Long Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Password for admin accounts specified in AdminAccounts, same password is used for all admins, needs to comply to AD password policy","data_type":"BASE","type":"SECRET","name":"AdminPassword","value":"","label":"Enter the password for the Admin accounts","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Comma Separated list of UPNs to be created, Needs to be a valid UPN for the given domain","data_type":"BASE","type":"LOCAL","name":"AdminAccounts","value":"will.robbinson","label":"Enter the admin UPNs","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"Creates random AD users for this HIX Deployment","data_type":"BASE","type":"LOCAL","name":"DummyADContent","value":"1","label":"Enable Active Directory Dummy Users","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["1","0"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PEIP","value":"10.42.73.37","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Internal variable, Image is downloaded as per downloadable config","data_type":"BASE","type":"LOCAL","name":"CitrixImageName","value":"Citrix_1912_ISO","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Used for Home drives of test users.","data_type":"BASE","type":"EXEC_LOCAL","name":"FileServer","value":"","label":"Select the correct Files Server.","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/@@{PEIP}@@:9440\/PrismGateway\/services\/rest\/v1\/vfilers'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nr = urlreq(api_url, verb='GET', auth=\"BASIC\", user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)\n#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nauthProv = []\nfor i in resp['entities']:\n    authProv.append(str(i['name']))\nauthProv.append(\"Create New\")\n#print (authProv)\nprint(','.join(authProv))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ChocoPackagesURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/pduqo0i0u6460fz\/ChocoPackages.zip","label":"","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ChocoClientPackageURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/eoyk38rzod4435z\/chocolatey.zip","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Contains both Nutanix Citrix Binaries","data_type":"BASE","type":"LOCAL","name":"CitrixNutanixPackagesURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/zr9ld9jygxx8ej8\/Nutanix-Citrix.zip","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"HixPackageURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/rqdts4zlmyjbhff\/ChipSoft.6.2.zip","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Empty Hix DB","data_type":"BASE","type":"LOCAL","name":"HixEmptyDBURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/cj4dpko6cxu5h10\/HiX_Leeg.zip","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"XenAppServerCount","value":"5","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["1","2","3","4","5"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"EXEC_LOCAL","name":"StorageContainerName","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/@@{PEIP}@@:9440\/PrismGateway\/services\/rest\/v2.0\/storage_containers'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\nr = urlreq(api_url, verb='GET', auth=\"BASIC\", user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, verify=False)\n#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nContainerNames = []\nfor i in resp['entities']:\n    ContainerNames.append(str(i['name']))\nContainerNames.append(\"Create New\")\n#print (authProv)\nprint(','.join(ContainerNames))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"val_type":"STRING","is_mandatory":false,"description":"AutoSelect will choose the first vlan in the alfabet","data_type":"BASE","type":"EXEC_LOCAL","name":"VLanName","value":"","label":"Select the VLAN name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"EXEC","attrs":{"script":"api_url = 'https:\/\/@@{PEIP}@@:9440\/api\/nutanix\/v3\/subnets\/list'\nheaders = {'Content-Type': 'application\/json',  'Accept':'application\/json'}\n#headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\n\npayload = {\n  \"kind\": \"subnet\",\n  \"offset\": 0,\n  \"length\": 999\n}\n\nr = urlreq(api_url, verb='POST', auth=\"BASIC\", user='@@{Z_PCUser}@@', passwd='@@{Z_PCPassClearText}@@', headers=headers, params=json.dumps(payload), verify=False)\n\n\n#r = urlreq(api_url, verb='POST', params=json.dumps(payload), headers=headers, verify=False)\nif r.ok:\n    resp = json.loads(r.content)\n    #pprint(resp)\nelse:\n    print \"Post request failed\", r.content\n    exit(1)\nVLanNames = []\nVLanNames.append(\"AutoSelect\")\nfor i in resp['entities']:\n    VLanNames.append(str(i['spec']['name']))\n\nprint(','.join(VLanNames))","type":"EXEC","command_line_args":"","exit_status":[],"script_type":"static"}}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"Windows 2019 1809\nWindows 2016 1607\nWindows 10 1903 (not implemented)\n","data_type":"BASE","type":"LOCAL","name":"WindowsEdition","value":"Windows 2016","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Windows 2019","Windows 2016","Windows 10"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"CitrixOptimizerPackageURL","value":"https:\/\/dl.dropboxusercontent.com\/s\/eo1lw55gwsovjnt\/CitrixOptimizer.zip","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Short app code only 2 chars","data_type":"BASE","type":"LOCAL","name":"AC","value":"HX","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"App long code, max 6 chars","data_type":"BASE","type":"LOCAL","name":"AppLongCode","value":"HIX","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Z_PCPassClearText","value":"nx2Tech968!","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"Z_PCUser","value":"admin","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"1 of this BP is running on 1-click-demo.\nThis is because the presence of the Certificate Auth. if 0 Xen install reverts to self signed.","data_type":"BASE","type":"LOCAL","name":"OneCDPresent","value":"1","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":true,"options":{"type":"PREDEFINED","choices":["1","0"]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"Service_Account"},"type":"USER"},"name":"XenDesktopV1110"},"api_version":"3.0","metadata":{"last_update_time":"1581163289554426","kind":"blueprint","spec_version":2,"creation_time":"1581140397601629","name":"XenDesktopV1110"}}