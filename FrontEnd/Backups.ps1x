

<%
                                                                                       
if ($env:computername -match "dev"){
  $global:SQLInstance           = "1-click-dev\SQLEXPRESS"
  $global:SQLInstLog            = "1-click-dev\SQLEXPRESS"
} else {
  $global:SQLInstance           = "1-click-demo\SQLEXPRESS"
  $global:SQLInstLog            = "1-click-demo\SQLEXPRESS" 
}
if ((Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain -eq $true){
  $global:portable = 0
} else {
  $global:portable = 1
}
$global:BaseDir               = "C:\1-click-dev\"
$global:Frontend              = "C:\1-click-demo\FrontEnd"
$global:SQLDatabase           = "1ClickDemo"
$global:SQLQueueTableName     = "Queue"
$global:SQLDataVarTableName   = "DataVar"
$global:SQLDataGenTableName   = "DataGen"
$global:SQLLoggingTableName   = "Logging"
$global:SQLDataStatsTableName = "DataStats"
$global:SQLDataUserTableName  = "DataUser"  
$global:SQLDataValidationTableName  = "DataValidation"


if ($Portable -eq 1){
  $user = "Portable 1-click-demo"
  $content = get-content "$($Frontend)\app\functions\header-portable.html"
  $content -replace "---Username---", $user
} else {
  $content = get-content "$($Frontend)\app\functions\header.html"
  $user             = (get-aduser $request.ServerVariables["LOGON_USER"]).UserPrincipalName
  $sendername              = $user.split("@")[0]
  $sendername              = $sendername.replace('.', ' ')
  $content -replace "---Username---", $user
}  


$SQLbackups = Invoke-Sqlcmd -ServerInstance $SQLInstance -Query "SELECT * FROM [$($SQLDatabase)].[dbo].$($SQLDataUserTableName) WHERE SenderEmail='$user'" -MaxCharLength 3500000
$BluePrintBackups = $null
Foreach ($item in $SQLbackups){
  #write "Looping for index $($item.BackupIndex)"
  $BackupColumnCountint = 0 
  do {
    $BackupColumnCountint++
    #write "Checking Column $BackupColumnCountint"
    $BackupColumnCount = '{0:d3}' -f $BackupColumnCountint
    $bpname = $null
    $BPJson = $null
    $BPName = $item."BluePrint$($BackupColumnCount)_Name" | where {$_ -ne "NA" -and $_ -notmatch "No backup was present for thi"}
    $BPJson = $item."BluePrint$($BackupColumnCount)_JSON" 
    #write "checking if BluePrint$($BackupColumnCount)_Name exists"
    #write "checking if BluePrint$($BackupColumnCount)_JSON exists"
    if ($bpname -and $bpjson){
      $object = [PSCustomObject]@{
        BPName = $BPName 
        Index = $item.BackupIndex
        Timestamp = $item.DateCreated
        JSON = $BPJson
        QueueUUID = $item.QueueUUID
      }
      #write "Adding 1 object to Array"
      [array] $BluePrintBackups += $object
    }
  } until ($BackupColumnCountint -ge 50)
}
$unique = $BluePrintBackups | sort Timestamp | sort BPname -unique 
[array]$list = $unique.bpname
$lastbackups = $null
foreach ($BP in $list){
  [array] $lastbackups += $BluePrintBackups | where {$_.BPName -eq $bp } | sort Timestamp | select -last 1 ## Select the last backup item.
}

$Restorepoint = $SQLbackups | sort DateCreated -Descending | select -first 1

$Restores= $null
$blueprintsarray = $null
[array]$looparray = $Restorepoint.PSObject.Properties | Select-Object -Expand Name
foreach ($item in $looparray){
  if ($item -match "Blueprint.*_name"){
    [array]$blueprintsarray += $item
  }
}

$numbers = $null
Foreach ($item in $blueprintsarray){
  [array]$numbers += [string](($item -split "BluePrint") -split "_")[1]
}

foreach ($number in $numbers){
  $blueprintname = ($Restorepoint.PSObject.Properties | where {$_.name -eq "BluePrint$($number)_name"}).value
  $blueprintJson = ($Restorepoint.PSObject.Properties | where {$_.name -eq "BluePrint$($number)_json"}).value
  if ($blueprintname -ne "NA" -and $blueprintname -notmatch "No backup"){
    $myObject = [PSCustomObject]@{
      Name     = $blueprintname
      JSON     = $blueprintJson
    }
    [array]$Restores += $myObject      
  }
  
}




%>
 <div id="bodyContent" class="n-body-content" style="display: block;width:50%;margin: 0 auto;">

    <!-- Render the content based on the state of the app. -->
    <div id="stateContainer" class="n-state-container">
    <div class="n-state-content-form"><!-- Configuration Form -->
<div id="configurationFormContainer" class="n-configuration-form-container">

  <!-- Configuration Holder -->
  <div class="configViewHolder">
    <div class="startViewHolder view-holder" data-test="startViewHolder" style="display: block;"><div><div id="startContainer" class="n-start-container">
  <div class="content-container">
    <div class="startPageGuideContainer">
        <br>You have <B><% $BluePrintBackups.count %></B> Total Backups<br>  
        <br>You have <B><% $unique.count %></B> Unique Backups<br> 
        <br>You have <B><% $Restores.count %></B> backups in your current restorepoint.<br>
<%



  $SQLbackups = Invoke-Sqlcmd -ServerInstance $SQLInstance -Query "SELECT * FROM [$($SQLDatabase)].[dbo].$($SQLDataUserTableName) WHERE SenderEmail='$user'" -MaxCharLength 3500000
  [array]$queueuuids = $SQLbackups.queueuuid | sort -unique
    
  $Runninguser = 

  $Running = Get-ScheduledTask | where {$_.taskname -match "^Backup" } -ea:0
  foreach ($task in $Running){
    $ID = $task.taskname.split("-",2)[1]
    if ($ID -in $queueuuids){
      $queueuuid = $id
      $Last = 1

    }
  }


$backup = get-scheduledtask -ea:0 | where {$_.taskname -eq "Backup-$queueuuid" } 

if ($backup.taskname){

  $Datavar      = Invoke-Sqlcmd -ServerInstance $SQLInstance -Query "SELECT TOP 1 * FROM [$($SQLDatabase)].[dbo].$($SQLDataVarTableName) WHERE QueueUUID='$QueueUUID';" 
  $stopURL= "StopBackup.ps1x?QueueUUID=$queueuuid"
%>
        <br>You have an active backup running.<br>
        <br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspStarted on <b><%= $datavar.DateCreated %></b>
        <br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspPOC Name <b><%= $datavar.pocname %></b>
        <br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspID <b><%= $queueuuid %></b>

        <br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspYou can stop the backup here:<br>
        <br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<input type=submit value="Stop" onclick="window.location.href='<%= $stopurl %>'" /><br>
<%
} else {
%>
        
        <br>There are no active Backups being taken.<br>

<%
} 
%>

        <br>Please see the list below (only the last backup is shown)<br>
        <br>Choose the backups to filter and go to the restore page<br><br>



     <table margin-left=40px border=5 cellpadding=4 width=800 align=left>
         <tr>
          <th style="color:#204FA0;background-color:#BDD043">Load Restore Page</th>
          <th style="color:#204FA0;background-color:#BDD043">Blueprint Name</th>
          <th style="color:#204FA0;background-color:#BDD043">Backup Index</th>
          <th style="color:#204FA0;background-color:#BDD043">Last Backup Date</th>
          <th style="color:#204FA0;background-color:#BDD043">In Restore Point</th>
          <th style="color:#204FA0;background-color:#BDD043">Valid?</th>
          
        </tr>                    
        
<%
 
foreach ($item in $lastbackups){
                
    try{
      $object = $item.json | convertfrom-json -ea:0
      $itembad = 0
    } catch {$itembad = 1}    
    %> 
    
           <tr>   
    <%
    $bpnameenc = [System.Web.HttpUtility]::UrlEncode($($item.BPName))
     $restoreUrl= "Restore.ps1x?BPName=$bpnameenc"
    %>
            <td style="text-align: center;" width="50"><input type=submit value="Browse" onclick="window.location.href='<%= $restoreUrl %>'" /> </td>
            <td style="text-align: center;" width="150"><%= $($item.BPName) %></td>
            <td style="text-align: center;" width="75"><%= $($item.Index) %></td>
            <td style="text-align: center;" width="75"><%= $($item.Timestamp) %></td>
    <%
    if ($item.BPName -in $restores.name){
      $text = "Yes"
    } else {
      $text = "No"
    }
    
    %>
          <td style="text-align: center;" width="75"><%= $text %></td>
    
    
    <% 
    if ($itembad -eq 0){
    %>
      <td style="text-align: center;" width="75"><img src="./images/XwHw.gif" height="65" width="65" align ="center" title="JSON is Valid"/></td>
    <%
    } else {
    %> 
      <td style="text-align: center;" width="75"><img src="./images/loading-red-spot.gif" height="65" width="65" align ="center" title="JSON is not valid."/></td>
    <%  
    }
    %>
<%  
}
%>

       </tr>
  </table> <br>  
        
        <br><br>  <br><br>  
<br><br><br><br>

    </div>
  </div>
</div>
<meta http-equiv="refresh" content="20">
</div>
</div>
</body>


